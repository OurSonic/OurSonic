function HeightMask(b, c, a) { this.width = 16; this.height = 16; this.angle = c; this.items = a ? a : []; this.rotationMode = b; HeightMask.prototype.setItem = function (d, g) { var f = 0, e = 0; switch (this.rotationMode) { case RotationMode.Floor: f = d; e = g; break; case RotationMode.RightWall: f = g; e = d; break; case RotationMode.Ceiling: f = d; e = 15 - g; break; case RotationMode.LeftWall: f = g; e = 15 - d; break; default: } this.items[f] = 16 - e }; HeightMask.prototype.draw = function (f, k, g, d) { var e; if ((e = sonicManager.SpriteCache.heightMaps[this.index + " " + g.y + " " + g.x])) { if (e.loaded) { f.drawImage(e, k.x, k.y) } } else { for (var m = 0; m < 16; m++) { for (var l = 0; l < 16; l++) { var o = 0, n = 0; switch (this.rotationMode) { case RotationMode.Floor: o = m; n = l; break; case RotationMode.RightWall: o = l; n = m; break; case RotationMode.Ceiling: o = m; n = 15 - l; break; case RotationMode.LeftWall: o = 15 - l; n = m; break; default: } var j = k.x + (o * g.x); var h = k.y + (n * g.y); f.lineWidth = 1; if (d <= 0 && this.items[m] >= 16 - l) { f.fillStyle = "rgba(24,98,235,0.6)"; f.fillRect(j, h, g.x, g.y) } else { if (d != -1) { f.lineWidth = 1; f.strokeStyle = "#0C3146"; f.strokeRect(j, h, g.x, g.y) } } } } if (d == 1) { f.strokeStyle = "#DC4146"; f.lineWidth = 4; f.moveTo(k.x + 8 * g.x, k.y + 8 * g.y); f.lineTo(k.x + 8 * g.x + _H.sin((this.angle)) * 6 * g.x, k.y + 8 * g.y + _H.cos((this.angle)) * 6 * g.y); f.stroke() } } } } window._H = { floor: function (a) { if (a > 0) { return ~ ~a } return Math.floor(a) }, min: function (a, b) { return a > b ? b : a }, max: function (a, b) { return a < b ? b : a }, loadSprite: function (b, a) { var c = new Image(); c.onload = function () { c.loaded = true; if (a) { a(c) } }; c.src = b; return c }, fixAngle: function (c) { var a = Math.floor((256 - c) * 1.4062) % 360; var b = 360 - a; return _H.degtorad(b) }, degtorad: function (a) { return a * Math.PI / 180 }, sign: function (a) { return a == 0 ? 0 : (a < 0 ? -1 : 1) }, defaultWindowLocation: function (a) { switch (a) { case 0: return { x: 0, y: 0, width: 320, height: 240 }; case 1: return { x: 0, y: 0, width: 900, height: 240 * 2} } return null }, defaultCanvas: function (b, d) { var c = document.createElement("canvas"); c.width = b; c.height = d; var a = c.getContext("2d"); a.width = b; a.height = d; return { canvas: c, context: a} }, intersectRect: function (b, a) { return !(a.left > b.right || a.right < b.left || a.top > b.bottom || a.bottom < b.top) }, remove: function (a, c) { var b = -1; while ((b = a.indexOf(c)) > -1) { a.splice(b, 1) } }, getShortsFromInt: function (a, c) { var b = -1; while ((b = a.indexOf(c)) > -1) { a.splice(b, 1) } }, scaleSprite: function (c, j, b) { var g = _H.getImageData(c); var a = []; for (var e = 0; e < g.length; e += 4) { a.push(_H.colorObjectFromData(g, e)) } var h = this.defaultCanvas().context.createImageData(c.width * j.x, c.height * j.y); _H.setDataFromColors(h.data, a, j, c.width, { r: 0, g: 0, b: 0 }); return _H.loadSprite(_H.getBase64Image(h), b) }, getCursorPosition: function (b, a) { if (b.targetTouches && b.targetTouches.length > 0) { b = b.targetTouches[0] } if (b.pageX != null && b.pageY != null) { return { x: b.pageX, y: b.pageY} } if (b.x != null && b.y != null) { return { x: b.x, y: b.y} } return { x: b.clientX, y: b.clientY} }, colorFromData: function (h, l) { var f = h[l]; var e = h[l + 1]; var a = h[l + 2]; var k = f.toString(16); var j = e.toString(16); var d = a.toString(16); return "#" + (k.length == 1 ? "0" + k : k) + (j.length == 1 ? "0" + j : j) + (d.length == 1 ? "0" + d : d) }, colorObjectFromData: function (f, h) { var e = f[h]; var d = f[h + 1]; var a = f[h + 2]; return { r: e, g: d, b: a} }, parseNumber: function (a) { switch (a) { case "0": return 0; case "1": return 1; case "2": return 2; case "3": return 3; case "4": return 4; case "5": return 5; case "6": return 6; case "7": return 7; case "8": return 8; case "9": return 9; case "a": return 10; case "b": return 11; case "c": return 12; case "d": return 13; case "e": return 14; case "f": return 15; case "g": return 16 } return -1 }, setDataFromColors: function (m, a, f, d, t) { for (var n = 0; n < a.length; n++) { var e = (n % d); var b = _H.floor(n / d); var o = a[n]; var s = false; if (t) { if (o.r == t.r && o.g == t.g && o.b == t.b) { s = true } } for (var l = 0; l < f.x; l++) { for (var h = 0; h < f.y; h++) { var r = (e * f.x + l); var q = (b * f.y + h); var p = (r + q * (f.x * d)) * 4; if (s) { m[p + 0] = 0; m[p + 1] = 0; m[p + 2] = 0; m[p + 3] = 0; continue } m[p] = o.r; m[p + 1] = o.g; m[p + 2] = o.b; m[p + 3] = 255 } } } }, getImageData: function (b) { var c = document.createElement("canvas"); c.width = b.width; c.height = b.height; var a = c.getContext("2d"); a.drawImage(b, 0, 0); var d = a.getImageData(0, 0, b.width, b.height); return d.data }, getBase64Image: function (c) { var b = document.createElement("canvas"); b.width = c.width; b.height = c.height; var a = b.getContext("2d"); a.putImageData(c, 0, 0); var d = b.toDataURL("image/png"); return d }, isFunction: function (a) { var b = {}; return a && b.toString.call(a) == "[object Function]" }, detect: function (c, a) { for (var b in c) { if (typeof (c[b]) == "object") { if (a[c[b]]) { alert("circ") } a[c[b]] = true; this.detect(c[b], a) } } }, stringify: function (e, g) { return JSON.stringify(e, function (h, j) { if (h == "imageData") { return undefined } if (h == "oldScale") { return undefined } if (h == "sprite") { return undefined } if (h == "sprites") { return undefined } if (h == "index") { return undefined } if (h == "_style") { return undefined } else { return j } }); if (g > 0) { return "" } if (!g) { g = 0 } var d = typeof (e); if (d != "object" || e === null) { if (d == "string") { e = '"' + e + '"' } return String(e) } else { var f, b, c = [], a = (e && e.constructor == Array); for (f in e) { b = e[f]; d = typeof (b); if (d == "string") { b = '"' + b + '"' } else { if (d == "object" && b !== null) { b = stringify(b, g + 1) } } c.push((a ? "" : '"' + f + '":') + String(b)) } return (a ? "[" : "{") + String(c) + (a ? "]" : "}") } }, compareTiles: function (c, a, b) { var d; for (d = 0; d < c.length; d++) { if (c[d].equals(b)) { return d } } for (d = 0; d < a.length; d++) { if (a[d].equals(b)) { return c.length + d } } return -1 }, compareTilePieces: function (c, b, d) { var a; for (a = 0; a < c.length; a++) { if (c[a].equals(d)) { return a } } for (a = 0; a < b.length; a++) { if (b[a].equals(d)) { return c.length + a } } return -1 }, sin: function (a) { return cos_table[(a + 64) & 255] }, cos: function (a) { return cos_table[(a) & 255] } }; window.cos_table = [1, 0.9997, 0.9988, 0.99729, 0.99518, 0.99248, 0.98918, 0.98528, 0.98079, 0.9757, 0.97003, 0.96378, 0.95694, 0.94953, 0.94154, 0.93299, 0.92388, 0.91421, 0.90399, 0.89322, 0.88192, 0.87009, 0.85773, 0.84485, 0.83147, 0.81758, 0.80321, 0.78835, 0.77301, 0.75721, 0.74095, 0.72425, 0.70711, 0.68954, 0.67156, 0.65317, 0.63439, 0.61523, 0.5957, 0.57581, 0.55557, 0.535, 0.5141, 0.4929, 0.4714, 0.44961, 0.42755, 0.40524, 0.38268, 0.3599, 0.33689, 0.31368, 0.29028, 0.26671, 0.24298, 0.2191, 0.19509, 0.17096, 0.14673, 0.12241, 0.09802, 0.07356, 0.04907, 0.02454, 0, -0.02454, -0.04907, -0.07356, -0.09802, -0.12241, -0.14673, -0.17096, -0.19509, -0.2191, -0.24298, -0.26671, -0.29028, -0.31368, -0.33689, -0.3599, -0.38268, -0.40524, -0.42755, -0.44961, -0.4714, -0.4929, -0.5141, -0.535, -0.55557, -0.57581, -0.5957, -0.61523, -0.63439, -0.65317, -0.67156, -0.68954, -0.70711, -0.72425, -0.74095, -0.75721, -0.77301, -0.78835, -0.80321, -0.81758, -0.83147, -0.84485, -0.85773, -0.87009, -0.88192, -0.89322, -0.90399, -0.91421, -0.92388, -0.93299, -0.94154, -0.94953, -0.95694, -0.96378, -0.97003, -0.9757, -0.98079, -0.98528, -0.98918, -0.99248, -0.99518, -0.99729, -0.9988, -0.9997, -1, -0.9997, -0.9988, -0.99729, -0.99518, -0.99248, -0.98918, -0.98528, -0.98079, -0.9757, -0.97003, -0.96378, -0.95694, -0.94953, -0.94154, -0.93299, -0.92388, -0.91421, -0.90399, -0.89322, -0.88192, -0.87009, -0.85773, -0.84485, -0.83147, -0.81758, -0.80321, -0.78835, -0.77301, -0.75721, -0.74095, -0.72425, -0.70711, -0.68954, -0.67156, -0.65317, -0.63439, -0.61523, -0.5957, -0.57581, -0.55557, -0.535, -0.5141, -0.4929, -0.4714, -0.44961, -0.42756, -0.40524, -0.38268, -0.3599, -0.33689, -0.31368, -0.29028, -0.26671, -0.24298, -0.2191, -0.19509, -0.17096, -0.14673, -0.12241, -0.09802, -0.07356, -0.04907, -0.02454, -0, 0.02454, 0.04907, 0.07356, 0.09802, 0.12241, 0.14673, 0.17096, 0.19509, 0.2191, 0.24298, 0.26671, 0.29028, 0.31368, 0.33689, 0.3599, 0.38268, 0.40524, 0.42756, 0.44961, 0.4714, 0.4929, 0.5141, 0.535, 0.55557, 0.57581, 0.5957, 0.61523, 0.63439, 0.65317, 0.67156, 0.68954, 0.70711, 0.72425, 0.74095, 0.75721, 0.77301, 0.78835, 0.80321, 0.81758, 0.83147, 0.84485, 0.85773, 0.87009, 0.88192, 0.89322, 0.90399, 0.91421, 0.92388, 0.93299, 0.94154, 0.94953, 0.95694, 0.96378, 0.97003, 0.9757, 0.98079, 0.98528, 0.98918, 0.99248, 0.99518, 0.99729, 0.9988, 0.9997]; window.Base64 = { _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function (c) { var a = ""; var k, h, f, j, g, e, d; var b = 0; c = Base64._utf8_encode(c); while (b < c.length) { k = c.charCodeAt(b++); h = c.charCodeAt(b++); f = c.charCodeAt(b++); j = k >> 2; g = ((k & 3) << 4) | (h >> 4); e = ((h & 15) << 2) | (f >> 6); d = f & 63; if (isNaN(h)) { e = d = 64 } else { if (isNaN(f)) { d = 64 } } a = a + this._keyStr.charAt(j) + this._keyStr.charAt(g) + this._keyStr.charAt(e) + this._keyStr.charAt(d) } return a }, decode: function (c) { var a = ""; var k, h, f; var j, g, e, d; var b = 0; c = c.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (b < c.length) { j = this._keyStr.indexOf(c.charAt(b++)); g = this._keyStr.indexOf(c.charAt(b++)); e = this._keyStr.indexOf(c.charAt(b++)); d = this._keyStr.indexOf(c.charAt(b++)); k = (j << 2) | (g >> 4); h = ((g & 15) << 4) | (e >> 2); f = ((e & 3) << 6) | d; a = a + String.fromCharCode(k); if (e != 64) { a = a + String.fromCharCode(h) } if (d != 64) { a = a + String.fromCharCode(f) } } a = Base64._utf8_decode(a); return a }, _utf8_encode: function (b) { b = b.replace(/\r\n/g, "\n"); var a = ""; for (var e = 0; e < b.length; e++) { var d = b.charCodeAt(e); if (d < 128) { a += String.fromCharCode(d) } else { if ((d > 127) && (d < 2048)) { a += String.fromCharCode((d >> 6) | 192); a += String.fromCharCode((d & 63) | 128) } else { a += String.fromCharCode((d >> 12) | 224); a += String.fromCharCode(((d >> 6) & 63) | 128); a += String.fromCharCode((d & 63) | 128) } } } return a }, _utf8_decode: function (a) { var b = ""; var d = 0; var e = c1 = c2 = 0; while (d < a.length) { e = a.charCodeAt(d); if (e < 128) { b += String.fromCharCode(e); d++ } else { if ((e > 191) && (e < 224)) { c2 = a.charCodeAt(d + 1); b += String.fromCharCode(((e & 31) << 6) | (c2 & 63)); d += 2 } else { c2 = a.charCodeAt(d + 1); c3 = a.charCodeAt(d + 2); b += String.fromCharCode(((e & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)); d += 3 } } } return b } }; function OutStream() { this.bytestream = new Array(); this.offset = 0; this.WriteBit = function (a) { this.bytestream[this.offset >>> 3] |= a << (this.offset & 7); this.offset++ }; this.Write = function (c, b) { for (var a = 0; a < b; ++a) { this.WriteBit((c >>> a) & 1) } } } function InStream(a, b) { this.bytestream = a; this.bitcount = b; this.offset = 0; this.ReadBit = function () { var c = this.bytestream[this.offset >>> 3] >> (this.offset & 7); this.offset++; return c & 1 }; this.Read = function (d) { if ((this.offset + d) > this.bitcount) { return null } var e = 0; for (var c = 0; c < d; ++c) { e |= this.ReadBit() << c } return e } } function LZWCompressor(a) { this.output = a; this.CompressDictionary = function () { this.hashtable = new Object(); this.nextcode = 0; for (var b = 0; b < 256; ++b) { var c = String.fromCharCode(b); this.hashtable[c] = this.nextcode++ } this.Exists = function (d) { return (this.hashtable.hasOwnProperty(d)) }; this.Insert = function (e) { var d = this.ValSizeInBits(); this.hashtable[e] = this.nextcode++; return d }; this.Lookup = function (d) { return (this.hashtable[d]) }; this.ValSizeInBits = function () { var d = Math.log(this.nextcode + 1) / Math.LN2; return Math.ceil(d) } }; this.compress = function (g) { var e = g.length; if (e == 0) { return output.bytestream } var j = new this.CompressDictionary(); var f = j.ValSizeInBits(); var b = ""; for (var d = 0; d < e; ++d) { var h = g.charAt(d); if (j.Exists(b + h)) { b = b + h } else { f = j.Insert(b + h); this.output.Write(j.Lookup(b), f); b = h } } this.output.Write(j.Lookup(b), f) } } function LZWDecompressor(a) { this.input = a; this.DecompressDictionary = function () { this.revhashtable = new Array(); this.nextcode = 0; for (var b = 0; b < 256; ++b) { this.revhashtable[this.nextcode++] = String.fromCharCode(b) } this.numBits = 9; this.Size = function () { return (this.nextcode) }; this.Insert = function (d) { this.revhashtable[this.nextcode++] = d; var c = Math.log(this.nextcode + 2) / Math.LN2; this.numBits = Math.ceil(c); return this.numBits }; this.LookupIndex = function (c) { return this.revhashtable[c] }; this.ValSizeInBits = function () { return this.numBits } }; this.decompress = function (f, h) { if (h == 0) { return "" } var j = new this.DecompressDictionary(); var g = j.ValSizeInBits(); var d = this.input.Read(g); var c = String.fromCharCode(d); var b = c; var e = ""; while ((d = this.input.Read(g)) != null) { if (d < j.Size()) { e = j.LookupIndex(d) } else { e = b + b.charAt(0) } c += e; g = j.Insert(b + e.charAt(0)); b = e } return c } } function Ring(a) { this.active = a; this.animationIndex = 0; this.x = 0; this.y = 0; this.xsp = 0; this.ysp = 0; this.tickCount = 0; this.draw = function (c, f, e) { if (a) { this.ysp += 0.09375; this.x += this.xsp; this.y += this.ysp; if (this.x < sonicManager.windowLocation.x || this.y < sonicManager.windowLocation.y || this.x > sonicManager.windowLocation.x + sonicManager.windowLocation.width || this.y > sonicManager.windowLocation.y + sonicManager.windowLocation.height) { this.tickCount = 4294967295; return false } if (sonicManager.sonicToon.checkCollisionLine(_H.floor(this.x) + 8, _H.floor(this.y) + 8, 16, 1) != -1) { this.ysp *= -0.75 } if (sonicManager.sonicToon.checkCollisionLine(_H.floor(this.x) - 8, _H.floor(this.y) + 8, 26, 0) != -1) { this.xsp *= -0.75 } if (sonicManager.drawTickCount > sonicManager.sonicToon.sonicLastHitTick + 64 && _H.intersectRect(sonicManager.sonicToon.myRec, { left: this.x - 8 * e.x, right: this.x + 8 * e.x, top: this.y - 8 * e.y, bottom: this.y + 8 * e.y })) { this.tickCount = 4294967295; sonicManager.sonicToon.rings++; return false } this.tickCount++ } if (sonicManager.sonicToon) { this.animationIndex = _H.floor((sonicManager.drawTickCount % ((a ? 4 : 8) * 4)) / (a ? 4 : 8)) } else { this.animationIndex = 0 } var d; if (sonicManager.SpriteCache.rings) { d = sonicManager.SpriteCache.rings } else { alert("sprite fial"); return } var b = d[this.animationIndex * 200 + e.y * 100 + e.x]; if (!b) { alert("sprite fail"); return } if (b.loaded) { c.drawImage(b, _H.floor(f.x * e.x), _H.floor(f.y * e.y)) } else { return false } } } function Sonic(b, c) { this.x = 104; this.y = 1584; this.obtainedRing = []; this.rings = 0; this.debugging = false; this.jumping = false; this.crouching = false; this.holdingLeft = false; this.holdingRight = false; this.LevelWidth = 0; this.xsp = 0; this.ysp = 0; this.sonicLastHitTick = 0; this.sonicJustHitTick = 0; this.acc = 0.046875; this.dec = 0.5; this.frc = 0.046875; this.gsp = 0; this.rdec = 0.125; this.rfrc = 0.0234375; this.runningTick = 0; this.slp = 0.125; this.slpRollingUp = 0.078125; this.slpRollingDown = 0.3125; this.jmp = -6.5; this.grv = 0.21875; this.air = 0.09375; this.sonicLevel = b; this.inAir = false; this.wasInAir = false; this.holdingJump = false; this.haltSmoke = []; this.hlock = 0; this.mode = RotationMode.Floor; this.facing = true; this.ticking = false; this.breaking = 0; this.ducking = false; this.spinDash = false; this.myRec = {}; this.spinDashSpeed = 0; this.angle = 255; var a; this.updateMode = function () { if (this.angle < 32 || this.angle > 224) { this.mode = RotationMode.Floor } else { if (this.angle > 32 && this.angle < 96) { this.mode = RotationMode.LeftWall } else { if (this.angle > 96 && this.angle < 160) { this.mode = RotationMode.Ceiling } else { if (this.angle > 160 && this.angle < 224) { this.mode = RotationMode.RightWall } } } } }; this.tick = function () { if (this.debugging) { var k = 15; if (this.holdingRight) { this.x += k } if (this.holdingLeft) { this.x -= k } if (this.crouching) { this.y += k } if (this.jumping) { this.y -= k } return } this.updateMode(); if (this.hlock > 0) { this.hlock--; this.holdingRight = false; this.holdingLeft = false } this.myRec = { left: this.x - 5, right: this.x + 5, top: this.y - 20, bottom: this.y + 20 }; var n = 6; if (this.jumping) { this.wasJumping = true } else { if (this.wasJumping) { this.wasJumping = false } } if (!this.inAir && this.wasInAir) { this.wasInAir = false; if (this.angle >= 240 || this.angle <= 15) { this.gsp = this.xsp } else { if ((this.angle >= 224 && this.angle <= 239) || (this.angle >= 16 && this.angle <= 31)) { this.gsp = this.ysp } else { if ((this.angle >= 192 && this.angle <= 223)) { this.gsp = -this.ysp } else { if ((this.angle >= 32 && this.angle <= 63)) { this.gsp = this.ysp } } } } this.xsp = 0; this.ysp = 0 } if (!this.inAir && !this.rolling) { if (this.holdingRight && !this.holdingLeft) { this.facing = true; if (this.gsp >= 0) { this.gsp += this.acc; if (this.gsp > n) { this.gsp = n } } else { this.gsp += this.dec; if (Math.abs(this.gsp) > 4.5) { this.facing = false; this.breaking = 1; this.runningTick = 0 } } } if (this.holdingLeft && !this.holdingRight) { this.facing = false; if (this.gsp <= 0) { this.gsp -= this.acc; if (this.gsp < -n) { this.gsp = -n } } else { this.gsp -= this.dec; if (Math.abs(this.gsp) > 4.5) { this.facing = true; this.breaking = -1; this.runningTick = 0 } } } if (!this.holdingLeft && !this.holdingRight) { this.gsp -= Math.min(Math.abs(this.gsp), this.frc) * (this.gsp > 0 ? 1 : -1) } a = _H.sign(this.gsp); this.gsp += this.slp * -_H.sin(this.angle); if (a != _H.sign(this.gsp) && a != 0) { this.hlock = 30 } } this.ducking = false; if (this.crouching) { if (Math.abs(this.gsp) > 1.03125) { this.rolling = true; this.currentlyBall = true } else { this.ducking = true } } else { if (this.spinDash) { this.gsp = (8 + _H.floor(this.spinDashSpeed) / 2) * (this.facing ? 1 : -1); this.spinDash = false; this.rolling = true; this.currentlyBall = true } } if (!this.isAir && this.rolling) { if (this.holdingLeft) { if (this.gsp > 0) { if (this.rolling) { this.gsp = _H.max(0, this.gsp - this.rdec) } } } if (this.holdingRight) { if (this.gsp < 0) { if (this.rolling) { this.gsp = _H.min(0, this.gsp + this.rdec) } } } this.gsp -= Math.min(Math.abs(this.gsp), this.rfrc) * (this.gsp > 0 ? 1 : -1); a = _H.sign(this.gsp); var j = _H.sin(this.angle); if ((j > 0) != (this.gsp > 0)) { this.gsp += -this.slpRollingUp * j } else { this.gsp += -this.slpRollingDown * j } if (a != _H.sign(this.gsp) && a != 0) { this.hlock = 30 } } if (!this.inAir) { this.xsp = this.gsp * _H.cos(this.angle); this.ysp = this.gsp * -_H.sin(this.angle); if (Math.abs(this.gsp) < 2.5 && this.angle >= 64 && this.angle <= 192) { if (this.mode == RotationMode.RightWall) { this.x += 5 } else { if (this.mode == RotationMode.LeftWall) { this.x -= 4 } } this.angle = 0; this.updateMode(); this.hlock = 30 } } if (this.inAir) { if (this.holdingRight && !this.holdingLeft) { this.facing = true; if (this.xsp >= 0) { this.xsp += this.air; if (this.xsp > n) { this.xsp = n } } else { this.xsp -= this.air } } if (this.holdingLeft && !this.holdingRight) { this.facing = false; if (this.xsp <= 0) { this.xsp -= this.air; if (this.xsp < -n) { this.xsp = -n } } else { this.xsp += this.air } } if (this.wasInAir) { if (this.jumping) { } else { } } this.ysp += this.justHit ? 0.1875 : this.grv; if (this.ysp < 0 && this.ysp > -4) { if (Math.abs(this.xsp) > 0.125) { this.xsp *= 0.96875 } } if (this.ysp > 16) { this.ysp = 16 } } if (this.wasInAir && this.jumping) { } else { if (this.jumping) { if (this.ducking) { this.spinDash = true; this.spinDashSpeed += 2; if (this.spinDashSpeed > 8) { this.spinDashSpeed = 8 } this.spriteState = "spindash0" } else { this.wasInAir = true; this.inAir = true; this.currentlyBall = true; this.xsp = this.jmp * _H.sin(this.angle) + this.gsp * _H.cos(this.angle); this.ysp = this.jmp * _H.cos(this.angle) } } } if (this.xsp > 0 && this.xsp < 0.008) { this.gsp = 0; this.xsp = 0 } if (this.xsp < 0 && this.xsp > -0.008) { this.gsp = 0; this.xsp = 0 } this.x += this.xsp; this.y += this.ysp; this.updateSprite(); var f = _H.floor(this.x); var e = _H.floor(this.y); var h, g; var m = -10; var l = 4; if (this.mode == RotationMode.Floor) { if ((h = this.checkCollisionLine(f + m, e + l, 20, 0)) != -1) { if (h.pos < f) { this.x = f = Math.ceil(h.pos / 16) * 16 + 10; this.gsp = 0 } else { this.x = f = Math.floor(h.pos / 16) * 16 - 10; this.gsp = 0 } if (this.inAir) { this.xsp = 0 } } } else { if (this.mode == RotationMode.LeftWall) { if ((h = this.checkCollisionLine(f - l, e + m, 20, 1)) != -1) { if (h.pos > e) { this.y = e = Math.ceil(h.pos / 16) * 16 - 10 } else { this.y = e = Math.floor(h.pos / 16) * 16 + 10; this.gsp = 0 } if (this.inAir) { this.xsp = 0 } } } else { if (this.mode == RotationMode.Ceiling) { if ((h = this.checkCollisionLine(f - m, e - l, 20, 0)) != -1) { if (h.pos < f) { this.x = f = Math.ceil(h.pos / 16) * 16 + 10; this.gsp = 0 } else { this.x = f = Math.floor(h.pos / 16) * 16 - 10; this.gsp = 0 } if (this.inAir) { this.xsp = 0 } } } else { if (this.mode == RotationMode.RightWall) { if ((h = this.checkCollisionLine(f + l, e + m, 20, 1)) != -1) { if (h.pos < e) { this.y = e = Math.ceil(h.pos / 16) * 16 - 11; this.gsp = 0 } else { this.y = e = Math.floor(h.pos / 16) * 16 + 11; this.gsp = 0 } if (this.inAir) { this.xsp = 0 } } } } } } if (sonicManager.tickCount % 4 == 0) { this.checkCollisionWithRing() } if (this.inAir) { this.angle = 255 } if (!this.inAir) { var p = 24; m = -9; l = 0; if (this.mode == RotationMode.Floor) { h = this.checkCollisionLine(f + m, e + l, p, 1); g = this.checkCollisionLine(f - m, e + l, p, 1); if (h == -1 && g == -1) { this.inAir = true; this.wasInAir = true } else { if (h.pos >= 0 && g.pos >= 0) { this.angle = h.angle; if (h.pos < g.pos) { this.angle = h.angle; this.y = e = h.pos - 20 } else { this.angle = g.angle; this.y = e = g.pos - 20 } } else { if (h.pos > -1) { this.angle = h.angle; this.y = e = h.pos - 20 } else { if (g.pos > -1) { this.angle = g.angle; this.y = e = g.pos - 20 } } } } } else { if (this.mode == RotationMode.LeftWall) { h = this.checkCollisionLine(f + l, e - m, p, 2); g = this.checkCollisionLine(f + l, e + m, p, 2); if (h == -1 && g == -1) { this.inAir = true; this.wasInAir = true } else { if (h.pos >= 0 && g.pos >= 0) { if (h.pos < g.pos) { this.angle = h.angle; this.x = f = h.pos + 20 } else { this.angle = g.angle; this.x = f = g.pos + 20 } } else { if (h.pos > -1) { this.angle = h.angle; this.x = f = h.pos + 20 } else { if (g.pos > -1) { this.angle = g.angle; this.x = f = g.pos + 20 } } } } } else { if (this.mode == RotationMode.Ceiling) { h = this.checkCollisionLine(f + m, e - l, p, 3); g = this.checkCollisionLine(f - m, e - l, p, 3); if (h == -1 && g == -1) { this.inAir = true; this.wasInAir = true } else { if (h.pos >= 0 && g.pos >= 0) { if (h.pos < g.pos) { this.angle = h.angle; this.y = e = h.pos - 20 } else { this.angle = g.angle; this.y = e = g.pos - 20 } } else { if (h.pos > -1) { this.angle = h.angle; this.y = e = h.pos - 20 } else { if (g.pos > -1) { this.angle = g.angle; this.y = e = g.pos - 20 } } } } } else { if (this.mode == RotationMode.RightWall) { h = this.checkCollisionLine(f + l, e - m, p, 0); g = this.checkCollisionLine(f + l, e + m, p, 0); if (h == -1 && g == -1) { this.inAir = true; this.wasInAir = true } else { if (h.pos >= 0 && g.pos >= 0) { if (h.pos < g.pos) { this.angle = h.angle; this.x = f = h.pos - 20 } else { this.angle = g.angle; this.x = f = g.pos - 20 } } else { if (h.pos > -1) { this.angle = h.angle; this.x = f = h.pos - 20 } else { if (g.pos > -1) { this.angle = g.angle; this.x = f = g.pos - 20 } } } } } } } } this.updateMode() } else { h = this.checkCollisionLine(f - 9, e, 20, 1); g = this.checkCollisionLine(f + 9, e, 20, 1); if (h == -1 && g == -1) { this.inAir = true; this.wasInAir = true } else { if (h.pos >= 0 && g.pos >= 0) { if (h.pos < g.pos) { if (this.y + (20) >= h.pos) { this.angle = h.angle; this.y = e = h.pos - 20; this.rolling = this.currentlyBall = false; this.inAir = false } } else { if (g.pos > -1) { if (this.y + (20) >= g.pos) { this.angle = g.angle; this.y = e = g.pos - 20; this.rolling = this.currentlyBall = false; this.inAir = false } } } } else { if (h.pos > -1) { if (this.y + (20) >= h.pos) { this.angle = h.angle; this.y = e = h.pos - 20; this.rolling = this.currentlyBall = false; this.inAir = false } } else { if (g.pos > -1) { if (this.y + (20) >= g.pos) { this.angle = g.angle; this.y = e = g.pos - 20; this.rolling = this.currentlyBall = false; this.inAir = false } } } } } this.updateMode(); var o = sonicManager.SpriteCache.sonicSprites[this.spriteState + c.x + c.y]; var d = o.height / c.y / 2; h = this.checkCollisionLine(f - 9, e, d, 3); g = this.checkCollisionLine(f + 9, e, d, 3); if ((h == -1 && g == -1)) { } else { if (h.pos >= 0 && g.pos >= 0) { this.angle = h.angle; if (h.pos < g.pos) { if (this.y + (d) >= h.pos) { this.angle = h.angle; this.y = e = h.pos + d; this.ysp = 0 } } else { if (this.y + (d) >= g.pos) { this.angle = g.angle; this.y = e = g.pos + d; this.ysp = 0 } } } else { if (h.pos > -1) { if (this.y + (d) >= h.pos) { this.angle = h.angle; this.y = e = h.pos + d; this.ysp = 0 } } else { if (g.pos > -1) { if (this.y + (d) >= g.pos) { this.angle = g.angle; this.y = e = g.pos + d; this.ysp = 0 } } } } this.updateMode() } } }; this.debug = function () { this.debugging = !this.debugging; this.xsp = 0; this.gsp = 0; this.ysp = 0; this.spriteState = "normal" }; this.hit = function () { if (sonicManager.drawTickCount - this.sonicJustHitTick < 120) { return } this.justHit = true; this.ysp = -4; this.xsp = 2 * (-1); this.sonicLastHitTick = sonicManager.drawTickCount; var e = 0; var g = 101.25; var h = false; var f = 4; while (e < this.rings) { var d = new Ring(true); sonicManager.activeRings.push(d); d.x = this.x; d.y = this.y - 10; d.ysp = -Math.sin(g) * f; d.xsp = Math.cos(g) * f; if (h) { d.ysp *= -1; g += 22.5 } h = !h; e++; if (e == 16) { f = 2; g = 101.25 } } this.rings = 0 }; this.checkCollisionWithRing = function () { var g = this.myRec; for (var f in sonicManager.SonicLevel.Rings) { var h = sonicManager.SonicLevel.Rings[f]; if (this.obtainedRing[f]) { continue } var e = h.x * 8 * c.x; var d = h.y * 8 * c.y; if (_H.intersectRect(g, { left: e - 8 * c.x, right: e + 8 * c.x, top: d - 8 * c.y, bottom: d + 8 * c.y })) { this.rings++; this.obtainedRing[f] = true } } }; this.sensorA = 0; this.checkCollisionLine = function (e, h, f, g) { var d = this.checkCollisionLineWrap(e, h, f, g); if (d != -1 && d.angle == null) { d = this.checkCollisionLineWrap(e, h, f, g) } if (d.angle == 255) { if (this.mode == RotationMode.Floor) { } else { if (this.mode == RotationMode.LeftWall) { d.angle = Math.floor(256 / 4 * 1) } else { if (this.mode == RotationMode.Ceiling) { d.angle = Math.floor(256 / 4 * 2) } else { if (this.mode == RotationMode.RightWall) { d.angle = Math.floor(256 / 4 * 3) } } } } } return d }; this.checkCollisionLineWrap = function (u, r, e, t) { var s = _H.floor(u / 128); var p = _H.floor(r / 128); var h = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[s + p * sonicManager.SonicLevel.LevelWidth]]; var n = sonicManager.SonicLevel.curHeightMap ? h.heightBlocks1 : h.heightBlocks2; var q = sonicManager.SonicLevel.curHeightMap ? h.angleMap1 : h.angleMap2; var j = u - s * 128; var g = r - p * 128; var d = g * 128 + j; var l = 128; var k; var f; var o = 0; switch (t) { case 0: if (u + e > sonicManager.SonicLevel.LevelWidth * 128) { return { pos: sonicManager.SonicLevel.LevelWidth * 128 - 20, angle: null} } for (k = 0; k < e; k++) { if (j + k >= 128) { h = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[s + 1 + p * sonicManager.SonicLevel.LevelWidth]]; n = sonicManager.SonicLevel.curHeightMap ? h.heightBlocks1 : h.heightBlocks2; q = sonicManager.SonicLevel.curHeightMap ? h.angleMap1 : h.angleMap2; j -= 128 } if (u + k > this.LevelWidth || n[g * 128 + (j + k)]) { return { pos: u + k, angle: q[_H.floor((g) / 16) * 8 + _H.floor((j + k) / 16)]} } } break; case 1: if (r + e > sonicManager.SonicLevel.LevelHeight * 128) { return { pos: sonicManager.SonicLevel.LevelHeight * 128 - 20, angle: null} } for (k = 0, f = e * l; k < f; k += l) { if (g + o >= 128) { h = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[s + (p + 1) * sonicManager.SonicLevel.LevelWidth]]; n = sonicManager.SonicLevel.curHeightMap ? h.heightBlocks1 : h.heightBlocks2; q = sonicManager.SonicLevel.curHeightMap ? h.angleMap1 : h.angleMap2; g -= 128; d -= 128 * 128 } if (n[d + k]) { return { pos: r + (k / l), angle: q[_H.floor((g + o) / 16) * 8 + _H.floor((j) / 16)]} } o++ } break; case 2: if (u - e < 0) { return { pos: 0 + 20, angle: null} } for (k = 0; k < e; k++) { if (j - k < 0) { h = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[(s - 1) + p * sonicManager.SonicLevel.LevelWidth]]; n = sonicManager.SonicLevel.curHeightMap ? h.heightBlocks1 : h.heightBlocks2; q = sonicManager.SonicLevel.curHeightMap ? h.angleMap1 : h.angleMap2; j += 128 } if (u - k < 0 || n[g * 128 + (j - k)]) { return { pos: u - k, angle: q[_H.floor((g) / 16) * 8 + _H.floor((j - k) / 16)]} } } break; case 3: if (r - e < 0) { return { pos: 20, angle: null} } for (k = 0, f = e * l; k < f; k += l) { if (g - o < 0) { h = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[s + (p - 1) * sonicManager.SonicLevel.LevelWidth]]; n = sonicManager.SonicLevel.curHeightMap ? h.heightBlocks1 : h.heightBlocks2; q = sonicManager.SonicLevel.curHeightMap ? h.angleMap1 : h.angleMap2; g += 128; d += 128 * 128 } if (n[d - k]) { return { pos: r - (k / l), angle: q[_H.floor((g - o) / 16) * 8 + _H.floor((j) / 16)]} } o++ } break } return -1 }; this.spriteState = "normal"; this.isLoading = function () { return this.imageLoaded[0] < this.imageLength }; this.drawUI = function (d, f, e) { d.font = "13pt Arial bold"; d.fillStyle = "White"; d.fillText("Rings: " + this.rings, f.x + 90, f.y + 45); d.fillText("Angle: " + this.angle.toString(16), f.x + 90, f.y + 75); d.fillText("Position: " + _H.floor(this.x) + ", " + _H.floor(this.y), f.x + 90, f.y + 105); d.fillText("Speed: g: " + this.gsp.toFixed(3) + " x:" + this.xsp.toFixed(3) + " y:" + this.ysp.toFixed(3), f.x + 90, f.y + 135); d.fillText("Mode: " + this.mode, f.x + 90, f.y + 185) }; this.draw = function (d, f) { var h = _H.floor(this.x); var e = _H.floor(this.y); var m; var l = sonicManager.drawTickCount - this.sonicJustHitTick; if (l < 120) { if (l % 8 < 4) { return } } if (m = sonicManager.SpriteCache.sonicSprites[this.spriteState + f.x + f.y]) { if (m.loaded) { d.save(); var g = (40 - (m.height / f.y)) / 2; d.translate(((h - sonicManager.windowLocation.x) * f.x), ((e - sonicManager.windowLocation.y + g) * f.y)); if (!this.facing) { d.scale(-1, 1); d.rotate(-_H.fixAngle(this.angle)); d.drawImage(m, -m.width / 2, -m.height / 2); if (this.spinDash) { d.drawImage(sonicManager.SpriteCache.sonicSprites[("spinsmoke" + _H.floor((sonicManager.drawTickCount % 14) / 2)) + f.x + f.y], (-m.width / 2) - 25 * f.x, -m.height / 2 + (g * f.y) - 15, m.width, m.height) } } else { d.rotate(_H.fixAngle(this.angle)); d.drawImage(m, -m.width / 2, -m.height / 2); if (this.spinDash) { d.drawImage(sonicManager.SpriteCache.sonicSprites[("spinsmoke" + _H.floor((sonicManager.drawTickCount % 14) / 2)) + f.x + f.y], (-m.width / 2) - 25 * f.x, -m.height / 2 + (g * f.y) - 15, m.width, m.height) } } d.restore(); for (var j = 0; j < this.haltSmoke.length; j++) { var k = this.haltSmoke[j]; d.drawImage(sonicManager.SpriteCache.sonicSprites[("haltsmoke" + _H.floor((sonicManager.drawTickCount % (4 * 6)) / 6)) + f.x + f.y], ((k.x - sonicManager.windowLocation.x - 25) * f.x), ((k.y + 12 - sonicManager.windowLocation.y + g) * f.y)); if (_H.floor(((sonicManager.drawTickCount + 6) % (4 * 6)) / 6) == 0) { this.haltSmoke.splice(j, 1) } } } } else { if (m = sonicManager.SpriteCache.sonicSprites[this.spriteState]) { if (m.loaded) { sonicManager.SpriteCache.sonicSprites[this.spriteState + f.x + f.y] = _H.scaleSprite(m, f) } } else { sonicManager.SpriteCache.sonicSprites[this.spriteState] = _H.loadSprite(this.spriteLocations[this.spriteState]) } } }; this.kill = function () { }; this.pressJump = function () { if (!this.justHit) { this.jumping = true } }; this.pressCrouch = function () { if (!this.justHit) { this.crouching = true } }; this.pressLeft = function () { if (!this.justHit) { this.holdingLeft = true } }; this.pressRight = function () { if (!this.justHit) { this.holdingRight = true } }; this.releaseJump = function () { this.jumping = false }; this.releaseCrouch = function () { this.crouching = false }; this.releaseLeft = function () { this.holdingLeft = false }; this.releaseRight = function () { this.holdingRight = false }; this.buildHeightInfo = function () { this.LevelWidth = b.LevelWidth * 128; for (var o = 0; o < b.TileChunks.length; o++) { var p = b.TileChunks[o]; var j = p.heightMap1; var h = p.heightMap2; var q; var g = p.heightBlocks1 = []; var e = p.heightBlocks2 = []; g.length = 128 * 128; e.length = 128 * 128; for (var m = 0; m < 8; m++) { for (var n = 0; n < 8; n++) { var l = j[n + m * 8]; var k = h[n + m * 8]; if (l == 0) { continue } var f; var d; if (l == 1) { for (d = 0; d < 16; d++) { for (f = 0; f < 16; f++) { q = (n * 16 + f) + (m * 16 + d) * (128); g[q] = true; e[q] = true } } continue } l = l.items; k = k.items; for (d = 0; d < 16; d++) { for (f = 0; f < 16; f++) { q = (n * 16 + f) + (m * 16 + d) * (128); g[q] = l[f] > 16 - d; e[q] = k[f] > 16 - d } } } } } }; this.updateSprite = function () { var e = Math.abs(this.gsp); var d = parseInt(this.spriteState.substring(this.spriteState.length - 1, this.spriteState.length)); if (this.breaking > 0) { if (this.gsp > 0 || this.gsp == 0 || this.spriteState == "breaking3") { this.facing = false; this.breaking = 0 } } else { if (this.breaking < 0) { if (this.gsp < 0 || this.gsp == 0 || this.spriteState == "breaking3") { this.breaking = 0; this.facing = true } } } if (this.justHit) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "hit") { this.spriteState = "hit0"; this.runningTick = 1 } else { if ((this.runningTick++) % (_H.floor(8 - e)) == 0) { this.spriteState = "hit1" } } } else { if (e == 0 && this.inAir == false) { if (this.ducking) { if (this.spinDash) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "spindash") { this.spriteState = "spindash0"; this.runningTick = 1 } else { if ((this.runningTick++) % (_H.floor(2 - e)) == 0) { this.spriteState = "spindash" + ((d + 1) % 6) } } } else { if (this.spriteState.substring(0, this.spriteState.length - 1) != "duck") { this.spriteState = "duck0"; this.runningTick = 1 } else { if ((this.runningTick++) % (_H.floor(4 - e)) == 0) { this.spriteState = "duck1" } } } } else { this.spriteState = "normal"; this.currentlyBall = false; this.rolling = false; this.runningTick = 0 } } else { if (this.breaking != 0) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "breaking") { this.spriteState = "breaking0"; this.runningTick = 1 } else { if ((this.runningTick++) % (7) == 0) { this.spriteState = "breaking" + ((d + 1) % 4); if (d == 0) { this.haltSmoke.push({ x: _H.floor(this.x), y: _H.floor(this.y) }) } } } } else { if (this.currentlyBall) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "balls") { this.spriteState = "balls0"; this.runningTick = 1 } else { if ((this.runningTick++) % (_H.floor(8 - e)) == 0) { this.spriteState = "balls" + ((d + 1) % 5) } } } else { if (e < 6) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "running") { this.spriteState = "running0"; this.runningTick = 1 } else { if ((this.runningTick++) % (_H.floor(8 - e)) == 0 || (_H.floor(8 - e) == 0)) { this.spriteState = "running" + ((d + 1) % 8) } } } else { if (e >= 6) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "fastrunning") { this.spriteState = "fastrunning0"; this.runningTick = 1 } else { if (((this.runningTick++) % (Math.ceil(8 - e)) == 0) || (_H.floor(8 - e) == 0)) { this.spriteState = "fastrunning" + ((d + 1) % 4) } } } } } } } } }; this.buildHeightInfo(b) } DEBUGs = true; window.requestAnimFrame = (function (a) { if (window.requestAnimationFrame) { return window.requestAnimationFrame(a) } if (window.webkitRequestAnimationFrame) { return window.webkitRequestAnimationFrame(a) } if (window.mozRequestAnimationFrame) { return window.mozRequestAnimationFrame(a) } if (window.oRequestAnimationFrame) { return window.oRequestAnimationFrame(a) } if (window.msRequestAnimationFrame) { return window.msRequestAnimationFrame(a) } window.setTimeout(a, 1000 / 60) }); function SonicEngine(a) { var g = this; this.canvas = $("#" + a); this.canvasItem = document.getElementById(a).getContext("2d"); var h = window.sonicManager = new SonicManager(this.canvasItem); this.canvasWidth = 0; this.canvasHeight = 0; document.getElementById(a).addEventListener("DOMMouseScroll", f, false); document.getElementById(a).addEventListener("mousewheel", f, false); document.getElementById(a).addEventListener("touchmove", d); document.getElementById(a).addEventListener("touchstart", b); document.getElementById(a).addEventListener("touchend", k); document.getElementById(a).addEventListener("mousedown", b); document.getElementById(a).addEventListener("mouseup", k); document.getElementById(a).addEventListener("mousemove", d); $(document).keydown(j); $(document).keyup(c); function b(l) { l.preventDefault(); if (h.uiManager.onClick(l)) { return false } if (h.onClick(l)) { return false } return false } function d(l) { l.preventDefault(); if (h.uiManager.onMouseMove(l)) { return false } return false } function k(l) { l.preventDefault(); h.uiManager.onMouseUp(l) } function f(l) { l.preventDefault(); if (h.uiManager.onMouseScroll(l)) { return false } return l.preventDefault() && false } function j(l) { switch (l.keyCode) { case 66: if (h.sonicToon) { h.sonicToon.hit() } break; case 67: if (h.sonicToon) { h.sonicToon.debug() } break; case 68: h.SonicLevel.curHeightMap = !h.SonicLevel.curHeightMap; break; case 38: case 87: if (h.sonicToon) { h.sonicToon.pressJump() } else { h.windowLocation.y -= 128 } break; case 40: case 83: if (h.sonicToon) { h.sonicToon.pressCrouch() } else { h.windowLocation.y += 128 } break; case 37: case 65: h.windowLocation.x -= 128; if (h.sonicToon) { h.sonicToon.pressLeft() } else { h.windowLocation.x -= 128 } break; case 39: case 68: h.windowLocation.x += 128; if (h.sonicToon) { h.sonicToon.pressRight() } else { h.windowLocation.x += 128 } break } } function c(l) { switch (l.keyCode) { case 38: case 87: if (h.sonicToon) { h.sonicToon.releaseJump() } break; case 40: case 83: if (h.sonicToon) { h.sonicToon.releaseCrouch() } break; case 37: case 65: if (h.sonicToon) { h.sonicToon.releaseLeft() } break; case 39: case 68: if (h.sonicToon) { h.sonicToon.releaseRight() } break } } g.resizeCanvas = function () { g.canvasWidth = $(window).width(); g.canvasHeight = $(window).height(); g.canvas.attr("width", g.canvasWidth); g.canvas.attr("height", g.canvasHeight) }; function e(l) { l.clearRect(0, 0, g.canvasWidth, g.canvasHeight) } g.draw = function () { requestAnimFrame(g.draw); e(g.canvasItem); h.draw(g.canvasItem); h.uiManager.draw(g.canvasItem) }; $(window).resize(this.resizeCanvas); this.resizeCanvas(); requestAnimFrame(g.draw); window.setInterval(h.tick, 1000 / 60, h) } function SonicManager(b) { var c = this.scale = { x: 2, y: 2 }; this.windowLocation = _H.defaultWindowLocation(1); this.showHeightMap = false; this.goodRing = new Ring(false); this.activeRings = []; this.uiManager = new UIManager(this, b, this.scale); this.SonicLevel = { Tiles: [], TilePieces: [], TileChunks: [], ChunkMap: [], Rings: {}, curHeightMap: true, LevelWidth: 0, LevelHeight: 0 }; var a = new TileChunk() + new TilePiece() + new Tile() + new HeightMask(); this.SonicLevel.ChunkMap = []; this.clickState = ClickState.PlaceChunk; this.onClick = function (k) { if (k.shiftKey) { var h = this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[_H.floor(k.x / (128 * c.x)) + _H.floor(k.y / (128 * c.y)) * sonicManager.SonicLevel.LevelWidth]]; var m = h.getTilePiece((k.x - _H.floor(k.x / (128 * c.x)) * (128 * c.x)), (k.y - _H.floor(k.y / (128 * c.y)) * (128 * c.y)), c); if (m) { this.uiManager.indexes.tpIndex = this.SonicLevel.TilePieces.indexOf(m); this.uiManager.modifyTilePieceArea.tilePiece = m; this.uiManager.solidTileArea.visible = true } } else { if (!k.button || k.button == 0) { switch (this.clickState) { case ClickState.PlaceChunk: this.SonicLevel.ChunkMap[_H.floor(k.x / (128 * c.x)) + _H.floor(k.y / (128 * c.y)) * sonicManager.SonicLevel.LevelWidth] = this.uiManager.indexes.modifyIndex; break; case ClickState.PlaceRing: var g = _H.floor((k.x - _H.floor(k.x / (128 * c.x)) * (128 * c.x)) / (c.x)); var f = _H.floor((k.y - _H.floor(k.y / (128 * c.y)) * (128 * c.y)) / (c.y)); var l = (_H.floor(g / 16)) + (_H.floor(k.x / (128 * c.x))) * 8; var j = (_H.floor(f / 16)) + (_H.floor(k.y / (128 * c.y))) * 8; if (this.SonicLevel.Rings[j * 8 * sonicManager.SonicLevel.LevelWidth + l]) { delete this.SonicLevel.Rings[j * 8 * sonicManager.SonicLevel.LevelWidth + l] } else { this.SonicLevel.Rings[j * 8 * sonicManager.SonicLevel.LevelWidth + l] = { x: l, y: j} } break; default: } } } }; this.tickCount = 0; this.drawTickCount = 0; var d = new Image(); d.src = "http://dested.com/oursonic/assets/TileChunks/plane b.png"; this.tick = function (e) { if (e.loading) { return } if (e.sonicToon) { e.tickCount++; e.sonicToon.ticking = true; try { e.sonicToon.tick(e.SonicLevel, c) } finally { e.sonicToon.ticking = false } if (e.sonicToon.y > 128 * sonicManager.SonicLevel.LevelHeight) { e.sonicToon.y = 0 } if (e.sonicToon.x > 128 * sonicManager.SonicLevel.LevelWidth) { e.sonicToon.x = 0 } } }; this.screenOffset = { x: b.canvas.width / 2 - this.windowLocation.width * c.x / 2, y: b.canvas.height / 2 - this.windowLocation.height * c.y / 2 }; this.draw = function (g) { g.save(); this.drawTickCount++; if (this.loading) { g.fillStyle = "white"; g.fillText("Loading...   ", 95, 95); g.restore(); return } this.screenOffset = { x: g.canvas.width / 2 - this.windowLocation.width * c.x / 2, y: g.canvas.height / 2 - this.windowLocation.height * c.y / 2 }; if (this.sonicToon) { if (this.sonicToon.ticking) { while (true) { if (!this.sonicToon.ticking) { break } } } g.translate(this.screenOffset.x, this.screenOffset.y); g.fillStyle = "#000000"; g.fillRect(0, 0, this.windowLocation.width * c.x, this.windowLocation.height * c.x); g.beginPath(); g.rect(0, 0, this.windowLocation.width * c.x, this.windowLocation.height * c.x); g.clip(); this.windowLocation.x = _H.floor(this.sonicToon.x - 160); this.windowLocation.y = _H.floor(this.sonicToon.y - 180); var e = _H.floor(this.windowLocation.x / 4 * c.x / (d.width * c.x)) * d.width * c.x; g.drawImage(d, -this.windowLocation.x / 4 * c.x + e, -(_H.floor(this.windowLocation.y / 4)) * c.x, d.width * c.x, d.height * c.y); g.drawImage(d, -this.windowLocation.x / 4 * c.x + d.width * c.x + e, -(_H.floor(this.windowLocation.y / 4)) * c.x, d.width * c.x, d.height * c.y) } if (this.windowLocation.x < 0) { this.windowLocation.x = 0 } if (this.windowLocation.y < 0) { this.windowLocation.y = 0 } if (this.windowLocation.x > 128 * sonicManager.SonicLevel.LevelWidth - this.windowLocation.width) { this.windowLocation.x = 128 * sonicManager.SonicLevel.LevelWidth - this.windowLocation.width } if (this.windowLocation.y > 128 * sonicManager.SonicLevel.LevelHeight - this.windowLocation.height) { this.windowLocation.y = 128 * sonicManager.SonicLevel.LevelHeight - this.windowLocation.height } for (var q = 0; q < this.SonicLevel.ChunkMap.length; q++) { if (!this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[q]]) { continue } var w = (q % sonicManager.SonicLevel.LevelWidth); var v = _H.floor(q / sonicManager.SonicLevel.LevelWidth); var k = { x: w * 128 * c.x, y: v * 128 * c.y }; if ((k.x >= (this.windowLocation.x - 128) * c.x && k.y >= (this.windowLocation.y - 128) * c.y && k.x <= (this.windowLocation.x + 128) * c.x + this.windowLocation.width * c.x && k.y <= (this.windowLocation.y + 128) * c.y + this.windowLocation.height * c.y)) { var A = { x: k.x - this.windowLocation.x * c.x, y: k.y - this.windowLocation.y * c.x }; this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[q]].draw(g, A, c, 0); if (!this.sonicToon) { g.strokeStyle = "#DD0033"; g.lineWidth = 3; g.strokeRect(A.x, A.y, 128 * c.x, 128 * c.y) } } } for (var l in this.SonicLevel.Rings) { var o = this.SonicLevel.Rings[l]; if (this.sonicToon) { if (!this.sonicToon.obtainedRing[l]) { this.goodRing.draw(g, { x: (o.x) * 16 - this.windowLocation.x, y: (o.y) * 16 - this.windowLocation.y }, c, true) } } else { this.goodRing.draw(g, { x: (o.x) * 16 - this.windowLocation.x, y: (o.y) * 16 - this.windowLocation.y }, c, false) } } for (var t = this.activeRings.length - 1; t >= 0; t--) { var y = this.activeRings[t]; y.draw(g, { x: y.x - this.windowLocation.x, y: y.y - this.windowLocation.y }, c); if (y.tickCount > 256) { _H.remove(this.activeRings, y) } } if (this.sonicToon) { this.sonicToon.draw(g, c); if (this.windowLocation.x < 0) { this.windowLocation.x = 0 } if (this.windowLocation.y < 0) { this.windowLocation.y = 0 } if (this.windowLocation.x > 128 * sonicManager.SonicLevel.LevelWidth - this.windowLocation.width) { this.windowLocation.x = 128 * sonicManager.SonicLevel.LevelWidth - this.windowLocation.width } if (this.windowLocation.y > 128 * sonicManager.SonicLevel.LevelHeight - this.windowLocation.height) { this.windowLocation.y = 128 * sonicManager.SonicLevel.LevelHeight - this.windowLocation.height } } for (var q = 0; q < this.SonicLevel.ChunkMap.length; q++) { if (!this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[q]]) { continue } var w = (q % sonicManager.SonicLevel.LevelWidth); var v = _H.floor(q / sonicManager.SonicLevel.LevelWidth); var k = { x: w * 128 * c.x, y: v * 128 * c.y }; if ((k.x >= (this.windowLocation.x - 128) * c.x && k.y >= (this.windowLocation.y - 128) * c.y && k.x <= (this.windowLocation.x + 128) * c.x + this.windowLocation.width * c.x && k.y <= (this.windowLocation.y + 128) * c.y + this.windowLocation.height * c.y)) { var A = { x: k.x - this.windowLocation.x * c.x, y: k.y - this.windowLocation.y * c.x }; var n = this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[q]]; n.draw(g, A, c, 1); if (this.showHeightMap) { var p; if ((p = sonicManager.SpriteCache.heightMapChunks[(this.SonicLevel.curHeightMap ? 1 : 2) + " " + n.index + " " + c.y + " " + c.x])) { if (p.loaded) { g.drawImage(p, A.x, A.y) } } else { var f = this.SonicLevel.curHeightMap ? n.heightMap1 : n.heightMap2; var z = this.SonicLevel.curHeightMap ? n.angleMap1 : n.angleMap2; for (var s = 0; s < 8; s++) { for (var u = 0; u < 8; u++) { var h = f[u + s * 8]; if (h == 0) { continue } if (h == 1) { g.fillStyle = "rgba(24,98,235,0.6)"; g.fillRect(A.x + (u * 16) * c.x, A.y + (s * 16) * c.y, c.x * 16, c.y * 16); continue } var x = { x: A.x + (u * 16) * c.x, y: A.y + (s * 16) * c.y }; h.draw(g, x, c, -1); if (z[u + s * 8] != null) { var m = z[u + s * 8]; x.x += 16 * c.x / 2; x.y += 16 * c.y / 2; g.moveTo(x.x, x.y); g.lineTo(x.x + _H.sin((m)) * 10 * c.x, x.y + _H.cos((m)) * 10 * c.y); g.strokeStyle = "#D141FF"; g.lineWidth = 4; g.stroke() } } } } } if (!this.sonicToon) { g.strokeStyle = "#DD0033"; g.lineWidth = 3; g.strokeRect(A.x, A.y, 128 * c.x, 128 * c.y) } } } g.restore(); if (this.sonicToon) { this.sonicToon.drawUI(g, { x: this.screenOffset.x, y: this.screenOffset.y }, c) } }; this.importChunkFromImage = function (r) { var z = _H.getImageData(r); if (z.length != 128 * 128 * 4) { alert("Chunk size incorrect") } var h = this.SonicLevel.Tiles.length; var w = []; var o; var m; var k = []; var p = []; var l; for (var q = 0; q < 16; q++) { for (var s = 0; s < 16; s++) { var n = []; for (m = 0; m < 8; m++) { for (o = 0; o < 8; o++) { var v = ((q * 8 + m) * 128) * 4 + (s * 8 + o) * 4; n.push(_H.colorFromData(z, v)) } } l = _H.compareTiles(this.SonicLevel.Tiles, w, n); if (l == -1) { k.push(h + w.length); w.push(new Tile(n)) } else { k.push(l) } } } var u; for (u = 0; u < w.length; u++) { this.SonicLevel.Tiles.push(w[u]) } var e = []; var t = this.SonicLevel.TilePieces.length; for (m = 0; m < 8; m++) { for (o = 0; o < 8; o++) { var g = [k[((m * 2) * 16 + (o * 2))], k[((m * 2) * 16 + (o * 2 + 1))], k[((m * 2 + 1) * 16 + (o * 2))], k[((m * 2 + 1) * 16 + (o * 2 + 1))]]; l = _H.compareTilePieces(this.SonicLevel.TilePieces, e, g); if (l == -1) { p.push(t + e.length); e.push(new TilePiece(g)) } else { p.push(l) } } } for (u = 0; u < e.length; u++) { this.SonicLevel.TilePieces.push(e[u]) } var j = []; for (m = 0; m < 8; m++) { for (o = 0; o < 8; o++) { j.push(p[m * 8 + o]) } } this.SonicLevel.TileChunks.push(new TileChunk(j)) }; this.SpriteCache = { rings: [], tileChunks: [], tilePeices: [], tiles: [], sonicSprites: [], heightMaps: [], heightMapChunks: [] }; this.preLoadSprites = function (g, m, h) { var r = this.SpriteCache.rings; var q = 0; var f = []; for (var k = 0; k < 4; k++) { f[k] = "assets/Sprites/ring" + k + ".png"; this.imageLength++ } var n = this; for (var l = 0; l < f.length; l++) { var e = l * 200; r[e] = _H.loadSprite(f[l], function (j) { r[j.tag * 200 + g.x * 100 + g.y] = _H.scaleSprite(j, g, function (s) { q = q + 1; if (q == 4) { n.loadingStepOne() } }) }); r[e].tag = l } var p; var o = { tps: 0, tcs: 0, ss: 0, hms: 0, hmc: 0 }; this.loadingStepOne = function () { h("preloading tiles"); var s = function () { o.tps++; if (o.tps == n.SonicLevel.TilePieces.length * 2) { n.loadingStepFour() } }; for (var t = 0; t < this.SonicLevel.TilePieces.length; t++) { var v = _H.defaultCanvas(16 * g.x, 16 * g.y); var j = v.context; j.clearRect(0, 0, v.width, v.height); p = this.SonicLevel.TilePieces[t]; p.draw(j, { x: 0, y: 0 }, g, 0); var u = v.canvas.toDataURL("image/png"); this.SpriteCache.tilePeices[0 + " " + p.index + " " + g.y + " " + g.x] = _H.loadSprite(u, s); v = _H.defaultCanvas(16 * g.x, 16 * g.y); j = v.context; j.clearRect(0, 0, v.width, v.height); p.draw(j, { x: 0, y: 0 }, g, 1); var u = v.canvas.toDataURL("image/png"); this.SpriteCache.tilePeices[1 + " " + p.index + " " + g.y + " " + g.x] = _H.loadSprite(u, s) } }; this.loadingStepFour = function () { h("preloading height masks"); var s = function () { o.hms++; if (o.hms == n.SonicLevel.heightIndexes.length) { n.loadingStepTwo() } }; for (var t = 0; t < this.SonicLevel.heightIndexes.length; t++) { var v = _H.defaultCanvas(16 * g.x, 16 * g.y); var j = v.context; j.clearRect(0, 0, v.width, v.height); p = this.SonicLevel.heightIndexes[t]; p.index = t; p.draw(j, { x: 0, y: 0 }, g, -1); var u = v.canvas.toDataURL("image/png"); this.SpriteCache.heightMaps[p.index + " " + g.y + " " + g.x] = _H.loadSprite(u, s) } }; this.loadingStepTwo = function () { h("preloading chunks"); var w = function () { if (o.tcs == n.SonicLevel.TileChunks.length * 2 && o.hmc == n.SonicLevel.TileChunks.length * 2) { n.loadingStepThree() } }; for (var v = 0; v < this.SonicLevel.TileChunks.length; v++) { var A = _H.defaultCanvas(128 * g.x, 128 * g.y); var B = A.context; B.clearRect(0, 0, A.width, A.height); p = this.SonicLevel.TileChunks[v]; p.draw(B, { x: 0, y: 0 }, g, 0); var t = A.canvas.toDataURL("image/png"); this.SpriteCache.tileChunks[0 + " " + p.index + " " + g.y + " " + g.x] = _H.loadSprite(t, function (C) { o.tcs++; w() }); A = _H.defaultCanvas(128 * g.x, 128 * g.y); B = A.context; B.clearRect(0, 0, A.width, A.height); p.draw(B, { x: 0, y: 0 }, g, 1); var t = A.canvas.toDataURL("image/png"); this.SpriteCache.tileChunks[1 + " " + p.index + " " + g.y + " " + g.x] = _H.loadSprite(t, function (C) { o.tcs++; w() }); var u = { x: 0, y: 0 }; A = _H.defaultCanvas(128 * g.x, 128 * g.y); B = A.context; B.clearRect(0, 0, A.width, A.height); var j = p.heightMap1; for (var y = 0; y < 8; y++) { for (var z = 0; z < 8; z++) { var x = j[z + y * 8]; if (x == 0) { continue } if (x == 1) { B.fillStyle = "rgba(24,98,235,0.6)"; B.fillRect(u.x + (z * 16) * g.x, u.y + (y * 16) * g.y, g.x * 16, g.y * 16); continue } var s = { x: u.x + (z * 16) * g.x, y: u.y + (y * 16) * g.y }; x.draw(B, s, g, -1) } } var t = A.canvas.toDataURL("image/png"); this.SpriteCache.heightMapChunks[1 + " " + p.index + " " + g.y + " " + g.x] = _H.loadSprite(t, function (C) { o.hmc++; w() }); A = _H.defaultCanvas(128 * g.x, 128 * g.y); B = A.context; B.clearRect(0, 0, A.width, A.height); var j = p.heightMap2; for (var y = 0; y < 8; y++) { for (var z = 0; z < 8; z++) { var x = j[z + y * 8]; if (x == 0) { continue } if (x == 1) { B.fillStyle = "rgba(24,98,235,0.6)"; B.fillRect(u.x + (z * 16) * g.x, u.y + (y * 16) * g.y, g.x * 16, g.y * 16); continue } x.draw(B, { x: u.x + (z * 16) * g.x, y: u.y + (y * 16) * g.y }, g, -1) } } var t = A.canvas.toDataURL("image/png"); this.SpriteCache.heightMapChunks[2 + " " + p.index + " " + g.y + " " + g.x] = _H.loadSprite(t, function (C) { o.hmc++; w() }) } }; this.loadingStepThree = function () { h("preloading sonic"); this.spriteLocations = []; this.imageLength = 0; this.spriteLocations.normal = "assets/Sprites/sonic.png"; this.imageLength++; var s; for (s = 0; s < 4; s++) { this.spriteLocations["fastrunning" + s] = "assets/Sprites/fastrunning" + s + ".png"; this.imageLength++ } for (s = 0; s < 8; s++) { this.spriteLocations["running" + s] = "assets/Sprites/running" + s + ".png"; this.imageLength++ } for (s = 0; s < 4; s++) { this.spriteLocations["breaking" + s] = "assets/Sprites/breaking" + s + ".png"; this.imageLength++ } for (s = 0; s < 5; s++) { this.spriteLocations["balls" + s] = "assets/Sprites/balls" + s + ".png"; this.imageLength++ } for (s = 0; s < 2; s++) { this.spriteLocations["duck" + s] = "assets/Sprites/duck" + s + ".png"; this.imageLength++ } for (s = 0; s < 2; s++) { this.spriteLocations["hit" + s] = "assets/Sprites/hit" + s + ".png"; this.imageLength++ } for (s = 0; s < 6; s++) { this.spriteLocations["spindash" + s] = "assets/Sprites/spindash" + s + ".png"; this.imageLength++ } for (s = 0; s < 7; s++) { this.spriteLocations["spinsmoke" + s] = "assets/Sprites/spinsmoke" + s + ".png"; this.imageLength++ } for (s = 0; s < 4; s++) { this.spriteLocations["haltsmoke" + s] = "assets/Sprites/haltsmoke" + s + ".png"; this.imageLength++ } var t = this.SpriteCache.sonicSprites; for (var u in this.spriteLocations) { t[u] = _H.loadSprite(this.spriteLocations[u], function (j) { t[j.tag + g.x + g.y] = _H.scaleSprite(j, g, function (v) { o.ss++; if (o.ss == n.imageLength) { if (m) { m() } } }) }); t[u].tag = u } } } } ClickState = { PlaceChunk: 0, PlaceRing: 1 }; function Tile(a) { this.colors = a; this.sprites = []; Tile.prototype.changeColor = function (b, d, c) { this.colors[d * 8 + b] = c; this.sprites = [] }; Tile.prototype.draw = function (c, j, h, f, g, e) { for (var d = 0; d < this.colors.length; d++) { var b = sonicManager.SonicLevel.pallet[this.colors[d]]; if (b == "000000") { continue } c.fillStyle = "#" + b; switch (f) { case 0: c.fillRect(j.x + ((d % 8)) * h.x, j.y + (_H.floor(d / 8)) * h.y, h.x, h.x); break; case 1: c.fillRect(j.x + (7 - (d % 8)) * h.x, j.y + (_H.floor(d / 8)) * h.y, h.x, h.x); break; case 2: c.fillRect(j.x + ((d % 8)) * h.x, j.y + (7 - _H.floor(d / 8)) * h.y, h.x, h.x); break; case 3: c.fillRect(j.x + (7 - (d % 8)) * h.x, j.y + (7 - _H.floor(d / 8)) * h.y, h.x, h.x); break } } if (g) { c.strokeStyle = "#DD0033"; c.lineWidth = 3; c.strokeRect(j.x, j.y, 8 * h.x, 8 * h.y) } }; Tile.prototype.equals = function (e) { for (var d = 0; d < this.colors.length; d++) { var b = e[d]; var f = this.colors[d]; if (b != f) { return false } } return true } } function TileChunk(a) { this.tilesPieces = a; this.hLayer = []; this.sprites = []; TileChunk.prototype.getTilePiece = function (b, d, c) { return sonicManager.SonicLevel.TilePieces[this.tilesPieces[_H.floor((b / c.x / 16)) + _H.floor((d / c.y / 16)) * 8]] }; TileChunk.prototype.draw = function (c, b, g, f) { var e; if ((e = sonicManager.SpriteCache.tileChunks[f + " " + this.index + " " + g.y + " " + g.x])) { if (e.loaded) { c.drawImage(e, b.x, b.y) } } else { for (var d = 0; d < this.tilesPieces.length; d++) { if (this.hLayer[d] == f) { sonicManager.SonicLevel.TilePieces[this.tilesPieces[d]].draw(c, { x: b.x + (d % 8) * 16 * g.x, y: b.y + _H.floor(d / 8) * 16 * g.y }, g, f) } } } return true } } function TilePiece(a, b) { this.tiles = b; TilePiece.prototype.click = function (c, e, d) { }; TilePiece.prototype.mouseOver = function (c, d) { }; TilePiece.prototype.draw = function (e, c, h, g) { var f; if ((f = sonicManager.SpriteCache.tilePeices[g + " " + this.index + " " + h.y + " " + h.x])) { if (f.loaded) { e.drawImage(f, c.x, c.y) } } else { for (i = 0; i < this.tiles.length; i++) { var d = this.tiles[i]; sonicManager.SonicLevel.TileData[d.TileIndex].draw(e, { x: c.x + (i % 2) * 8 * h.x, y: c.y + _H.floor(i / 2) * 8 * h.y }, h, d.State, false, g) } } return true }; TilePiece.prototype.equals = function (d) { for (var c = 0; c < this.tiles.length; c++) { if (d[c] != this.tiles[c]) { return false } } return true } } RotationMode = { Floor: 134, RightWall: 224, Ceiling: 314, LeftWall: 44 }; function UiArea(a, g, b, e, c, d) { this.x = a; this.y = g; this.manager = c; this.closable = d; this.width = b; this.height = e; this.depth = 0; this.visible = true; this.dragging = false; this.controls = []; this.addControl = function (h) { h.parent = this; this.controls.push(h); return h }; var f = this; if (d) { this.addControl(new Button(this.width - 30, 4, 26, 26, "X", this.manager.buttonFont, "Green", function () { f.visible = false })) } this.click = function (k) { if (!this.visible) { return } for (var h = 0; h < this.controls.length; h++) { var j = this.controls[h]; if (j.visible && j.y <= k.y && j.y + j.height > k.y && j.x <= k.x && j.x + j.width > k.x) { k.x -= j.x; k.y -= j.y; j.onClick(k); return false } } this.dragging = { x: k.x, y: k.y} }; this.mouseMove = function (k) { if (!this.visible) { return } if (!this.dragging) { for (var h = 0; h < this.controls.length; h++) { var j = this.controls[h]; if (j.visible && j.y <= k.y && j.y + j.height > k.y && j.x <= k.x && j.x + j.width > k.x) { k.x -= j.x; k.y -= j.y; j.onMouseOver(k) } } return } this.x += k.x - this.dragging.x; this.y += k.y - this.dragging.y }; this.mouseUp = function (k) { if (!this.visible) { return } for (var h = 0; h < this.controls.length; h++) { var j = this.controls[h]; j.onMouseUp({ x: k.x - j.x, y: k.y - j.y }) } this.dragging = false }; this.scroll = function (k) { if (!this.visible) { return } for (var h = 0; h < this.controls.length; h++) { var j = this.controls[h]; if (j.visible && j.y <= k.y && j.y + j.height > k.y && j.x <= k.x && j.x + j.width > k.x) { if (j.onScroll) { k.x -= j.x; k.y -= j.y; j.onScroll(k); return false } } } }; this.cachedDrawing = null; this.draw = function (q) { if (!this.visible) { return } var p; var n; var m; if (!this.cachedDrawing) { var o = document.createElement("canvas"); o.width = this.width + 20; o.height = this.height + 20; var k = o.getContext("2d"); k.fillStyle = "rgba(133,133,133,0.6)"; k.lineWidth = 9; k.strokeStyle = "#333"; var l = this.x; var h = this.y; this.x = 10; this.y = 10; roundRect(k, this.x, this.y, this.width, this.height, 5, true, true); for (m = 0; m < this.controls.length; m++) { n = this.controls[m]; p = n.forceDrawing(); if (p.redraw) { n.draw(k) } } this.x = l; this.y = h; this.cachedDrawing = _H.loadSprite(o.toDataURL("image/png")) } if (this.cachedDrawing.loaded) { q.drawImage(this.cachedDrawing, _H.floor(this.x), _H.floor(this.y)); for (m = 0; m < this.controls.length; m++) { n = this.controls[m]; p = n.forceDrawing(); if (!p.redraw) { n.draw(q) } if (p.clearCache) { this.cachedDrawing = null } } } else { q.fillStyle = "rgba(133,133,133,0.6)"; q.lineWidth = 9; q.strokeStyle = "#333"; roundRect(q, this.x + 10, this.y + 10, this.width, this.height, 5, true, true); for (m = 0; m < this.controls.length; m++) { n = this.controls[m]; n.draw(q) } } }; return this } function TextArea(a, e, d, c, b) { this.forceDrawing = function () { if ((_H.isFunction(this.text) ? this.text() : this.text) == this.oldText) { return { redraw: true, clearCache: false} } this.oldText = _H.isFunction(this.text) ? this.text() : this.text; return { redraw: true, clearCache: true} }; this.x = a; this.oldText = ""; this.y = e; this.visible = true; this.text = d; this.font = c; this.color = b; this.parent = null; this.onClick = function (f) { return false }; this.onMouseUp = function (f) { if (this.mouseUp) { this.mouseUp() } }; this.onMouseOver = function (f) { if (this.mouseOver) { this.mouseOver() } }; this.draw = function (l) { if (!this.visible) { return } var k = _H.isFunction(this.text) ? this.text() : this.text; if (l.font != this.font) { l.font = this.font } var f = l.measureText(k).width; var g = parseInt(l.font.split("pt")[0]); var j = 3; l.strokeStyle = this.color; l.shadowColor = "#FFF"; l.shadowBlur = 20; l.lineWidth = 1.5; l.strokeText(k, this.parent.x + this.x, this.parent.y + this.y); l.strokeText(k, this.parent.x + this.x, this.parent.y + this.y); l.strokeText(k, this.parent.x + this.x, this.parent.y + this.y); l.strokeText(k, this.parent.x + this.x, this.parent.y + this.y); l.strokeText(k, this.parent.x + this.x, this.parent.y + this.y); l.shadowBlur = 0 }; return this } function Button(g, f, a, j, h, c, d, k, e, b) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = g; this.y = f; this.visible = true; this.width = a; this.height = j; this.text = h; this.font = c; this.clicking = false; this.click = k; this.mouseUp = e; this.mouseOver = b; this.color = d; this.parent = null; this.onClick = function (l) { if (!this.visible) { return } this.clicking = true }; this.onMouseUp = function (l) { if (!this.visible) { return } if (this.clicking) { if (this.click) { this.click() } } this.clicking = false; if (this.mouseUp) { this.mouseUp() } }; this.onMouseOver = function (l) { if (!this.visible) { return } if (this.mouseOver) { this.mouseOver() } }; this.draw = function (l) { if (!this.visible) { return } l.fillStyle = this.color; l.strokeStyle = "#DAC333"; roundRect(l, this.parent.x + this.x, this.parent.y + this.y, this.width, this.height, 5, true, true); l.fillStyle = this.clicking ? "#FCA" : "#334"; if (l.font != this.font) { l.font = this.font } l.fillText(this.text, this.parent.x + this.x + ((this.width / 2) - (l.measureText(this.text).width / 2)), this.parent.y + this.y + (this.height / 3) * 2) }; return this } function TilePieceArea(a, e, c, d, b) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = a; this.y = e; this.visible = true; this.scale = c; this.width = c.x * 16; this.height = c.y * 17; this.clicking = false; this.tilePiece = d; this.parent = null; this.state = b; this.onClick = function (f) { if (!this.visible) { return } this.clicking = true; this.clickHandled = false }; this.onMouseUp = function (f) { if (!this.visible) { return } if (this.tilePiece && this.clicking && !this.clickHandled) { this.tilePiece.click(_H.floor(f.x / c.x), _H.floor(f.y / c.y), this.state) } this.clickHandled = false; this.clicking = false }; this.clickHandled = false; this.onMouseOver = function (f) { if (!this.tilePiece) { return } if (this.clicking) { this.clickHandled = true; this.tilePiece.click(_H.floor(f.x / c.x), _H.floor(f.y / c.y), this.state) } else { this.tilePiece.mouseOver(_H.floor(f.x / c.x), _H.floor(f.y / c.y)) } }; this.draw = function (f) { if (!this.visible) { return } if (!this.tilePiece) { return } this.tilePiece.tag = true; this.tilePiece.draw(f, { x: this.parent.x + this.x, y: this.parent.y + this.y }, this.scale, this.state, true); this.tilePiece.tag = false }; return this } function TileChunkArea(a, e, d, c, b) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = a; this.y = e; this.visible = true; this.scale = d; this.width = d.x * 128; this.height = d.y * 128; this.clicking = false; this.tileChunk = c; this.parent = null; this.state = b; this.setToTile = null; this.onClick = function (f) { if (!this.visible) { return } this.clicking = true }; this.onMouseUp = function (f) { if (!this.visible) { return } if (this.clicking) { if (this.setToTile != null) { this.tileChunk.tilesPieces[((_H.floor(f.x / this.scale.x / 16))) + (_H.floor(f.y / this.scale.y / 16)) * 8] = sonicManager.SonicLevel.TilePieces.indexOf(this.setToTile); this.tileChunk.sprites = [] } } this.clickHandled = false; this.clicking = false }; this.clickHandled = false; this.onMouseOver = function (f) { if (this.clicking) { } }; this.draw = function (f) { if (!this.visible) { return } if (!this.tileChunk) { return } this.tileChunk.draw(f, { x: this.parent.x + this.x, y: this.parent.y + this.y }, this.scale, true) }; return this } function ScrollBox(b, h, g, a, f, d, c) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = b; this.y = h; this.itemWidth = f; this.visible = true; var e = 14; this.width = f + e; this.visibleItems = a; this.itemHeight = g; this.backColor = d; this.height = a * g; this.parent = null; this.scrollOffset = 0; this.scrollPosition = 0; this.dragging = false; if (c) { this.controls = c } else { this.controls = [] } this.scrolling = false; this.addControl = function (j) { j.parent = this; this.controls.push(j); return j }; this.onClick = function (l) { if (!this.visible) { return } for (var j = this.scrollOffset; j < this.controls.length; j++) { var k = this.controls[j]; if (k.y <= l.y && k.y + k.height > l.y && k.x <= l.x && k.x + k.width > l.x) { l.x -= k.x; l.y -= k.y; k.onClick(l); return false } } if (l.x > this.itemWidth && l.x < this.itemWidth + e) { if (this.scrollPosition > l.y) { if (this.scrollOffset > 0) { this.scrollOffset-- } } else { if (this.scrollOffset < this.controls.length - this.visibleItems) { this.scrollOffset++ } } } this.dragging = true; return false }; this.onMouseUp = function (l) { if (!this.visible) { return } this.dragging = false; for (var j = this.scrollOffset; j < this.controls.length; j++) { var k = this.controls[j]; if (k.y <= l.y && k.y + k.height > l.y && k.x <= l.x && k.x + k.width > l.x) { l.x -= k.x; l.y -= k.y; k.onMouseUp(l); return false } } if (this.mouseUp) { this.mouseUp() } }; this.onMouseOver = function (l) { if (!this.visible) { return } for (var j = 0; j < this.controls.length; j++) { var k = this.controls[j]; if (k.y <= l.y && k.y + k.height > l.y && k.x <= l.x && k.x + k.width > l.x) { l.x -= k.x; l.y -= k.y; k.onMouseOver(l); break } } if (this.dragging && l.x > this.itemWidth && l.x < this.itemWidth + e) { if (this.scrollPosition > l.y) { if (this.scrollOffset > 0) { this.scrollOffset-- } } else { if (this.scrollOffset < this.controls.length - this.visibleItems) { this.scrollOffset++ } } } if (this.mouseOver) { this.mouseOver() } }; this.onScroll = function (l) { if (!this.visible) { return } if (l.delta > 0) { if (this.scrollOffset > 0) { this.scrollOffset-- } } else { if (this.scrollOffset < this.controls.length - this.visibleItems) { this.scrollOffset++ } } for (var j = 0; j < this.controls.length; j++) { var k = this.controls[j]; if (k.y <= l.y && k.y + k.height > l.y && k.x <= l.x && k.x + k.width > l.x) { l.x -= k.x; l.y -= k.y; if (k.onScroll) { k.onScroll(l) } return false } } if (this.scroll) { this.scroll() } }; this.draw = function (l) { if (!this.visible) { return } l.fillStyle = this.backColor; var k; l.fillStyle = this.backColor; l.lineWidth = 1; l.strokeStyle = "#333"; roundRect(l, this.parent.x + this.x, this.parent.y + this.y, this.itemWidth + e + 6, this.visibleItems * this.itemHeight, 3, true, true); l.fillStyle = "grey"; l.lineWidth = 1; l.strokeStyle = "#444"; l.fillRect(this.parent.x + this.x + this.itemWidth + 2 + 2, this.parent.y + this.y + 2, e, this.visibleItems * this.itemHeight - 2); l.fillStyle = "red"; l.lineWidth = 1; l.strokeStyle = "#444"; this.scrollPosition = (this.visibleItems * this.itemHeight - 2) * this.scrollOffset / this.controls.length; l.fillRect(this.parent.x + this.x + this.itemWidth + 2 + 2 + 2, this.parent.y + this.y + 2 + (this.scrollPosition), e - 2, 5); var j = 1; for (k = this.scrollOffset; k < Math.min(this.controls.length, this.scrollOffset + this.visibleItems); k++) { this.controls[k].parent = { x: this.parent.x + this.x, y: this.parent.y + this.y }; this.controls[k].x = 2; this.controls[k].y = j; this.controls[k].height = this.itemHeight; this.controls[k].width = this.itemWidth; j += this.itemHeight; this.controls[k].draw(l) } }; return this } function roundRect(d, c, h, e, b, a, g, f) { if (typeof f == "undefined") { f = true } if (typeof a === "undefined") { a = 5 } d.beginPath(); d.moveTo(c + a, h); d.lineTo(c + e - a, h); d.quadraticCurveTo(c + e, h, c + e, h + a); d.lineTo(c + e, h + b - a); d.quadraticCurveTo(c + e, h + b, c + e - a, h + b); d.lineTo(c + a, h + b); d.quadraticCurveTo(c, h + b, c, h + b - a); d.lineTo(c, h + a); d.quadraticCurveTo(c, h, c + a, h); d.closePath(); if (f) { d.stroke() } if (g) { d.fill() } } function UIManager(b, o, t) { this.UIAreas = []; this.messages = []; var l = this.textFont = "18pt sans-serrif "; var e = this.buttonFont = "13pt Arial bold"; o.font = l; var h = this.indexes = { tpIndex: 0, modifyIndex: 0, modifyTPIndex: 0 }; this.draw = function (x) { x.save(); var v = JSLINQ(this.UIAreas).OrderBy(function (A) { return A.depth }); for (var z = 0; z < v.items.length; z++) { var w = v.items[z]; w.draw(x) } if (DEBUGs) { for (var y = 0; y < this.messages.length; y++) { x.fillText(this.messages[y], 10, 25 + y * 30) } } x.restore() }; this.onMouseScroll = function (v) { var y = v.wheelDelta ? v.wheelDelta / 40 : v.detail ? -v.detail : 0; for (var x = 0; x < this.UIAreas.length; x++) { var w = this.UIAreas[x]; if (w.visible && w.y <= v.y && w.y + w.height > v.y && w.x <= v.x && w.x + w.width > v.x) { v = { x: v.x - w.x, y: v.y - w.y, delta: y }; return w.scroll(v) } } return false }; this.onClick = function (z) { var v = _H.getCursorPosition(z); var A = null; var w; var y; for (y = 0; y < this.UIAreas.length; y++) { w = this.UIAreas[y]; if (w.visible && w.y <= v.y && w.y + w.height > v.y && w.x <= v.x && w.x + w.width > v.x) { A = w; var x = { x: v.x - w.x, y: v.y - w.y }; w.click(x) } } if (A) { for (y = 0; y < this.UIAreas.length; y++) { w = this.UIAreas[y]; if (A == w) { w.depth = 1 } else { w.depth = 0 } } return true } return false }; this.onMouseMove = function (z) { var v = _H.getCursorPosition(z); var w = JSLINQ(this.UIAreas).OrderBy(function (A) { return -A.depth }); for (var y = 0; y < w.items.length; y++) { var x = w.items[y]; if (x.dragging || (x.visible && x.y <= v.y && x.y + x.height > v.y && x.x <= v.x && x.x + x.width > v.x)) { v = { x: v.x - x.x, y: v.y - x.y }; return x.mouseMove(v) } } return false }; this.onMouseUp = function (z) { var v = _H.getCursorPosition(z, true); for (var y = 0; y < this.UIAreas.length; y++) { var w = this.UIAreas[y]; var x = { x: v.x - w.x, y: v.y - w.y }; w.mouseUp(x) } }; var m = this.debuggerArea = new UiArea(1347, 95, 200, 240, this, true); m.visible = false; this.UIAreas.push(m); m.addControl(new TextArea(30, 25, "Debugger", l, "blue")); m.addControl(new Button(40, 60, 60, 22, "Stop", e, "rgb(50,150,50)", function () { b.windowLocation = _H.defaultWindowLocation(1); m.visible = false; k.visible = false; n.visible = true; r.visible = true; b.sonicToon = null })); m.addControl(new Button(40, 95, 90, 22, "Hit Sonic", e, "rgb(50,150,50)", function () { b.sonicToon.hit() })); m.addControl(new Button(40, 130, 160, 22, "Show Height Map", e, "rgb(50,150,50)", function () { if (this.text == "Show Height Map") { b.showHeightMap = true; this.text = "Hide Height Map" } else { b.showHeightMap = false; this.text = "Show Height Map" } })); m.addControl(new Button(40, 160, 160, 22, "Switch Height Map", e, "rgb(50,150,50)", function () { b.SonicLevel.curHeightMap = !b.SonicLevel.curHeightMap })); m.addControl(new Button(40, 190, 160, 22, "Debug Sonic", e, "rgb(50,150,50)", function () { if (this.text == "Debug Sonic") { b.sonicToon.debugging = true; this.text = "Normal Sonic" } else { b.sonicToon.debugging = false; this.text = "Debug Sonic" } })); var k = this.solidTileArea = new UiArea(40, 450, 430, 400, this, true); k.visible = false; this.UIAreas.push(k); k.addControl(new TextArea(30, 25, "Modify Solid Tile", l, "blue")); k.addControl(new Button(50, 35, 25, 22, "<<", e, "rgb(50,150,50)", function () { if (h.tpIndex > 0) { c.tilePiece = b.SonicLevel.TilePieces[--h.tpIndex] } })); k.addControl(new Button(75, 35, 25, 22, ">>", e, "rgb(50,150,50)", function () { if (h.tpIndex < b.SonicLevel.TilePieces.length) { c.tilePiece = b.SonicLevel.TilePieces[++h.tpIndex] } })); k.addControl(new Button(360, 80, 45, 22, "Full", e, "rgb(50,150,50)", function () { for (var v = 0; v < 16; v++) { c.tilePiece.heightMask.items[v] = 16 } this.sprites = [] })); k.addControl(new Button(200, 35, 180, 22, "Modify Height Map", e, "rgb(50,150,50)", function () { c.state = (c.state + 1) % 3; switch (c.state) { case 0: this.text = "Modify Height Map"; break; case 1: this.text = "Modify Tile Direction"; break; case 2: this.text = "Modify Tile Colors"; break } })); var c = this.modifyTilePieceArea = new TilePieceArea(30, 70, { x: 4 * 5, y: 4 * 5 }, null, 0); k.addControl(c); var n = this.levelInformation = new UiArea(500, 440, 420, 360, this); n.visible = true; this.UIAreas.push(n); n.addControl(new TextArea(30, 25, "Level Selector", l, "blue")); n.addControl(new TextArea(30, 52, function () { return !f ? "Level Not Saved" : ("Current Level: " + f) }, l, "black")); n.addControl(new Button(190, 70, 100, 22, "Save Level", e, "rgb(50,150,50)", function () { if (f) { OurSonic.SonicLevels.SaveLevelInformation(f, Base64.encode(_H.stringify(b.SonicLevel)), function (v) { }, function (v) { alert("Failure: " + _H.stringify(v)) }) } else { OurSonic.SonicLevels.saveLevel(Base64.encode(_H.stringify(b.SonicLevel)), function (v) { q(f) }) } })); n.addControl(new Button(190, 105, 160, 22, "Load Empty Level", e, "rgb(50,150,50)", function () { r.visible = true; j.visible = true; var v = 0; var w = function () { var x = 188; if (v == x) { setTimeout(function () { alert(_H.stringify(b.SonicLevel)); a(_H.stringify(b.SonicLevel), o); j.visible = false }, 500); return } setTimeout(w, 100); _H.loadSprite("assets/TileChunks/Tile" + v++ + ".png", function (y) { j.text = "Loading " + v + "/" + x; b.importChunkFromImage(y); if (v == x) { b.inds = { done: true} } }) }; setTimeout(w, 100) })); var g; n.addControl(g = new ScrollBox(30, 70, 25, 11, 130, "rgb(50,60,127)")); var f; OurSonic.SonicLevels.getLevels(function (x) { for (var w = 0; w < x.length; w++) { var v = x[w]; q(v) } }); function q(v) { var w; g.addControl(w = new Button(0, 0, 0, 0, v, "10pt Arial", "rgb(50,190,90)", function () { f = "Downloading"; OurSonic.SonicLevels.getLevel(v, function (x) { f = "loading"; f = v; a(x, o) }) })) } var r = this.levelManagerArea = new UiArea(500, 25, 400, 400, this); r.visible = false; this.UIAreas.push(r); r.addControl(new TextArea(30, 25, "Level Manager", l, "blue")); var j; r.addControl(j = new TextArea(270, 25, "Loading", l, "green")); j.visible = false; r.addControl(new Button(35, 100, 160, 22, "Show Height Map", e, "rgb(50,150,50)", function () { if (this.text == "Show Height Map") { b.showHeightMap = true; this.text = "Hide Height Map" } else { b.showHeightMap = false; this.text = "Show Height Map" } })); r.addControl(new Button(200, 150, 160, 22, "Place Chunks", e, "rgb(50,150,50)", function () { b.clickState = (b.clickState + 1) % 2; switch (b.clickState) { case ClickState.PlaceChunk: this.text = "Place Chunks"; break; case ClickState.PlaceRing: this.text = "Place Rings"; break } })); r.addControl(new Button(200, 180, 160, 22, "Switch Height Map", e, "rgb(50,150,50)", function () { b.SonicLevel.curHeightMap = !b.SonicLevel.curHeightMap })); r.addControl(new Button(35, 150, 160, 22, "Modify Chunks", e, "rgb(50,150,50)", function () { s.visible = true })); r.addControl(new Button(35, 150, 160, 22, "Modify Chunks", e, "rgb(50,150,50)", function () { s.visible = true })); r.addControl(new Button(35, 175, 160, 22, "Modify Tile Pieces", e, "rgb(50,150,50)", function () { k.visible = true })); r.addControl(new Button(35, 200, 160, 22, "Modify Tiles", e, "rgb(50,150,50)", function () { u.visible = true })); r.addControl(new Button(200, 35, 60, 22, "Run", e, "rgb(50,150,50)", function () { r.visible = false; k.visible = false; n.visible = false; u.visible = false; s.visible = false; k.visible = false; m.visible = true; b.windowLocation = _H.defaultWindowLocation(0); b.sonicToon = new Sonic(b.SonicLevel, b.scale) })); var s = this.modifyTileChunkArea = new UiArea(900, 450, 400, 400, this, true); s.visible = false; this.UIAreas.push(s); s.addControl(new TextArea(30, 25, "Modify Tile Chunk", l, "blue")); var d = this.modifyTC = new TileChunkArea(30, 70, { x: 2, y: 2 }, null, 1); s.addControl(d); s.addControl(new Button(50, 35, 25, 22, "<<", e, "rgb(50,150,50)", function () { if (h.modifyIndex > 0) { d.tileChunk = b.SonicLevel.TileChunks[--h.modifyIndex] } })); s.addControl(new Button(80, 35, 25, 22, ">>", e, "rgb(50,150,50)", function () { if (h.modifyIndex < b.SonicLevel.TileChunks.length) { d.tileChunk = b.SonicLevel.TileChunks[++h.modifyIndex] } })); var p = this.modifyTP = new TilePieceArea(300, 160, { x: 2 * 3, y: 2 * 3 }, null, 3); s.addControl(p); s.addControl(new Button(300, 100, 25, 22, "<<", e, "rgb(50,150,50)", function () { if (h.modifyTPIndex > 0) { p.tilePiece = d.setToTile = b.SonicLevel.TilePieces[--h.modifyTPIndex] } })); s.addControl(new Button(330, 100, 25, 22, ">>", e, "rgb(50,150,50)", function () { if (h.modifyTPIndex < b.SonicLevel.TilePieces.length) { p.tilePiece = d.setToTile = b.SonicLevel.TilePieces[++h.modifyTPIndex] } })); var u = this.modifyTileArea = new UiArea(900, 25, 400, 400, this, true); u.visible = false; this.UIAreas.push(u); u.addControl(new TextArea(30, 25, "Modify Tile", l, "blue")); function a(G, F) { r.visible = true; b.loading = true; b.SonicLevel = jQuery.parseJSON(G); var x; var C; if (!b.SonicLevel.TileChunks) { b.SonicLevel.TileChunks = [] } if (!b.SonicLevel.TilePieces) { b.SonicLevel.TilePieces = [] } if (!b.SonicLevel.TileData) { b.SonicLevel.TileData = [] } if (!b.SonicLevel.Rings) { b.SonicLevel.Rings = {} } b.SonicLevel.curHeightMap = true; var w; var H; for (var D = 0; D < b.SonicLevel.heightIndexes.length; D++) { var y = []; if (b.SonicLevel.heightIndexes[D] == "0000000000000000") { b.SonicLevel.heightIndexes[D] = 0; continue } if (b.SonicLevel.heightIndexes[D] == "gggggggggggggggg") { b.SonicLevel.heightIndexes[D] = 1; continue } for (var B = 1; B < 17; B++) { y[B - 1] = _H.parseNumber(b.SonicLevel.heightIndexes[D][B]) } var v = parseInt(b.SonicLevel.heightIndexes[D][0]); switch (v) { case 0: v = RotationMode.Floor; break; case 1: v = RotationMode.RightWall; break; case 2: v = RotationMode.Ceiling; break; case 3: v = RotationMode.LeftWall; break; default: } b.SonicLevel.heightIndexes[D] = new HeightMask(v, 0, y) } for (C = 0; C < b.SonicLevel.TileChunks.length; C++) { x = b.SonicLevel.TileChunks[C]; x.__proto__ = TileChunk.prototype; x.index = C; for (var z = 0; z < x.angleMap1.length; z++) { if (x.angleMap1 != null) { x.angleMap1[z] = parseInt(x.angleMap1[z], 16) } } for (z = 0; z < x.angleMap2.length; z++) { if (x.angleMap2 != null) { x.angleMap2[z] = parseInt(x.angleMap2[z], 16) } } for (H = 0; H < x.heightMap1.length; H++) { w = x.heightMap1[H]; x.heightMap1[H] = b.SonicLevel.heightIndexes[w] } for (H = 0; H < x.heightMap2.length; H++) { w = x.heightMap2[H]; x.heightMap2[H] = b.SonicLevel.heightIndexes[w] } } for (C = 0; C < b.SonicLevel.TilePieces.length; C++) { x = b.SonicLevel.TilePieces[C]; x.__proto__ = TilePiece.prototype; x.index = C } for (C = 0; C < b.SonicLevel.TileData.length; C++) { x = b.SonicLevel.TileData[C]; x.__proto__ = Tile.prototype; x.index = C } var A = function () { E.done = true; b.loading = false; d.tileChunk = b.SonicLevel.TileChunks[0]; c.tilePiece = p.tilePiece = b.SonicLevel.TilePieces[0] }; var E = b.inds = { r: 0, t: 0, tp: 0, tc: 0, total: (b.SonicLevel.TileChunks.length * 2 + b.SonicLevel.TilePieces.length * 5 + b.SonicLevel.TileData.length), done: false }; f = "preloading sprites"; b.preLoadSprites(t, function () { E.r = 1; A(); f = "level loaded" }, function (I) { f = I }) } };