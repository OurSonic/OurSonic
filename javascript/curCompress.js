var Endian = { BIG: 0, LITTLE: 1 }; var ZipConstants = { LOCSIG: 67324752, LOCHDR: 30, LOCVER: 4, LOCNAM: 26, EXTSIG: 134695760, EXTHDR: 16, CENSIG: 33639248, CENHDR: 46, CENVER: 6, CENNAM: 28, CENOFF: 42, ENDSIG: 101010256, ENDHDR: 22, ENDTOT: 10, ENDOFF: 16, STORED: 0, DEFLATED: 8 }; var Base64 = function (t) { var v = undefined; if (navigator.userAgent.toLowerCase().indexOf(" chrome/") >= 0 || navigator.userAgent.toLowerCase().indexOf(" firefox/") >= 0 || navigator.userAgent.toLowerCase().indexOf(" gecko/") >= 0) { v = function () { this.str = ""; this.length = 0; this.append = function (a) { this.str += a; this.length += a.length }; this.prepend = function (a) { this.str = a + this.str; this.length += a.length }; this.toString = function () { return this.str } } } else { v = function () { this.parts = []; this.length = 0; this.append = function (a) { this.parts.push(a); this.length += a.length }; this.prepend = function (a) { this.parts.unshift(a); this.length += a.length }; this.toString = function () { return this.parts.join("") } } } var k = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="; var e = new v(), u, s, r, q, p, n, m, l = 0; while (l < t.length) { u = t.charCodeAt(l++); s = t.charCodeAt(l++); r = t.charCodeAt(l++); q = u >> 2; p = ((u & 3) << 4) | (s >> 4); n = ((s & 15) << 2) | (r >> 6); m = r & 63; if (isNaN(s)) { n = m = 64 } else { if (isNaN(r)) { m = 64 } } e.append(k.charAt(q) + k.charAt(p) + k.charAt(n) + k.charAt(m)) } return e.toString() }; var BA = function (h, f) { var e = "", b = 0, a = 0, c = 0; if (h) { e = h || ""; c = f !== undefined ? f : c; b = h.length } var d = typeof h != "string" && h !== undefined; var g = function (k) { throw k }; return { position: function (k) { if (k) { a = k } else { return a } }, move: function (k) { a += k }, bytesAvailable: function () { return b - a }, length: function () { return b }, endian: function (k) { if (k) { c = k } else { return c } }, data: function (k) { if (k) { e = k || ""; b = e.length; d = typeof k != "string" && k !== undefined } else { return e } }, readByte: function () { if (this.bytesAvailable() === 0) { g("readByte::End of stream!") } return d ? e[a++] & 255 : (e.charCodeAt(a++) & 255) }, readByteAt: function (k) { if (k < b) { return d ? e[k] & 255 : e.charCodeAt(k) & 255 } return g("readByteAt::End of stream") }, writeByte: function (k) { if (d) { if (a < b) { e[a] = k & 255 } else { e[e.length++] = k } a++; return } if (a < b) { e = e.substr(0, a) + String.fromCharCode(k & 255) + e.substring(a + 1) } else { e += String.fromCharCode(k & 255); b += 1 } a++ }, readBytes: function (r, o) { if (o === undefined) { var q = a; a += r; if (d) { var n = ""; for (var m = q; m < q + r; m++) { n += String.fromCharCode(e[m]) } return n } else { return e.substr(q, r) } } if (d) { var k = ""; for (var l = r; l < r + o; l++) { k += String.fromCharCode(e[l]) } return k } return e.substr(r, o) }, readUnsignedInt: function () { if (this.bytesAvailable() < 4) { throw "End of stream!" } var l = 0, k = 0; if (c == Endian.BIG) { l = (a += 4) - 4; if (d) { k = ((e[l] & 255) << 24) | ((e[++l] & 255) << 16) | ((e[++l] & 255) << 8) | (e[++l] & 255) } else { k = ((e.charCodeAt(l) & 255) << 24) | ((e.charCodeAt(++l) & 255) << 16) | ((e.charCodeAt(++l) & 255) << 8) | (e.charCodeAt(++l) & 255) } } else { l = (a += 4); if (d) { k = ((e[--l] & 255) << 24) | ((e[--l] & 255) << 16) | ((e[--l] & 255) << 8) | (e[--l] & 255) } else { k = ((e.charCodeAt(--l) & 255) << 24) | ((e.charCodeAt(--l) & 255) << 16) | ((e.charCodeAt(--l) & 255) << 8) | (e.charCodeAt(--l) & 255) } } return k }, readUnsignedShort: function () { if (this.bytesAvailable() < 2) { throw "End of stream!" } var k = 0; if (c == Endian.BIG) { k = (a += 2) - 2; if (d) { return ((e[k] & 255) << 8) | (e[++k] & 255) } else { return ((e.charCodeAt(k) & 255) << 8) | (e.charCodeAt(++k) & 255) } } else { k = (a += 2); if (d) { return ((e[--k] & 255) << 8) | (e[--k] & 255) } else { return ((e.charCodeAt(--k) & 255) << 8) | (e.charCodeAt(--k) & 255) } } }, readShort: function () { if (this.bytesAvailable() < 2) { throw "End of stream!" } var l = 0, k = 0; if (c == Endian.BIG) { l = (a += 2) - 2; if (d) { k = ((e[l] & 255) << 8) | (e[++l] & 255) } else { k = ((e.charCodeAt(l) & 255) << 8) | (e.charCodeAt(++l) & 255) } } else { l = (a += 2); if (d) { k = ((e[--l] & 255) << 8) | (e[--l] & 255) } else { k = ((e.charCodeAt(--l) & 255) << 8) | (e.charCodeAt(--l) & 255) } } return (k >= 32768) ? k - 65536 : k }, readUTFBytes: function (m) { m = m || 0; var k = ""; for (var l = 0; l < m; l++) { k += String.fromCharCode(this.readByte()) } return k } } }; var Inflater = function () { var r = 15, g = 286, d = 30, e = 316, m = 288, b = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258], q = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0], n = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577], h = [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13], a = undefined, x = 0, w = 0, t = 0, u = undefined, c = undefined; function s(y) { var z = w; while (t < y) { if (x == a.length()) { throw "available inflate data did not terminate" } z |= a.readByteAt(x++) << t; t += 8 } w = z >> y; t -= y; return z & ((1 << y) - 1) } function p(z, A, E) { var C = new Array(); for (var y = 0; y <= r; y++) { z.count[y] = 0 } for (var B = 0; B < E; B++) { z.count[A[B]]++ } if (z.count[0] == E) { return 0 } var D = 1; for (y = 1; y <= r; y++) { D <<= 1; D -= z.count[y]; if (D < 0) { return D } } C[1] = 0; for (y = 1; y < r; y++) { C[y + 1] = C[y] + z.count[y] } for (B = 0; B < E; B++) { if (A[B] !== 0) { z.symbol[C[A[B]]++] = B } } return D } function l(A) { var C = 0, D = 0, z = 0; for (var y = 1; y <= r; y++) { C |= s(1); var B = A.count[y]; if (C < D + B) { return A.symbol[z + (C - D)] } z += B; D += B; D <<= 1; C <<= 1 } return -9 } function v(z) { do { var A = l(u); if (A < 0) { return A } if (A < 256) { z.position(z.length()); z.writeByte(A) } else { if (A > 256) { A -= 257; if (A >= 29) { throw "invalid literal/length or distance code in fixed or dynamic block" } var y = b[A] + s(q[A]); A = l(c); if (A < 0) { return A } var B = n[A] + s(h[A]); if (B > z.length()) { throw "distance is too far back in fixed or dynamic block" } z.position(z.length()); while (y--) { z.writeByte(z.readByteAt(z.length() - B)) } } } } while (A != 256); return 0 } function k(z) { w = 0; t = 0; if (x + 4 > a.length()) { throw "available inflate data did not terminate" } var y = a[x++]; y |= a[x++] << 8; if (a[x++] != (~y & 255) || a[x++] != ((~y >> 8) & 255)) { throw "stored block length did not match one's complement" } if (x + y > a.length()) { throw "available inflate data did not terminate" } while (y--) { z[z.length] = a[x++] } } function o() { var z = new Array(); for (var y = 0; y < 144; y++) { z[y] = 8 } for (; y < 256; y++) { z[y] = 9 } for (; y < 280; y++) { z[y] = 7 } for (; y < m; y++) { z[y] = 8 } p(u, z, m); for (y = 0; y < d; y++) { z[y] = 5 } p(c, z, d) } function f() { var A = new Array(), z = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], G = s(5) + 257, y = s(5) + 1, E = s(4) + 4; if (G > g || y > d) { throw "dynamic block code description: too many length or distance codes" } for (var F = 0; F < E; F++) { A[z[F]] = s(3) } for (; F < 19; F++) { A[z[F]] = 0 } var C = p(u, A, 19); if (C !== 0) { throw "dynamic block code description: code lengths codes incomplete" } F = 0; while (F < G + y) { var B = l(u), D; if (B < 16) { A[F++] = B } else { D = 0; if (B == 16) { if (F === 0) { throw "dynamic block code description: repeat lengths with no first length" } D = A[F - 1]; B = 3 + s(2) } else { if (B == 17) { B = 3 + s(3) } else { B = 11 + s(7) } } if (F + B > G + y) { throw "dynamic block code description: repeat more than specified lengths" } while (B--) { A[F++] = D } } } C = p(u, A, G); if (C < 0 || (C > 0 && G - u.count[0] != 1)) { throw "dynamic block code description: invalid literal/length code lengths" } C = p(c, A.slice(G), y); if (C < 0 || (C > 0 && y - c.count[0] != 1)) { throw "dynamic block code description: invalid distance code lengths" } return C } return { setInput: function (y) { a = y; a.endian(Endian.LITTLE); a.position(0) }, inflate: function (y) { x = w = t = 0; var B = 0; do { var A = s(1); var z = s(2); if (z === 0) { k(y) } else { if (z == 3) { throw "invalid block type (type == 3)" } else { u = { count: new Array(0), symbol: new Array(0) }; c = { count: new Array(0), symbol: new Array(0) }; if (z == 1) { o() } else { if (z == 2) { B = f() } } if (B !== 0) { return B } B = v(y) } } if (B !== 0) { break } } while (!A); return B } } }; var ZipEntry = function (e) { var c = e, d = 0, b = 0, a = 0, f = 0; return { name: function () { return c }, time: function (h) { var g; if (h) { g = new Date(time); d = (g.fullYear - 1980 & 127) << 25 | (g.month + 1) << 21 | g.day << 16 | g.hours << 11 | g.minutes << 5 | g.seconds >> 1 } else { g = new Date(((d >> 25) & 127) + 1980, ((d >> 21) & 15) - 1, (d >> 16) & 31, (d >> 11) & 31, (d >> 5) & 63, (d & 31) << 1); return g.getTime() } }, size: 0, compressedSize: 0, crc: 0, method: 0, extra: undefined, comment: "", isDirectory: function () { return c.charAt(c.length - 1) == "/" } } }; var ZipFile = function (f) { var c = undefined, h = [], e = {}, b = {}; c = new BA(f.data(), Endian.LITTLE); a(); function a() { g(); e = {}; b = {}; for (var l = 0; l < h.length; l++) { var n = new BA(c.readBytes(ZipConstants.CENHDR), Endian.LITTLE); if (n.readUnsignedInt() != ZipConstants.CENSIG) { throw "readEntries::Invalid CEN header (bad signature)" } n.position(28); var k = n.readUnsignedShort(); if (k === 0) { throw "missing entry name" } var m = new ZipEntry(c.readUTFBytes(k)); k = n.readUnsignedShort(); m.extra = new BA(); if (k > 0) { m.extra.data(c.readBytes(k)) } c.move(n.readUnsignedShort()); n.position(6); m.version = n.readUnsignedShort(); m.flag = n.readUnsignedShort(); if ((m.flag & 1) == 1) { throw "readEntries::Encrypted ZIP entry not supported" } m.method = n.readUnsignedShort(); m.dostime = n.readUnsignedInt(); m.crc = n.readUnsignedInt(); m.compressedSize = n.readUnsignedInt(); m.size = n.readUnsignedInt(); h[l] = m; e[m.name()] = m; n.position(42); b[m.name()] = n.readUnsignedInt() } } function g() { var k = new BA(); k.endian(Endian.LITTLE); k.data(c.readBytes(d(), ZipConstants.ENDHDR)); k.position(ZipConstants.ENDTOT); h = new Array(k.readUnsignedShort()); k.position(ZipConstants.ENDOFF); c.position(k.readUnsignedInt()) } function d() { var k = c.length() - ZipConstants.ENDHDR; var l = Math.max(0, k - 65535); for (k; k >= l; k--) { c.position(k); if (c.readByte() != 80) { continue } c.position(k); if (c.readUnsignedInt() == 101010256) { return k } } throw "findEND::Invalid zip" } return { entries: function () { return h }, size: function () { return h.length }, getEntry: function (k) { return e[k] }, getInput: function (n) { c.position(b[n.name()] + 30 - 2); var k = c.readShort(); c.move(n.name().length + k); var m = new BA(); if (n.compressedSize > 0) { m.data(c.readBytes(n.compressedSize)) } switch (n.method) { case 0: return m; break; case 8: var l = new BA(); var o = new Inflater(); o.setInput(m); o.inflate(l); l.position(0); return l; break; default: throw "zipEntry::getInput::Invalid compression method" } } } }; var ZipLoader = function (zipURL) { var ZIP_CACHE = {}, ZIP_FILE_REG = new RegExp(".*?.zip$", "i"), ZIP_ENTRY_REG = new RegExp("(.*?.zip)://(.*$)", "i"), _zipUrl = zipURL, _entryUrl = "", _entryDataFormat = "", isCompleteProcessRequired = true, data = undefined; if (_zipUrl) { loadBinaryResource(_zipUrl) } function isIE() { return navigator.userAgent.match(/MSIE/) !== null } function getXMLHttpObj() { if (typeof (XMLHttpRequest) != "undefined") { return new XMLHttpRequest() } var axO = ["Msxml2.XMLHTTP.6.0", "Msxml2.XMLHTTP.4.0", "Msxml2.XMLHTTP.3.0", "Msxml2.XMLHTTP", "Microsoft.XMLHTTP"], i; for (i = 0; i < axO.length; i++) { try { return new ActiveXObject(axO[i]) } catch (e) { } } return null } function loadBinaryResource(url) { var req = getXMLHttpObj(); req.open("GET", url, false); if (!req.overrideMimeType) { var vbScript = '<script type="text/vbscript">\n<!--\nFunction BinaryToArray(Binary)\n  Dim i\n  ReDim byteArray(LenB(Binary))\n  For i = 1 To LenB(Binary)\n    byteArray(i-1) = AscB(MidB(Binary, i, 1))\n  Next\n  BinaryToArray = byteArray\nEnd Function\n-->\n<\/script>'; document.write(vbScript); req.setRequestHeader("Accept-Charset", "x-user-defined"); req.send(); var fileContents = BinaryToArray(req.responseBody).toArray(); loadComplete(fileContents) } else { req.overrideMimeType("text/plain; charset=x-user-defined"); req.send(); loadComplete(req.responseText) } } function loadComplete(data) { if (isCompleteProcessRequired) { var zipfile = new ZipFile(new BA(data, Endian.LITTLE)); ZIP_CACHE[_zipUrl] = zipfile; dataFromZip(zipfile) } } function dataFromZip(zip) { if (zip && _entryUrl) { data = getZipEntry(zip, _entryUrl) } } function getZipEntry(zip, entryUrl) { if (ZIP_ENTRY_REG.test(entryUrl)) { var result = ZIP_ENTRY_REG.exec(entryUrl); var outerEntry = result[1]; var innerEntry = result[2]; var innerZip = new ZipFile(zip.getInput(zip.getEntry(outerEntry))); return getZipEntry(innerZip, innerEntry) } else { var entry = zip.getEntry(entryUrl); if (entry) { return zip.getInput(entry) } else { throw "Requested file was not found in the archive" } } } function appendChild(node, text) { if (null === node.canHaveChildren || node.canHaveChildren) { node.appendChild(document.createTextNode(text)) } else { node.text = text } } function getFileExtension(filename) { return (/[.]/.exec(filename)) && /[^.]+$/.exec(filename)[0] || "" } function _utf8_decode(utftext) { if (utftext.charCodeAt(0) == 239 && utftext.charCodeAt(1) == 187 && utftext.charCodeAt(2) == 191) { utftext = utftext.substr(3); var string = ""; var i = 0; var c = c1 = c2 = 0; while (i < utftext.length) { c = utftext.charCodeAt(i); if (c < 128) { string += String.fromCharCode(c); i++ } else { if ((c > 191) && (c < 224)) { c2 = utftext.charCodeAt(i + 1); string += String.fromCharCode(((c & 31) << 6) | (c2 & 63)); i += 2 } else { c2 = utftext.charCodeAt(i + 1); c3 = utftext.charCodeAt(i + 2); string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)); i += 3 } } } return string } return utftext } return { load: function (url) { isCompleteProcessRequired = false; switch (true) { case ZIP_ENTRY_REG.test(url): var result = ZIP_ENTRY_REG.exec(url); _zipUrl = result[1]; _entryUrl = result[2]; var zip = ZIP_CACHE[_zipUrl]; if (zip) { dataFromZip(zip) } else { isCompleteProcessRequired = true; loadBinaryResource(url) } break; case ZIP_FILE_REG.test(url): isCompleteProcessRequired = true; _zipUrl = url; _entryDataFormat = "Text"; loadBinaryResource(url); break; default: loadBinaryResource(url); break } if (data) { data.position(0); return _utf8_decode(data.readBytes(0, data.length())) } else { return "" } }, loadImage: function (url) { var data = this.load(url); if (data) { var tmp = "data:"; switch (getFileExtension(url).toLowerCase()) { case "gif": tmp += "image/gif;base64,"; break; case "png": tmp += "image/png;base64,"; break; case "jpg": case "jpeg": tmp += "image/jpeg;base64,"; break } tmp += Base64(data) } return tmp }, loadCSS: function (url) { var data = _utf8_decode(this.load(url)); if (data) { var pa = document.getElementsByTagName("head")[0]; var el = document.createElement("style"); el.type = "text/css"; el.media = "screen"; if (el.styleSheet) { el.styleSheet.cssText = data } else { el.appendChild(document.createTextNode(data)) } pa.appendChild(el) } }, loadScript: function (url, encoding) { var data = _utf8_decode(this.load(url)); if (data) { var fileRef = window.document.createElement("script"); fileRef.setAttribute("type", "text/javascript"); fileRef.setAttribute("charset", encoding); if (isIE()) { eval(data) } else { var head = document.getElementsByTagName("head")[0] || document.documentElement; head.insertBefore(fileRef, head.firstChild); appendChild(fileRef, data) } } } } }; function HeightMask(b, c, a) { this.width = 16; this.height = 16; this.angle = c; this.items = a ? a : []; this.rotationMode = b; HeightMask.prototype.setItem = function (d, g) { var f = 0, e = 0; switch (this.rotationMode) { case RotationMode.Floor: f = d; e = g; break; case RotationMode.RightWall: f = g; e = d; break; case RotationMode.Ceiling: f = d; e = 15 - g; break; case RotationMode.LeftWall: f = g; e = 15 - d; break; default: } this.items[f] = 16 - e }; HeightMask.prototype.draw = function (f, l, g, d) { var e; if ((e = sonicManager.SpriteCache.heightMaps[this.index + " " + g.y + " " + g.x])) { if (e.loaded) { f.drawImage(e, l.x, l.y) } } else { for (var n = 0; n < 16; n++) { for (var m = 0; m < 16; m++) { var p = 0, o = 0; switch (this.rotationMode) { case RotationMode.Floor: p = n; o = m; break; case RotationMode.RightWall: p = m; o = n; break; case RotationMode.Ceiling: p = n; o = 15 - m; break; case RotationMode.LeftWall: p = 15 - m; o = n; break; default: } var k = l.x + (p * g.x); var h = l.y + (o * g.y); f.lineWidth = 1; if (d <= 0 && this.items[n] >= 16 - m) { f.fillStyle = "rgba(24,98,235,0.6)"; f.fillRect(k, h, g.x, g.y) } else { if (d != -1) { f.lineWidth = 1; f.strokeStyle = "#0C3146"; f.strokeRect(k, h, g.x, g.y) } } } } if (d == 1) { f.strokeStyle = "#DC4146"; f.lineWidth = 4; f.moveTo(l.x + 8 * g.x, l.y + 8 * g.y); f.lineTo(l.x + 8 * g.x + Math.sin((this.angle) * (Math.PI / 180)) * 6 * g.x, l.y + 8 * g.y + Math.cos((this.angle) * (Math.PI / 180)) * 6 * g.y); f.stroke() } } } } window._H = { loadSprite: function (b, a) { var c = new Image(); c.onload = function () { c.loaded = true; if (a) { a(c) } }; c.src = b; return c }, defaultWindowLocation: function (a) { switch (a) { case 0: return { x: 0, y: 0, width: 320, height: 240 }; case 1: return { x: 0, y: 0, width: 900, height: 240 * 2} } return null }, defaultCanvas: function (b, d) { var c = document.createElement("canvas"); c.width = b; c.height = d; var a = c.getContext("2d"); a.width = b; a.height = d; return { canvas: c, context: a} }, intersectRect: function (b, a) { return !(a.left > b.right || a.right < b.left || a.top > b.bottom || a.bottom < b.top) }, remove: function (a, c) { var b = -1; while ((b = a.indexOf(c)) > -1) { a.splice(b, 1) } }, getShortsFromInt: function (a, c) { var b = -1; while ((b = a.indexOf(c)) > -1) { a.splice(b, 1) } }, scaleSprite: function (c, k, b) { var g = _H.getImageData(c); var a = []; for (var e = 0; e < g.length; e += 4) { a.push(_H.colorObjectFromData(g, e)) } var h = this.defaultCanvas().context.createImageData(c.width * k.x, c.height * k.y); _H.setDataFromColors(h.data, a, k, c.width, { r: 0, g: 0, b: 0 }); return _H.loadSprite(_H.getBase64Image(h), b) }, getCursorPosition: function (b, a) { if (b.targetTouches && b.targetTouches.length > 0) { b = b.targetTouches[0] } if (b.pageX != null && b.pageY != null) { return { x: b.pageX, y: b.pageY} } if (b.x != null && b.y != null) { return { x: b.x, y: b.y} } return { x: b.clientX, y: b.clientY} }, colorFromData: function (h, m) { var f = h[m]; var e = h[m + 1]; var a = h[m + 2]; var l = f.toString(16); var k = e.toString(16); var d = a.toString(16); return "#" + (l.length == 1 ? "0" + l : l) + (k.length == 1 ? "0" + k : k) + (d.length == 1 ? "0" + d : d) }, colorObjectFromData: function (f, h) { var e = f[h]; var d = f[h + 1]; var a = f[h + 2]; return { r: e, g: d, b: a} }, parseNumber: function (a) { switch (a) { case "0": return 0; case "1": return 1; case "2": return 2; case "3": return 3; case "4": return 4; case "5": return 5; case "6": return 6; case "7": return 7; case "8": return 8; case "9": return 9; case "a": return 10; case "b": return 11; case "c": return 12; case "d": return 13; case "e": return 14; case "f": return 15; case "g": return 16 } }, setDataFromColors: function (m, a, f, d, t) { for (var n = 0; n < a.length; n++) { var e = (n % d); var b = Math.floor(n / d); var o = a[n]; var s = false; if (t) { if (o.r == t.r && o.g == t.g && o.b == t.b) { s = true } } for (var l = 0; l < f.x; l++) { for (var h = 0; h < f.y; h++) { var r = (e * f.x + l); var q = (b * f.y + h); var p = (r + q * (f.x * d)) * 4; if (s) { m[p + 0] = 0; m[p + 1] = 0; m[p + 2] = 0; m[p + 3] = 0; continue } m[p] = o.r; m[p + 1] = o.g; m[p + 2] = o.b; m[p + 3] = 255 } } } }, getImageData: function (b) { var c = document.createElement("canvas"); c.width = b.width; c.height = b.height; var a = c.getContext("2d"); a.drawImage(b, 0, 0); var d = a.getImageData(0, 0, b.width, b.height); return d.data }, getBase64Image: function (c) { var b = document.createElement("canvas"); b.width = c.width; b.height = c.height; var a = b.getContext("2d"); a.putImageData(c, 0, 0); var d = b.toDataURL("image/png"); return d }, isFunction: function (a) { var b = {}; return a && b.toString.call(a) == "[object Function]" }, detect: function (c, a) { for (var b in c) { if (typeof (c[b]) == "object") { if (a[c[b]]) { alert("circ") } a[c[b]] = true; this.detect(c[b], a) } } }, stringify: function (e, g) { return JSON.stringify(e, function (h, k) { if (h == "imageData") { return undefined } if (h == "oldScale") { return undefined } if (h == "sprite") { return undefined } if (h == "sprites") { return undefined } if (h == "index") { return undefined } if (h == "_style") { return undefined } else { return k } }); if (g > 0) { return "" } if (!g) { g = 0 } var d = typeof (e); if (d != "object" || e === null) { if (d == "string") { e = '"' + e + '"' } return String(e) } else { var f, b, c = [], a = (e && e.constructor == Array); for (f in e) { b = e[f]; d = typeof (b); if (d == "string") { b = '"' + b + '"' } else { if (d == "object" && b !== null) { b = stringify(b, g + 1) } } c.push((a ? "" : '"' + f + '":') + String(b)) } return (a ? "[" : "{") + String(c) + (a ? "]" : "}") } }, compareTiles: function (c, a, b) { var d; for (d = 0; d < c.length; d++) { if (c[d].equals(b)) { return d } } for (d = 0; d < a.length; d++) { if (a[d].equals(b)) { return c.length + d } } return -1 }, compareTilePieces: function (c, b, d) { var a; for (a = 0; a < c.length; a++) { if (c[a].equals(d)) { return a } } for (a = 0; a < b.length; a++) { if (b[a].equals(d)) { return c.length + a } } return -1 } }; window.Base64 = { _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function (c) { var a = ""; var l, h, f, k, g, e, d; var b = 0; c = Base64._utf8_encode(c); while (b < c.length) { l = c.charCodeAt(b++); h = c.charCodeAt(b++); f = c.charCodeAt(b++); k = l >> 2; g = ((l & 3) << 4) | (h >> 4); e = ((h & 15) << 2) | (f >> 6); d = f & 63; if (isNaN(h)) { e = d = 64 } else { if (isNaN(f)) { d = 64 } } a = a + this._keyStr.charAt(k) + this._keyStr.charAt(g) + this._keyStr.charAt(e) + this._keyStr.charAt(d) } return a }, decode: function (c) { var a = ""; var l, h, f; var k, g, e, d; var b = 0; c = c.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (b < c.length) { k = this._keyStr.indexOf(c.charAt(b++)); g = this._keyStr.indexOf(c.charAt(b++)); e = this._keyStr.indexOf(c.charAt(b++)); d = this._keyStr.indexOf(c.charAt(b++)); l = (k << 2) | (g >> 4); h = ((g & 15) << 4) | (e >> 2); f = ((e & 3) << 6) | d; a = a + String.fromCharCode(l); if (e != 64) { a = a + String.fromCharCode(h) } if (d != 64) { a = a + String.fromCharCode(f) } } a = Base64._utf8_decode(a); return a }, _utf8_encode: function (b) { b = b.replace(/\r\n/g, "\n"); var a = ""; for (var e = 0; e < b.length; e++) { var d = b.charCodeAt(e); if (d < 128) { a += String.fromCharCode(d) } else { if ((d > 127) && (d < 2048)) { a += String.fromCharCode((d >> 6) | 192); a += String.fromCharCode((d & 63) | 128) } else { a += String.fromCharCode((d >> 12) | 224); a += String.fromCharCode(((d >> 6) & 63) | 128); a += String.fromCharCode((d & 63) | 128) } } } return a }, _utf8_decode: function (a) { var b = ""; var d = 0; var e = c1 = c2 = 0; while (d < a.length) { e = a.charCodeAt(d); if (e < 128) { b += String.fromCharCode(e); d++ } else { if ((e > 191) && (e < 224)) { c2 = a.charCodeAt(d + 1); b += String.fromCharCode(((e & 31) << 6) | (c2 & 63)); d += 2 } else { c2 = a.charCodeAt(d + 1); c3 = a.charCodeAt(d + 2); b += String.fromCharCode(((e & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)); d += 3 } } } return b } }; function OutStream() { this.bytestream = new Array(); this.offset = 0; this.WriteBit = function (a) { this.bytestream[this.offset >>> 3] |= a << (this.offset & 7); this.offset++ }; this.Write = function (c, b) { for (var a = 0; a < b; ++a) { this.WriteBit((c >>> a) & 1) } } } function InStream(a, b) { this.bytestream = a; this.bitcount = b; this.offset = 0; this.ReadBit = function () { var c = this.bytestream[this.offset >>> 3] >> (this.offset & 7); this.offset++; return c & 1 }; this.Read = function (d) { if ((this.offset + d) > this.bitcount) { return null } var e = 0; for (var c = 0; c < d; ++c) { e |= this.ReadBit() << c } return e } } function LZWCompressor(a) { this.output = a; this.CompressDictionary = function () { this.hashtable = new Object(); this.nextcode = 0; for (var b = 0; b < 256; ++b) { var c = String.fromCharCode(b); this.hashtable[c] = this.nextcode++ } this.Exists = function (d) { return (this.hashtable.hasOwnProperty(d)) }; this.Insert = function (e) { var d = this.ValSizeInBits(); this.hashtable[e] = this.nextcode++; return d }; this.Lookup = function (d) { return (this.hashtable[d]) }; this.ValSizeInBits = function () { var d = Math.log(this.nextcode + 1) / Math.LN2; return Math.ceil(d) } }; this.compress = function (g) { var e = g.length; if (e == 0) { return output.bytestream } var k = new this.CompressDictionary(); var f = k.ValSizeInBits(); var b = ""; for (var d = 0; d < e; ++d) { var h = g.charAt(d); if (k.Exists(b + h)) { b = b + h } else { f = k.Insert(b + h); this.output.Write(k.Lookup(b), f); b = h } } this.output.Write(k.Lookup(b), f) } } function LZWDecompressor(a) { this.input = a; this.DecompressDictionary = function () { this.revhashtable = new Array(); this.nextcode = 0; for (var b = 0; b < 256; ++b) { this.revhashtable[this.nextcode++] = String.fromCharCode(b) } this.numBits = 9; this.Size = function () { return (this.nextcode) }; this.Insert = function (d) { this.revhashtable[this.nextcode++] = d; var c = Math.log(this.nextcode + 2) / Math.LN2; this.numBits = Math.ceil(c); return this.numBits }; this.LookupIndex = function (c) { return this.revhashtable[c] }; this.ValSizeInBits = function () { return this.numBits } }; this.decompress = function (f, h) { if (h == 0) { return "" } var l = new this.DecompressDictionary(); var g = l.ValSizeInBits(); var d = this.input.Read(g); var c = String.fromCharCode(d); var b = c; var e = ""; while ((d = this.input.Read(g)) != null) { if (d < l.Size()) { e = l.LookupIndex(d) } else { e = b + b.charAt(0) } c += e; g = l.Insert(b + e.charAt(0)); b = e } return c } } (function (a) { (this.JSON || (JSON = {})).hpack = function (m, t) { if (3 < t) { var f = JSON.hbest(m), v = a[f]; a = [] } else { var p = Array.prototype.indexOf || function (w) { for (var k = this.length, x = 0; x < k; ++x) { if (this[x] === w) { return x } } return -1 }, g = [], v = [g], h = m[0], o = 0, d = 0, n; for (var r in h) { g[o++] = r } n = o; o = 0; for (var b = m.length, f = 0; f < b; ++f) { for (var s = m[f], u = [], e = 0; e < n; ++e) { u[e] = s[g[e]] } v[++o] = u } ++o; if (0 < t) { for (u = v[1], e = 0; e < n; ++e) { if (typeof u[e] != "number") { g[e] = [g[e], h = []]; h.indexOf = p; for (f = 1; f < o; ++f) { var q = v[f][e], c = h.indexOf(q); v[f][e] = c < 0 ? h.push(q) - 1 : c } } } } if (2 < t) { for (e = 0; e < n; ++e) { if (g[e] instanceof Array) { for (u = g[e][1], q = [], h = [], d = 0, f = 1; f < o; ++f) { q[d] = u[h[d] = v[f][e]]; ++d } if (JSON.stringify(q).length < JSON.stringify(h.concat(u)).length) { for (d = 0, f = 1; f < o; ++f) { v[f][e] = q[d]; ++d } g[e] = g[e][0] } } } } else { if (1 < t) { b -= Math.floor(b / 2); for (e = 0; e < n; ++e) { if (g[e] instanceof Array) { if (b < (h = g[e][1]).length) { for (f = 1; f < o; ++f) { var q = v[f][e]; v[f][e] = h[q] } g[e] = g[e][0] } } } } } if (0 < t) { for (e = 0; e < n; ++e) { if (g[e] instanceof Array) { g.splice(e, 1, g[e][0], g[e][1]); ++n; ++e } } } } return v }; JSON.hunpack = function (h) { for (var r = [], p = [], g = h[0], n = g.length, b = h.length, m = -1, d = -1, f = 0, c = 0, e, q; f < n; ++f) { p[++d] = g[f]; if (typeof g[f + 1] == "object") { ++f; for (e = 1; e < b; ++e) { q = h[e]; q[c] = g[f][q[c]] } } ++c } for (f = 0, n = p.length; f < n; ++f) { p[f] = 'o["'.concat(p[f].replace('"', "\\x22"), '"]=a[', f, "];") } var o = Function("o,a", p.join("") + "return o;"); for (e = 1; e < b; ++e) { r[++m] = o({}, h[e]) } return r }; JSON.hclone = function (d) { for (var e = [], b = 0, c = d.length; b < c; ++b) { e[b] = d[b].slice(0) } return e }; JSON.hbest = function (f) { for (var d = 0, c = 0, b = 0, e = 0; d < 4; ++d) { a[d] = JSON.hpack(f, d); b = JSON.stringify(a[d]).length; if (e === 0) { e = b } else { if (b < e) { e = b; c = d } } } return c } })([]); (function () { JSLINQ = window.JSLINQ = function (a) { return new JSLINQ.fn.init(a) }; JSLINQ.fn = JSLINQ.prototype = { init: function (a) { this.items = a }, jslinq: "2.10", ToArray: function () { return this.items }, Where: function (d) { var c; var a = new Array(); for (var b = 0; b < this.items.length; b++) { if (d(this.items[b], b)) { a[a.length] = this.items[b] } } return new JSLINQ(a) }, Select: function (d) { var c; var a = new Array(); for (var b = 0; b < this.items.length; b++) { if (d(this.items[b])) { a[a.length] = d(this.items[b]) } } return new JSLINQ(a) }, OrderBy: function (c) { var b = new Array(); for (var a = 0; a < this.items.length; a++) { b[b.length] = this.items[a] } return new JSLINQ(b.sort(function (f, e) { var d = c(f); var g = c(e); return ((d < g) ? -1 : ((d > g) ? 1 : 0)) })) }, OrderByDescending: function (c) { var b = new Array(); for (var a = 0; a < this.items.length; a++) { b[b.length] = this.items[a] } return new JSLINQ(b.sort(function (f, e) { var d = c(e); var g = c(f); return ((d < g) ? -1 : ((d > g) ? 1 : 0)) })) }, SelectMany: function (c) { var b = new Array(); for (var a = 0; a < this.items.length; a++) { b = b.concat(c(this.items[a])) } return new JSLINQ(b) }, Count: function (a) { if (a == null) { return this.items.length } else { return this.Where(a).items.length } }, Distinct: function (d) { var b; var e = new Object(); var c = new Array(); for (var a = 0; a < this.items.length; a++) { b = d(this.items[a]); if (e[b] == null) { e[b] = true; c[c.length] = b } } e = null; return new JSLINQ(c) }, Any: function (b) { for (var a = 0; a < this.items.length; a++) { if (b(this.items[a], a)) { return true } } return false }, All: function (b) { for (var a = 0; a < this.items.length; a++) { if (!b(this.items[a], a)) { return false } } return true }, Reverse: function () { var b = new Array(); for (var a = this.items.length - 1; a > -1; a--) { b[b.length] = this.items[a] } return new JSLINQ(b) }, First: function (a) { if (a != null) { return this.Where(a).First() } else { if (this.items.length > 0) { return this.items[0] } else { return null } } }, Last: function (a) { if (a != null) { return this.Where(a).Last() } else { if (this.items.length > 0) { return this.items[this.items.length - 1] } else { return null } } }, ElementAt: function (a) { return this.items[a] }, Concat: function (b) { var a = b.items || b; return new JSLINQ(this.items.concat(a)) }, Intersect: function (g, k) { var h; if (k != undefined) { h = k } else { h = function (l, b, a, m) { return l == a } } var e = g.items || g; var d = new Array(); for (var f = 0; f < this.items.length; f++) { for (var c = 0; c < e.length; c++) { if (h(this.items[f], f, e[c], c)) { d[d.length] = this.items[f] } } } return new JSLINQ(d) }, DefaultIfEmpty: function (a) { if (this.items.length == 0) { return a } return this }, ElementAtOrDefault: function (b, a) { if (b >= 0 && b < this.items.length) { return this.items[b] } return a }, FirstOrDefault: function (a) { return this.First() || a }, LastOrDefault: function (a) { return this.Last() || a } }; JSLINQ.fn.init.prototype = JSLINQ.fn })(); jQuery.fn.rotate = function (h, c) { var g = this.get(0); if (!c) { g.angle = ((g.angle == undefined ? 0 : g.angle) + h) % 360 } else { g.angle = h } var e; if (g.angle >= 0) { e = Math.PI * g.angle / 180 } else { e = Math.PI * (360 + g.angle) / 180 } var a = Math.cos(e); var f = Math.sin(e); if (document.all && !window.opera) { var b = document.createElement("img"); b.src = g.src; b.height = g.height; b.width = g.width; b.style.filter = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ",M12=" + (-f) + ",M21=" + f + ",M22=" + a + ",SizingMethod='auto expand')" } else { var b = document.createElement("canvas"); if (!g.oImage) { b.oImage = new Image(); b.oImage.src = g.src } else { b.oImage = g.oImage } b.style.width = b.width = Math.abs(a * b.oImage.width) + Math.abs(f * b.oImage.height); b.style.height = b.height = Math.abs(a * b.oImage.height) + Math.abs(f * b.oImage.width); var d = b.getContext("2d"); d.save(); if (e <= Math.PI / 2) { d.translate(f * b.oImage.height, 0) } else { if (e <= Math.PI) { d.translate(b.width, -a * b.oImage.height) } else { if (e <= 1.5 * Math.PI) { d.translate(-a * b.oImage.width, b.height) } else { d.translate(0, -f * b.oImage.width) } } } d.rotate(e); d.drawImage(b.oImage, 0, 0, b.oImage.width, b.oImage.height); d.restore() } b.id = g.id; b.angle = g.angle; g.parentNode.replaceChild(b, g) }; jQuery.fn.rotateRight = function (a) { this.rotate(a == undefined ? 90 : a) }; jQuery.fn.rotateLeft = function (a) { this.rotate(a == undefined ? -90 : -a) }; function Ring(a) { this.active = a; this.animationIndex = 0; this.x = 0; this.y = 0; this.xsp = 0; this.ysp = 0; this.tickCount = 0; this.draw = function (c, f, e) { if (a) { this.ysp += 0.09375; this.x += this.xsp; this.y += this.ysp; if (this.x < sonicManager.windowLocation.x || this.y < sonicManager.windowLocation.y || this.x > sonicManager.windowLocation.x + sonicManager.windowLocation.width || this.y > sonicManager.windowLocation.y + sonicManager.windowLocation.height) { this.tickCount = 4294967295; return false } if (sonicManager.sonicToon.checkCollisionLine(Math.floor(this.x) + 8, Math.floor(this.y) + 8, 16, 1) != -1) { this.ysp *= -0.75 } if (sonicManager.sonicToon.checkCollisionLine(Math.floor(this.x) - 8, Math.floor(this.y) + 8, 26, 0) != -1) { this.xsp *= -0.75 } if (sonicManager.drawTickCount > sonicManager.sonicToon.sonicLastHitTick + 64 && _H.intersectRect(sonicManager.sonicToon.myRec, { left: this.x - 8 * e.x, right: this.x + 8 * e.x, top: this.y - 8 * e.y, bottom: this.y + 8 * e.y })) { this.tickCount = 4294967295; sonicManager.sonicToon.rings++; return false } this.tickCount++ } if (sonicManager.sonicToon) { this.animationIndex = Math.floor((sonicManager.drawTickCount % ((a ? 4 : 8) * 4)) / (a ? 4 : 8)) } else { this.animationIndex = 0 } var d; if (sonicManager.SpriteCache.rings) { d = sonicManager.SpriteCache.rings } else { alert("sprite fial"); return } var b = d[this.animationIndex * 200 + e.y * 100 + e.x]; if (!b) { alert("sprite fail"); return } if (b.loaded) { c.drawImage(b, Math.floor(f.x * e.x), Math.floor(f.y * e.y)) } else { return false } } } function Sonic(a, b) { this.x = 80; this.y = 1960; this.obtainedRing = []; this.rings = 0; this.angleInformation1 = []; this.angleInformation2 = []; this.heightInformation1 = []; this.heightInformation2 = []; this.debugging = false; this.jumping = false; this.crouching = false; this.holdingLeft = false; this.holdingRight = false; this.LevelWidth = 0; this.xsp = 0; this.ysp = 0; this.sonicLastHitTick = 0; this.sonicJustHitTick = 0; this.acc = 0.046875; this.dec = 0.5; this.frc = 0.046875; this.rdec = 0.125; this.rfrc = 0.0234375; this.runningTick = 0; this.jmp = -6.5; this.grv = 0.21875; this.air = 0.09375; this.runningDir = 1; this.standStill = true; this.sonicLevel = a; this.state = SonicState.Ground; this.haltSmoke = []; this.facing = true; this.ticking = false; this.breaking = 0; this.wasJumping = false; this.ducking = false; this.spinDash = false; this.myRec = {}; this.spinDashSpeed = 0; this.angle = 180; this.tick = function () { if (this.debugging) { var k = 10; if (this.holdingRight) { this.x += k } if (this.holdingLeft) { this.x -= k } if (this.crouching) { this.y += k } if (this.jumping) { this.y -= k } return } this.ticking = true; this.myRec = { left: this.x - 5, right: this.x + 5, top: this.y - 20, bottom: this.y + 20 }; switch (this.state) { case SonicState.Ground: if (this.justHit) { this.justHit = false; this.sonicJustHitTick = sonicManager.drawTickCount; this.xsp = 0 } if (this.spinDash) { this.spinDashSpeed -= (Math.floor(this.spinDashSpeed / 125)) / 256 } if (this.wasJumping && !this.jumping) { this.wasJumping = false } if (Math.abs(this.xsp) < 0.5) { this.rolling = false; this.currentlyBall = false } if (this.wasJumping && this.jumping) { } else { if (this.jumping) { this.wasJumping = true; if (this.ducking) { this.spinDash = true; this.spinDashSpeed += 2; if (this.spinDashSpeed > 8) { this.spinDashSpeed = 8 } this.spriteState = "spindash0" } else { this.state = SonicState.Air; this.currentlyBall = true; this.ysp = this.jmp } } } if (this.holdingLeft && this.standStill) { this.facing = false; this.standStill = false; this.xsp -= this.acc; this.runningDir = -1; break } if (this.holdingRight && this.standStill) { this.facing = true; this.standStill = false; this.xsp += this.acc; this.runningDir = 1; break } if (this.holdingRight) { this.facing = true; if (this.runningDir == 1) { if (this.rolling) { } else { } } else { if (Math.abs(this.xsp) > 4.5) { this.facing = false; this.breaking = 1; this.runningTick = 0 } this.runningDir = 1 } } else { if (this.holdingLeft) { this.facing = false; if (this.runningDir == -1) { } else { if (Math.abs(this.xsp) > 4.5) { this.facing = true; this.breaking = -1; this.runningTick = 0 } this.runningDir = -1 } } else { this.ducking = false; if (this.crouching) { if (Math.abs(this.xsp) > 1.03125) { this.rolling = true; this.currentlyBall = true } else { this.ducking = true } } else { if (this.spinDash) { this.xsp = (8 + Math.floor(this.spinDashSpeed) / 2) * (this.facing ? 1 : -1); this.spinDash = false; this.rolling = true; this.currentlyBall = true } } if (!this.rolling) { this.xsp -= Math.min(Math.abs(this.xsp), this.frc) * (this.xsp > 0 ? 1 : -1) } } } if (this.rolling) { this.xsp -= Math.min(Math.abs(this.xsp), this.rfrc) * (this.xsp > 0 ? 1 : -1) } break; case SonicState.Air: if (this.wasJumping) { if (this.jumping) { } else { if (this.ysp < 0) { if (this.ysp < -4) { this.ysp = -4 } } } } this.ysp += this.justHit ? 0.1875 : this.grv; if (this.ysp < 0 && this.ysp > -4) { if (Math.abs(this.xsp) > 0.125) { this.xsp *= 0.96875 } } if (this.ysp > 16) { this.ysp = 16 } break } var c = 6; if (this.holdingLeft) { if (this.xsp > 0) { if (this.rolling) { this.xsp -= this.rdec } else { this.xsp -= this.dec } } else { if (this.xsp > -c) { if (!this.rolling) { this.xsp -= this.acc } if (this.xsp < -c) { this.xsp = -c } } } } else { if (this.holdingRight) { if (this.xsp < 0) { if (this.rolling) { this.xsp += this.rdec } else { this.xsp += this.dec } } else { if (this.xsp < c) { if (!this.rolling) { this.xsp += this.acc } if (this.xsp > c) { this.xsp = c } } } } } var g = Math.abs(this.xsp); j = parseInt(this.spriteState.substring(this.spriteState.length - 1, this.spriteState.length)); if (this.breaking > 0) { if (this.xsp > 0 || this.xsp == 0 || this.spriteState == "breaking3") { this.facing = false; this.breaking = 0 } } else { if (this.breaking < 0) { if (this.xsp < 0 || this.xsp == 0 || this.spriteState == "breaking3") { this.breaking = 0; this.facing = true } } } if (this.justHit) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "hit") { this.spriteState = "hit0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(8 - g)) == 0) { this.spriteState = "hit1" } } } else { if (g == 0 && this.state == SonicState.Ground) { this.runningDir = 0; if (this.ducking) { if (this.spinDash) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "spindash") { this.spriteState = "spindash0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(2 - g)) == 0) { this.spriteState = "spindash" + ((j + 1) % 6) } } } else { if (this.spriteState.substring(0, this.spriteState.length - 1) != "duck") { this.spriteState = "duck0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(4 - g)) == 0) { this.spriteState = "duck1" } } } } else { this.spriteState = "normal"; this.standStill = true; this.currentlyBall = false; this.rolling = false; this.runningTick = 0 } } else { if (this.breaking != 0) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "breaking") { this.spriteState = "breaking0"; this.runningTick = 1 } else { if ((this.runningTick++) % (7) == 0) { this.spriteState = "breaking" + ((j + 1) % 4); if (j == 0) { this.haltSmoke.push({ x: Math.floor(this.x), y: Math.floor(this.y) }) } } } } else { if (this.currentlyBall) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "balls") { this.spriteState = "balls0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(8 - g)) == 0) { this.spriteState = "balls" + ((j + 1) % 5) } } } else { if (g < 6) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "running") { this.spriteState = "running0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(8 - g)) == 0 || (Math.floor(8 - g) == 0)) { this.spriteState = "running" + ((j + 1) % 8) } } } else { if (g >= 6) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "fastrunning") { this.spriteState = "fastrunning0"; this.runningTick = 1 } else { if (((this.runningTick++) % (Math.ceil(8 - g)) == 0) || (Math.floor(8 - g) == 0)) { this.spriteState = "fastrunning" + ((j + 1) % 4) } } } } } } } } this.x += this.xsp; this.y += this.ysp; var h = Math.floor(this.x); var f = Math.floor(this.y); var e, d; if ((e = this.checkCollisionLine(h - 9, f + 4, 20, 0)) != -1) { if (e.pos < h) { this.x = h = e.pos + 11; this.xsp = 0 } else { this.x = h = e.pos - 11; this.xsp = 0 } } if (sonicManager.tickCount % 4 == 0) { this.checkCollisionWithRing() } switch (this.state) { case SonicState.Ground: e = this.checkCollisionLine(h - 9, f, 36, 1); d = this.checkCollisionLine(h + 9, f, 36, 1); if (e == -1 && d == -1) { this.state = SonicState.Air } else { if (e.pos >= 0 && d.pos >= 0) { this.angle = e.angle; if (e.pos < d.pos) { this.angle = e.angle; this.y = f = e.pos - 19 } else { this.angle = d.angle; this.y = f = d.pos - 19 } } else { if (e.pos > -1) { this.angle = e.angle; this.y = f = e.pos - 19 } else { if (d.pos > -1) { this.angle = d.angle; this.y = f = d.pos - 19 } } } } break; case SonicState.Air: e = this.checkCollisionLine(h - 9, f, 20, 1); d = this.checkCollisionLine(h + 9, f, 20, 1); if (e == -1 && d == -1) { this.state = SonicState.Air } else { if (e.pos >= 0 && d.pos >= 0) { this.angle = e.angle; if (e.pos < d.pos) { if (this.y + (20) >= e.pos) { this.angle = e.angle; this.y = f = e.pos - 19; this.rolling = this.currentlyBall = false; this.state = SonicState.Ground; this.ysp = 0 } } else { if (d.pos > -1) { if (this.y + (20) >= d.pos) { this.angle = d.angle; this.y = f = d.pos - 19; this.rolling = this.currentlyBall = false; this.state = SonicState.Ground; this.ysp = 0 } } } } else { if (e.pos > -1) { if (this.y + (20) >= e.pos) { this.angle = e.angle; this.y = f = e.pos - 19; this.rolling = this.currentlyBall = false; this.state = SonicState.Ground; this.ysp = 0 } } else { if (d.pos > -1) { if (this.y + (20) >= d.pos) { this.angle = d.angle; this.y = f = d.pos - 19; this.rolling = this.currentlyBall = false; this.state = SonicState.Ground; this.ysp = 0 } } } } } e = this.checkCollisionLine(h - 9, f, 20, 3); d = this.checkCollisionLine(h + 9, f, 20, 3); if ((e == -1 && d == -1)) { } else { if (e.pos >= 0 && d.pos >= 0) { this.angle = e.angle; if (e.pos < d.pos) { if (this.y + (20) >= e.pos) { this.angle = e.angle; this.y = f = e.pos + 20; this.ysp = 0 } } else { if (this.y + (20) >= d.pos) { this.angle = d.angle; this.y = f = d.pos + 20; this.ysp = 0 } } } else { if (e.pos > -1) { if (this.y + (20) >= e.pos) { this.angle = e.angle; this.y = f = e.pos + 20; this.ysp = 0 } } else { if (d.pos > -1) { if (this.y + (20) >= d.pos) { this.angle = d.angle; this.y = f = d.pos + 20; this.ysp = 0 } } } } } break } }; this.debug = function () { this.debugging = !this.debugging; this.xsp = 0; this.ysp = 0; this.spriteState = "normal" }; this.hit = function () { if (sonicManager.drawTickCount - this.sonicJustHitTick < 120) { return } this.justHit = true; this.ysp = -4; this.xsp = 2 * (-1); this.sonicLastHitTick = sonicManager.drawTickCount; var d = 0; var f = 101.25; var g = false; var e = 4; while (d < this.rings) { var c = new Ring(true); sonicManager.activeRings.push(c); c.x = this.x; c.y = this.y - 10; c.ysp = -Math.sin(f) * e; c.xsp = Math.cos(f) * e; if (g) { c.ysp *= -1; f += 22.5 } g = !g; d++; if (d == 16) { e = 2; f = 101.25 } } this.rings = 0 }; this.checkCollisionWithRing = function () { var f = this.myRec; for (var e in sonicManager.SonicLevel.Rings) { var g = sonicManager.SonicLevel.Rings[e]; if (this.obtainedRing[e]) { continue } var d = g.x * 8 * b.x; var c = g.y * 8 * b.y; if (_H.intersectRect(f, { left: d - 8 * b.x, right: d + 8 * b.x, top: c - 8 * b.y, bottom: c + 8 * b.y })) { this.rings++; this.obtainedRing[e] = true } } }; this.sensorA = 0; this.checkCollisionLine = function (t, q, d, s) { var r = Math.floor(t / 128); var p = Math.floor(q / 128); var g = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[r + p * sonicManager.SonicLevel.LevelWidth]]; var n = sonicManager.SonicLevel.curHeightMap ? g.heightBlocks1 : g.heightBlocks2; var h = t - r * 128; var f = q - p * 128; var c = f * 128 + h; var l = 128; var k; var e; var o = 0; switch (s) { case 0: if (t + d > sonicManager.SonicLevel.LevelWidth * 128) { return { pos: sonicManager.SonicLevel.LevelWidth * 128 - 20, angle: null} } for (k = 0; k < d; k++) { if (h + k >= 128) { g = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[r + 1 + p * sonicManager.SonicLevel.LevelWidth]]; n = sonicManager.SonicLevel.curHeightMap ? g.heightBlocks1 : g.heightBlocks2; h -= 128 } if (t + k > this.LevelWidth || n[f * 128 + (h + k)]) { return { pos: t + k, angle: null} } } break; case 1: if (q + d > sonicManager.SonicLevel.LevelHeight * 128) { return { pos: sonicManager.SonicLevel.LevelHeight * 128 - 20, angle: null} } for (k = 0, e = d * l; k < e; k += l) { if (f + o >= 128) { g = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[r + (p + 1) * sonicManager.SonicLevel.LevelWidth]]; n = sonicManager.SonicLevel.curHeightMap ? g.heightBlocks1 : g.heightBlocks2; f -= 128; c -= 128 * 128 } o++; if (n[c + k]) { return { pos: q + (k / l), angle: null} } } break; case 2: if (t - d < 0) { return { pos: 0 + 20, angle: null} } for (k = 0; k < d; k++) { if (h - k < 0) { g = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[(r - 1) + p * sonicManager.SonicLevel.LevelWidth]]; n = sonicManager.SonicLevel.curHeightMap ? g.heightBlocks1 : g.heightBlocks2; h += 128 } if (t - k < 0 || n[n[q * this.LevelWidth + (h - k)]]) { return { pos: t - k, angle: null} } } break; case 3: if (q - d < 0) { return { pos: 20, angle: null} } for (k = 0, e = d * l; k < e; k += l) { if (f - o < 0) { g = sonicManager.SonicLevel.TileChunks[sonicManager.SonicLevel.ChunkMap[r + (p - 1) * sonicManager.SonicLevel.LevelWidth]]; n = sonicManager.SonicLevel.curHeightMap ? g.heightBlocks1 : g.heightBlocks2; f += 128; c += 128 * 128 } o++; if (n[c - k]) { return { pos: q - (k / l), angle: null} } } break } return -1 }; this.spriteState = "normal"; this.isLoading = function () { return this.imageLoaded[0] < this.imageLength }; this.drawUI = function (c, e, d) { c.font = "13pt Arial bold"; c.fillStyle = "Blue"; c.fillText("Rings: " + this.rings, e.x + 30, e.y + 45) }; this.draw = function (c, e) { var g = Math.floor(this.x); var d = Math.floor(this.y); var m; var l = sonicManager.drawTickCount - this.sonicJustHitTick; if (l < 120) { if (l % 8 < 4) { return } } if (m = sonicManager.SpriteCache.sonicSprites[this.spriteState + e.x + e.y]) { if (m.loaded) { c.save(); var f = 40 - (m.height / e.y); if (!this.facing) { c.translate(((g - 15 - sonicManager.windowLocation.x) * e.x) + m.width, ((d - 20 - sonicManager.windowLocation.y + f) * e.y)); c.scale(-1, 1); c.drawImage(m, 0, 0, m.width, m.height); if (this.spinDash) { c.drawImage(sonicManager.SpriteCache.sonicSprites[("spinsmoke" + Math.floor((sonicManager.drawTickCount % 14) / 2)) + e.x + e.y], -25 * e.x, 0, m.width, m.height) } } else { c.drawImage(m, ((g - 15 - sonicManager.windowLocation.x) * e.x), ((d - 20 - sonicManager.windowLocation.y + f) * e.y), m.width, m.height); if (this.spinDash) { c.drawImage(sonicManager.SpriteCache.sonicSprites[("spinsmoke" + Math.floor((sonicManager.drawTickCount % 14) / 2)) + e.x + e.y], ((g - 15 - sonicManager.windowLocation.x - 25) * e.x), ((d - 20 - sonicManager.windowLocation.y + f) * e.y), m.width, m.height) } } c.restore(); for (var h = 0; h < this.haltSmoke.length; h++) { var k = this.haltSmoke[h]; c.drawImage(sonicManager.SpriteCache.sonicSprites[("haltsmoke" + Math.floor((sonicManager.drawTickCount % (4 * 6)) / 6)) + e.x + e.y], ((k.x - sonicManager.windowLocation.x - 25) * e.x), ((k.y + 12 - sonicManager.windowLocation.y + f) * e.y)); if (Math.floor(((sonicManager.drawTickCount + 6) % (4 * 6)) / 6) == 0) { this.haltSmoke.splice(h, 1) } } } } else { if (m = sonicManager.SpriteCache.sonicSprites[this.spriteState]) { if (m.loaded) { sonicManager.SpriteCache.sonicSprites[this.spriteState + e.x + e.y] = _H.scaleSprite(m, e) } } else { sonicManager.SpriteCache.sonicSprites[this.spriteState] = _H.loadSprite(this.spriteLocations[this.spriteState]) } } }; this.runningDir = 0; this.kill = function () { }; this.pressJump = function () { if (!this.justHit) { this.jumping = true } }; this.pressCrouch = function () { if (!this.justHit) { this.crouching = true } }; this.pressLeft = function () { if (!this.justHit) { this.holdingLeft = true } }; this.pressRight = function () { if (!this.justHit) { this.holdingRight = true } }; this.releaseJump = function () { this.jumping = false }; this.releaseCrouch = function () { this.crouching = false }; this.releaseLeft = function () { this.holdingLeft = false }; this.releaseRight = function () { this.holdingRight = false }; this.buildHeightInfo = function () { this.LevelWidth = a.LevelWidth * 128; for (var p = 0; p < a.TileChunks.length; p++) { var q = a.TileChunks[p]; var h = q.heightMap1; var g = q.heightMap2; var f = q.heightBlocks1 = []; var d = q.heightBlocks2 = []; var n = []; f.length = 128 * 128; d.length = 128 * 128; n.length = 128 * 128; for (var m = 0; m < 8; m++) { for (var o = 0; o < 8; o++) { var l = h[o + m * 8]; var k = g[o + m * 8]; if (l == 0) { continue } var e; var c; if (l == 1) { for (c = 0; c < 16; c++) { for (e = 0; e < 16; e++) { var r = (o * 16 + e) + (m * 16 + c) * (128); f[r] = true; d[r] = true } } continue } l = l.items; k = k.items; for (c = 0; c < 16; c++) { for (e = 0; e < 16; e++) { var r = (o * 16 + e) + (m * 16 + c) * (128); f[r] = l[e] > 16 - c; d[r] = k[e] > 16 - c } } } } } }; this.buildHeightInfo(a) } SonicState = { Air: 0, Ground: 1 }; DEBUGs = true; window.requestAnimFrame = (function (a) { if (window.requestAnimationFrame) { return window.requestAnimationFrame(a) } if (window.webkitRequestAnimationFrame) { return window.webkitRequestAnimationFrame(a) } if (window.mozRequestAnimationFrame) { return window.mozRequestAnimationFrame(a) } if (window.oRequestAnimationFrame) { return window.oRequestAnimationFrame(a) } if (window.msRequestAnimationFrame) { return window.msRequestAnimationFrame(a) } window.setTimeout(a, 1000 / 60) }); function SonicEngine(a) { var g = this; this.canvas = $("#" + a); this.canvasItem = document.getElementById(a).getContext("2d"); var h = window.sonicManager = new SonicManager(this.canvasItem); this.canvasWidth = 0; this.canvasHeight = 0; document.getElementById(a).addEventListener("DOMMouseScroll", f, false); document.getElementById(a).addEventListener("mousewheel", f, false); document.getElementById(a).addEventListener("touchmove", d); document.getElementById(a).addEventListener("touchstart", b); document.getElementById(a).addEventListener("touchend", l); document.getElementById(a).addEventListener("mousedown", b); document.getElementById(a).addEventListener("mouseup", l); document.getElementById(a).addEventListener("mousemove", d); $(document).keydown(k); $(document).keyup(c); function b(m) { m.preventDefault(); if (h.uiManager.onClick(m)) { return false } if (h.onClick(m)) { return false } return false } function d(m) { m.preventDefault(); if (h.uiManager.onMouseMove(m)) { return false } return false } function l(m) { m.preventDefault(); h.uiManager.onMouseUp(m) } function f(m) { m.preventDefault(); if (h.uiManager.onMouseScroll(m)) { return false } return m.preventDefault() && false } function k(m) { switch (m.keyCode) { case 66: if (h.sonicToon) { h.sonicToon.hit() } break; case 67: if (h.sonicToon) { h.sonicToon.debug() } break; case 38: case 87: if (h.sonicToon) { h.sonicToon.pressJump() } else { h.windowLocation.y -= 128 } break; case 40: case 83: if (h.sonicToon) { h.sonicToon.pressCrouch() } else { h.windowLocation.y += 128 } break; case 37: case 65: h.windowLocation.x -= 128; if (h.sonicToon) { h.sonicToon.pressLeft() } else { h.windowLocation.x -= 128 } break; case 39: case 68: h.windowLocation.x += 128; if (h.sonicToon) { h.sonicToon.pressRight() } else { h.windowLocation.x += 128 } break } } function c(m) { switch (m.keyCode) { case 38: case 87: if (h.sonicToon) { h.sonicToon.releaseJump() } break; case 40: case 83: if (h.sonicToon) { h.sonicToon.releaseCrouch() } break; case 37: case 65: if (h.sonicToon) { h.sonicToon.releaseLeft() } break; case 39: case 68: if (h.sonicToon) { h.sonicToon.releaseRight() } break } } g.resizeCanvas = function () { g.canvasWidth = $(window).width(); g.canvasHeight = $(window).height(); g.canvas.attr("width", g.canvasWidth); g.canvas.attr("height", g.canvasHeight) }; function e(m) { m.clearRect(0, 0, g.canvasWidth, g.canvasHeight) } g.draw = function () { requestAnimFrame(g.draw); e(g.canvasItem); h.draw(g.canvasItem); h.uiManager.draw(g.canvasItem) }; $(window).resize(this.resizeCanvas); this.resizeCanvas(); requestAnimFrame(g.draw); window.setInterval(h.tick, 1000 / 60, h) } function SonicManager(b) { var c = this.scale = { x: 2, y: 2 }; this.windowLocation = _H.defaultWindowLocation(1); this.showHeightMap = false; this.goodRing = new Ring(false); this.activeRings = []; this.uiManager = new UIManager(this, b, this.scale); this.SonicLevel = { Tiles: [], TilePieces: [], TileChunks: [], ChunkMap: [], Rings: {}, curHeightMap: true, LevelWidth: 0, LevelHeight: 0 }; var a = new TileChunk() + new TilePiece() + new Tile() + new HeightMask(); this.SonicLevel.ChunkMap = []; this.clickState = ClickState.PlaceChunk; this.onClick = function (k) { if (k.shiftKey) { var g = this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[Math.floor(k.x / (128 * c.x)) + Math.floor(k.y / (128 * c.y)) * sonicManager.SonicLevel.LevelWidth]]; var m = g.getTilePiece((k.x - Math.floor(k.x / (128 * c.x)) * (128 * c.x)), (k.y - Math.floor(k.y / (128 * c.y)) * (128 * c.y)), c); if (m) { this.uiManager.indexes.tpIndex = this.SonicLevel.TilePieces.indexOf(m); this.uiManager.modifyTilePieceArea.tilePiece = m; this.uiManager.solidTileArea.visible = true } } else { if (!k.button || k.button == 0) { switch (this.clickState) { case ClickState.PlaceChunk: this.SonicLevel.ChunkMap[Math.floor(k.x / (128 * c.x)) + Math.floor(k.y / (128 * c.y)) * sonicManager.SonicLevel.LevelWidth] = this.uiManager.indexes.modifyIndex; break; case ClickState.PlaceRing: var f = Math.floor((k.x - Math.floor(k.x / (128 * c.x)) * (128 * c.x)) / (c.x)); var d = Math.floor((k.y - Math.floor(k.y / (128 * c.y)) * (128 * c.y)) / (c.y)); var l = (Math.floor(f / 16)) + (Math.floor(k.x / (128 * c.x))) * 8; var h = (Math.floor(d / 16)) + (Math.floor(k.y / (128 * c.y))) * 8; if (this.SonicLevel.Rings[h * 8 * sonicManager.SonicLevel.LevelWidth + l]) { delete this.SonicLevel.Rings[h * 8 * sonicManager.SonicLevel.LevelWidth + l] } else { this.SonicLevel.Rings[h * 8 * sonicManager.SonicLevel.LevelWidth + l] = { x: l, y: h} } break; default: } } } }; this.tickCount = 0; this.drawTickCount = 0; this.tick = function (d) { if (d.loading) { return } if (d.sonicToon) { d.tickCount++; d.sonicToon.tick(d.SonicLevel, c); if (d.sonicToon.y > 128 * sonicManager.SonicLevel.LevelHeight) { d.sonicToon.y = 0 } if (d.sonicToon.x > 128 * sonicManager.SonicLevel.LevelWidth) { d.sonicToon.x = 0 } } }; this.draw = function (g) { g.save(); this.drawTickCount++; if (this.loading) { g.fillStyle = "white"; g.fillText("Loading...   ", 95, 95); g.restore(); return } if (this.sonicToon) { g.translate(g.canvas.width / 2 - this.windowLocation.width * c.x / 2, g.canvas.height / 2 - this.windowLocation.height * c.y / 2); g.fillStyle = "#000000"; g.fillRect(0, 0, this.windowLocation.width * c.x, this.windowLocation.height * c.x); g.beginPath(); g.rect(0, 0, this.windowLocation.width * c.x, this.windowLocation.height * c.x); g.clip(); this.windowLocation.x = Math.floor(this.sonicToon.x - 160); this.windowLocation.y = Math.floor(this.sonicToon.y - 180) } if (this.windowLocation.x < 0) { this.windowLocation.x = 0 } if (this.windowLocation.y < 0) { this.windowLocation.y = 0 } if (this.windowLocation.x > 128 * sonicManager.SonicLevel.LevelWidth - this.windowLocation.width) { this.windowLocation.x = 128 * sonicManager.SonicLevel.LevelWidth - this.windowLocation.width } if (this.windowLocation.y > 128 * sonicManager.SonicLevel.LevelHeight - this.windowLocation.height) { this.windowLocation.y = 128 * sonicManager.SonicLevel.LevelHeight - this.windowLocation.height } for (var l = 0; l < this.SonicLevel.ChunkMap.length; l++) { if (!this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[l]]) { continue } var s = (l % sonicManager.SonicLevel.LevelWidth); var p = Math.floor(l / sonicManager.SonicLevel.LevelWidth); var t = { x: s * 128 * c.x, y: p * 128 * c.y }; if ((t.x >= (this.windowLocation.x - 128) * c.x && t.y >= (this.windowLocation.y - 128) * c.y && t.x <= (this.windowLocation.x + 128) * c.x + this.windowLocation.width * c.x && t.y <= (this.windowLocation.y + 128) * c.y + this.windowLocation.height * c.y)) { var h = { x: t.x - this.windowLocation.x * c.x, y: t.y - this.windowLocation.y * c.x }; this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[l]].draw(g, h, c, 0); if (!this.sonicToon) { g.strokeStyle = "#DD0033"; g.lineWidth = 3; g.strokeRect(h.x, h.y, 128 * c.x, 128 * c.y) } } } for (var k in this.SonicLevel.Rings) { var d = this.SonicLevel.Rings[k]; if (this.sonicToon) { if (!this.sonicToon.obtainedRing[k]) { this.goodRing.draw(g, { x: (d.x) * 16 - this.windowLocation.x, y: (d.y) * 16 - this.windowLocation.y }, c, true) } } else { this.goodRing.draw(g, { x: (d.x) * 16 - this.windowLocation.x, y: (d.y) * 16 - this.windowLocation.y }, c, false) } } for (var m = this.activeRings.length - 1; m >= 0; m--) { var v = this.activeRings[m]; v.draw(g, { x: v.x - this.windowLocation.x, y: v.y - this.windowLocation.y }, c); if (v.tickCount > 256) { _H.remove(this.activeRings, v) } } if (this.sonicToon) { this.sonicToon.draw(g, c); if (this.windowLocation.x < 0) { this.windowLocation.x = 0 } if (this.windowLocation.y < 0) { this.windowLocation.y = 0 } if (this.windowLocation.x > 128 * sonicManager.SonicLevel.LevelWidth - this.windowLocation.width) { this.windowLocation.x = 128 * sonicManager.SonicLevel.LevelWidth - this.windowLocation.width } if (this.windowLocation.y > 128 * sonicManager.SonicLevel.LevelHeight - this.windowLocation.height) { this.windowLocation.y = 128 * sonicManager.SonicLevel.LevelHeight - this.windowLocation.height } } for (var l = 0; l < this.SonicLevel.ChunkMap.length; l++) { if (!this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[l]]) { continue } var s = (l % sonicManager.SonicLevel.LevelWidth); var p = Math.floor(l / sonicManager.SonicLevel.LevelWidth); var t = { x: s * 128 * c.x, y: p * 128 * c.y }; if ((t.x >= (this.windowLocation.x - 128) * c.x && t.y >= (this.windowLocation.y - 128) * c.y && t.x <= (this.windowLocation.x + 128) * c.x + this.windowLocation.width * c.x && t.y <= (this.windowLocation.y + 128) * c.y + this.windowLocation.height * c.y)) { var h = { x: t.x - this.windowLocation.x * c.x, y: t.y - this.windowLocation.y * c.x }; var u = this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[l]]; u.draw(g, h, c, 1); if (this.showHeightMap) { var f; if ((f = sonicManager.SpriteCache.heightMapChunks[(this.SonicLevel.curHeightMap ? 1 : 2) + " " + u.index + " " + c.y + " " + c.x])) { if (f.loaded) { g.drawImage(f, h.x, h.y) } } else { var e = this.SonicLevel.curHeightMap ? u.heightMap1 : u.heightMap2; for (var o = 0; o < 8; o++) { for (var q = 0; q < 8; q++) { var n = e[q + o * 8]; if (n == 0) { continue } if (n == 1) { g.fillStyle = "rgba(24,98,235,0.6)"; g.fillRect(h.x + (q * 16) * c.x, h.y + (o * 16) * c.y, c.x * 16, c.y * 16); continue } n.draw(g, { x: h.x + (q * 16) * c.x, y: h.y + (o * 16) * c.y }, c, -1) } } } } if (!this.sonicToon) { g.strokeStyle = "#DD0033"; g.lineWidth = 3; g.strokeRect(h.x, h.y, 128 * c.x, 128 * c.y) } } } g.restore(); if (this.sonicToon) { this.sonicToon.drawUI(g, { x: 0, y: 0 }, c) } }; this.importChunkFromImage = function (r) { var z = _H.getImageData(r); if (z.length != 128 * 128 * 4) { alert("Chunk size incorrect") } var g = this.SonicLevel.Tiles.length; var w = []; var o; var m; var k = []; var p = []; var l; for (var q = 0; q < 16; q++) { for (var s = 0; s < 16; s++) { var n = []; for (m = 0; m < 8; m++) { for (o = 0; o < 8; o++) { var v = ((q * 8 + m) * 128) * 4 + (s * 8 + o) * 4; n.push(_H.colorFromData(z, v)) } } l = _H.compareTiles(this.SonicLevel.Tiles, w, n); if (l == -1) { k.push(g + w.length); w.push(new Tile(n)) } else { k.push(l) } } } var u; for (u = 0; u < w.length; u++) { this.SonicLevel.Tiles.push(w[u]) } var d = []; var t = this.SonicLevel.TilePieces.length; for (m = 0; m < 8; m++) { for (o = 0; o < 8; o++) { var e = [k[((m * 2) * 16 + (o * 2))], k[((m * 2) * 16 + (o * 2 + 1))], k[((m * 2 + 1) * 16 + (o * 2))], k[((m * 2 + 1) * 16 + (o * 2 + 1))]]; l = _H.compareTilePieces(this.SonicLevel.TilePieces, d, e); if (l == -1) { p.push(t + d.length); d.push(new TilePiece(e)) } else { p.push(l) } } } for (u = 0; u < d.length; u++) { this.SonicLevel.TilePieces.push(d[u]) } var h = []; for (m = 0; m < 8; m++) { for (o = 0; o < 8; o++) { h.push(p[m * 8 + o]) } } this.SonicLevel.TileChunks.push(new TileChunk(h)) }; this.SpriteCache = { rings: [], tileChunks: [], tilePeices: [], tiles: [], sonicSprites: [], heightMaps: [], heightMapChunks: [] }; this.preLoadSprites = function (f, l, g) { var q = this.SpriteCache.rings; var p = 0; var e = []; for (var h = 0; h < 4; h++) { e[h] = "assets/Sprites/ring" + h + ".png"; this.imageLength++ } var m = this; for (var k = 0; k < e.length; k++) { var d = k * 200; q[d] = _H.loadSprite(e[k], function (r) { q[r.tag * 200 + f.x * 100 + f.y] = _H.scaleSprite(r, f, function (s) { p = p + 1; if (p == 4) { m.loadingStepOne() } }) }); q[d].tag = k } var o; var n = { tps: 0, tcs: 0, ss: 0, hms: 0, hmc: 0 }; this.loadingStepOne = function () { g("preloading tiles"); var s = function () { n.tps++; if (n.tps == m.SonicLevel.TilePieces.length * 2) { m.loadingStepFour() } }; for (var t = 0; t < this.SonicLevel.TilePieces.length; t++) { var v = _H.defaultCanvas(16 * f.x, 16 * f.y); var r = v.context; r.clearRect(0, 0, v.width, v.height); o = this.SonicLevel.TilePieces[t]; o.draw(r, { x: 0, y: 0 }, f, 0); var u = v.canvas.toDataURL("image/png"); this.SpriteCache.tilePeices[0 + " " + o.index + " " + f.y + " " + f.x] = _H.loadSprite(u, s); v = _H.defaultCanvas(16 * f.x, 16 * f.y); r = v.context; r.clearRect(0, 0, v.width, v.height); o.draw(r, { x: 0, y: 0 }, f, 1); var u = v.canvas.toDataURL("image/png"); this.SpriteCache.tilePeices[1 + " " + o.index + " " + f.y + " " + f.x] = _H.loadSprite(u, s) } }; this.loadingStepFour = function () { g("preloading height masks"); var s = function () { n.hms++; if (n.hms == m.SonicLevel.heightIndexes.length) { m.loadingStepTwo() } }; for (var t = 0; t < this.SonicLevel.heightIndexes.length; t++) { var v = _H.defaultCanvas(16 * f.x, 16 * f.y); var r = v.context; r.clearRect(0, 0, v.width, v.height); o = this.SonicLevel.heightIndexes[t]; o.index = t; o.draw(r, { x: 0, y: 0 }, f, -1); var u = v.canvas.toDataURL("image/png"); this.SpriteCache.heightMaps[o.index + " " + f.y + " " + f.x] = _H.loadSprite(u, s) } }; this.loadingStepTwo = function () { g("preloading chunks"); var v = function () { if (n.tcs == m.SonicLevel.TileChunks.length * 2 && n.hmc == m.SonicLevel.TileChunks.length * 2) { m.loadingStepThree() } }; for (var u = 0; u < this.SonicLevel.TileChunks.length; u++) { var z = _H.defaultCanvas(128 * f.x, 128 * f.y); var A = z.context; A.clearRect(0, 0, z.width, z.height); o = this.SonicLevel.TileChunks[u]; o.draw(A, { x: 0, y: 0 }, f, 0); var s = z.canvas.toDataURL("image/png"); this.SpriteCache.tileChunks[0 + " " + o.index + " " + f.y + " " + f.x] = _H.loadSprite(s, function (B) { n.tcs++; v() }); z = _H.defaultCanvas(128 * f.x, 128 * f.y); A = z.context; A.clearRect(0, 0, z.width, z.height); o.draw(A, { x: 0, y: 0 }, f, 1); var s = z.canvas.toDataURL("image/png"); this.SpriteCache.tileChunks[1 + " " + o.index + " " + f.y + " " + f.x] = _H.loadSprite(s, function (B) { n.tcs++; v() }); var t = { x: 0, y: 0 }; z = _H.defaultCanvas(128 * f.x, 128 * f.y); A = z.context; A.clearRect(0, 0, z.width, z.height); var r = o.heightMap1; for (var x = 0; x < 8; x++) { for (var y = 0; y < 8; y++) { var w = r[y + x * 8]; if (w == 0) { continue } if (w == 1) { A.fillStyle = "rgba(24,98,235,0.6)"; A.fillRect(t.x + (y * 16) * f.x, t.y + (x * 16) * f.y, f.x * 16, f.y * 16); continue } w.draw(A, { x: t.x + (y * 16) * f.x, y: t.y + (x * 16) * f.y }, f, -1) } } var s = z.canvas.toDataURL("image/png"); this.SpriteCache.heightMapChunks[1 + " " + o.index + " " + f.y + " " + f.x] = _H.loadSprite(s, function (B) { n.hmc++; v() }); z = _H.defaultCanvas(128 * f.x, 128 * f.y); A = z.context; A.clearRect(0, 0, z.width, z.height); var r = o.heightMap2; for (var x = 0; x < 8; x++) { for (var y = 0; y < 8; y++) { var w = r[y + x * 8]; if (w == 0) { continue } if (w == 1) { A.fillStyle = "rgba(24,98,235,0.6)"; A.fillRect(t.x + (y * 16) * f.x, t.y + (x * 16) * f.y, f.x * 16, f.y * 16); continue } w.draw(A, { x: t.x + (y * 16) * f.x, y: t.y + (x * 16) * f.y }, f, -1) } } var s = z.canvas.toDataURL("image/png"); this.SpriteCache.heightMapChunks[2 + " " + o.index + " " + f.y + " " + f.x] = _H.loadSprite(s, function (B) { n.hmc++; v() }) } }; this.loadingStepThree = function () { g("preloading sonic"); this.spriteLocations = []; this.imageLength = 0; this.spriteLocations.normal = "assets/Sprites/sonic.png"; this.imageLength++; var r; for (r = 0; r < 4; r++) { this.spriteLocations["fastrunning" + r] = "assets/Sprites/fastrunning" + r + ".png"; this.imageLength++ } for (r = 0; r < 8; r++) { this.spriteLocations["running" + r] = "assets/Sprites/running" + r + ".png"; this.imageLength++ } for (r = 0; r < 4; r++) { this.spriteLocations["breaking" + r] = "assets/Sprites/breaking" + r + ".png"; this.imageLength++ } for (r = 0; r < 5; r++) { this.spriteLocations["balls" + r] = "assets/Sprites/balls" + r + ".png"; this.imageLength++ } for (r = 0; r < 2; r++) { this.spriteLocations["duck" + r] = "assets/Sprites/duck" + r + ".png"; this.imageLength++ } for (r = 0; r < 2; r++) { this.spriteLocations["hit" + r] = "assets/Sprites/hit" + r + ".png"; this.imageLength++ } for (r = 0; r < 6; r++) { this.spriteLocations["spindash" + r] = "assets/Sprites/spindash" + r + ".png"; this.imageLength++ } for (r = 0; r < 7; r++) { this.spriteLocations["spinsmoke" + r] = "assets/Sprites/spinsmoke" + r + ".png"; this.imageLength++ } for (r = 0; r < 4; r++) { this.spriteLocations["haltsmoke" + r] = "assets/Sprites/haltsmoke" + r + ".png"; this.imageLength++ } var s = this.SpriteCache.sonicSprites; for (var t in this.spriteLocations) { s[t] = _H.loadSprite(this.spriteLocations[t], function (u) { s[u.tag + f.x + f.y] = _H.scaleSprite(u, f, function (v) { n.ss++; if (n.ss == m.imageLength) { if (l) { l() } } }) }); s[t].tag = t } } } } ClickState = { PlaceChunk: 0, PlaceRing: 1 }; var Stats = function () { var I, P, y = 0, x = 0, H = Date.now(), v = H, w = H, E = 0, C = 1000, B = 0, L, G, K, O = [[16, 16, 48], [0, 255, 255]], D = 0, A = 1000, z = 0, M, F, J, N = [[16, 48, 16], [0, 255, 0]]; I = document.createElement("div"); I.style.cursor = "pointer"; I.style.width = "80px"; I.style.opacity = "0.9"; I.style.zIndex = "10001"; I.addEventListener("mousedown", function (b) { b.preventDefault(); y = (y + 1) % 2; 0 == y ? (L.style.display = "block", M.style.display = "none") : (L.style.display = "none", M.style.display = "block") }, !1); L = document.createElement("div"); L.style.textAlign = "left"; L.style.lineHeight = "1.2em"; L.style.backgroundColor = "rgb(" + Math.floor(O[0][0] / 2) + "," + Math.floor(O[0][1] / 2) + "," + Math.floor(O[0][2] / 2) + ")"; L.style.padding = "0 0 3px 3px"; I.appendChild(L); G = document.createElement("div"); G.style.fontFamily = "Helvetica, Arial, sans-serif"; G.style.fontSize = "9px"; G.style.color = "rgb(" + O[1][0] + "," + O[1][1] + "," + O[1][2] + ")"; G.style.fontWeight = "bold"; G.innerHTML = "FPS"; L.appendChild(G); K = document.createElement("div"); K.style.position = "relative"; K.style.width = "74px"; K.style.height = "30px"; K.style.backgroundColor = "rgb(" + O[1][0] + "," + O[1][1] + "," + O[1][2] + ")"; for (L.appendChild(K); 74 > K.children.length; ) { P = document.createElement("span"), P.style.width = "1px", P.style.height = "30px", P.style.cssFloat = "left", P.style.backgroundColor = "rgb(" + O[0][0] + "," + O[0][1] + "," + O[0][2] + ")", K.appendChild(P) } M = document.createElement("div"); M.style.textAlign = "left"; M.style.lineHeight = "1.2em"; M.style.backgroundColor = "rgb(" + Math.floor(N[0][0] / 2) + "," + Math.floor(N[0][1] / 2) + "," + Math.floor(N[0][2] / 2) + ")"; M.style.padding = "0 0 3px 3px"; M.style.display = "none"; I.appendChild(M); F = document.createElement("div"); F.style.fontFamily = "Helvetica, Arial, sans-serif"; F.style.fontSize = "9px"; F.style.color = "rgb(" + N[1][0] + "," + N[1][1] + "," + N[1][2] + ")"; F.style.fontWeight = "bold"; F.innerHTML = "MS"; M.appendChild(F); J = document.createElement("div"); J.style.position = "relative"; J.style.width = "74px"; J.style.height = "30px"; J.style.backgroundColor = "rgb(" + N[1][0] + "," + N[1][1] + "," + N[1][2] + ")"; for (M.appendChild(J); 74 > J.children.length; ) { P = document.createElement("span"), P.style.width = "1px", P.style.height = 30 * Math.random() + "px", P.style.cssFloat = "left", P.style.backgroundColor = "rgb(" + N[0][0] + "," + N[0][1] + "," + N[0][2] + ")", J.appendChild(P) } return { getDomElement: function () { return I }, getFps: function () { return E }, getFpsMin: function () { return C }, getFpsMax: function () { return B }, getMs: function () { return D }, getMsMin: function () { return A }, getMsMax: function () { return z }, update: function () { H = Date.now(); D = H - v; A = Math.min(A, D); z = Math.max(z, D); F.textContent = D + " MS (" + A + "-" + z + ")"; var b = Math.min(30, 30 - 30 * (D / 200)); J.appendChild(J.firstChild).style.height = b + "px"; v = H; x++; if (H > w + 1000) { E = Math.round(1000 * x / (H - w)), C = Math.min(C, E), B = Math.max(B, E), G.textContent = E + " FPS (" + C + "-" + B + ")", b = Math.min(30, 30 - 30 * (E / 100)), K.appendChild(K.firstChild).style.height = b + "px", w = H, x = 0 } } } }; function Tile(a) { this.colors = a; this.sprites = []; Tile.prototype.changeColor = function (b, d, c) { this.colors[d * 8 + b] = c; this.sprites = [] }; Tile.prototype.draw = function (c, k, h, f, g, e) { for (var d = 0; d < this.colors.length; d++) { var b = sonicManager.SonicLevel.pallet[this.colors[d]]; if (b == "000000") { continue } c.fillStyle = "#" + b; switch (f) { case 0: c.fillRect(k.x + ((d % 8)) * h.x, k.y + (Math.floor(d / 8)) * h.y, h.x, h.x); break; case 1: c.fillRect(k.x + (7 - (d % 8)) * h.x, k.y + (Math.floor(d / 8)) * h.y, h.x, h.x); break; case 2: c.fillRect(k.x + ((d % 8)) * h.x, k.y + (7 - Math.floor(d / 8)) * h.y, h.x, h.x); break; case 3: c.fillRect(k.x + (7 - (d % 8)) * h.x, k.y + (7 - Math.floor(d / 8)) * h.y, h.x, h.x); break } } if (g) { c.strokeStyle = "#DD0033"; c.lineWidth = 3; c.strokeRect(k.x, k.y, 8 * h.x, 8 * h.y) } }; Tile.prototype.equals = function (e) { for (var d = 0; d < this.colors.length; d++) { var b = e[d]; var f = this.colors[d]; if (b != f) { return false } } return true } } function TileChunk(a) { this.tilesPieces = a; this.hLayer = []; this.sprites = []; TileChunk.prototype.getTilePiece = function (b, d, c) { return sonicManager.SonicLevel.TilePieces[this.tilesPieces[Math.floor((b / c.x / 16)) + Math.floor((d / c.y / 16)) * 8]] }; TileChunk.prototype.draw = function (c, b, g, f) { var e; if ((e = sonicManager.SpriteCache.tileChunks[f + " " + this.index + " " + g.y + " " + g.x])) { if (e.loaded) { c.drawImage(e, b.x, b.y) } } else { for (var d = 0; d < this.tilesPieces.length; d++) { if (this.hLayer[d] == f) { sonicManager.SonicLevel.TilePieces[this.tilesPieces[d]].draw(c, { x: b.x + (d % 8) * 16 * g.x, y: b.y + Math.floor(d / 8) * 16 * g.y }, g, f) } } } return true } } function TilePiece(a, b) { this.tiles = b; TilePiece.prototype.click = function (c, e, d) { }; TilePiece.prototype.mouseOver = function (c, d) { }; TilePiece.prototype.draw = function (e, c, h, g) { var f; if ((f = sonicManager.SpriteCache.tilePeices[g + " " + this.index + " " + h.y + " " + h.x])) { if (f.loaded) { e.drawImage(f, c.x, c.y) } } else { for (i = 0; i < this.tiles.length; i++) { var d = this.tiles[i]; sonicManager.SonicLevel.TileData[d.TileIndex].draw(e, { x: c.x + (i % 2) * 8 * h.x, y: c.y + Math.floor(i / 2) * 8 * h.y }, h, d.State, false, g) } } return true }; TilePiece.prototype.equals = function (d) { for (var c = 0; c < this.tiles.length; c++) { if (d[c] != this.tiles[c]) { return false } } return true } } RotationMode = { Floor: 134, RightWall: 224, Ceiling: 314, LeftWall: 44 }; function UiArea(a, g, b, e, c, d) { this.x = a; this.y = g; this.manager = c; this.closable = d; this.width = b; this.height = e; this.depth = 0; this.visible = true; this.dragging = false; this.controls = []; this.addControl = function (h) { h.parent = this; this.controls.push(h); return h }; var f = this; if (d) { this.addControl(new Button(this.width - 30, 4, 26, 26, "X", this.manager.buttonFont, "Green", function () { f.visible = false })) } this.click = function (l) { if (!this.visible) { return } for (var h = 0; h < this.controls.length; h++) { var k = this.controls[h]; if (k.visible && k.y <= l.y && k.y + k.height > l.y && k.x <= l.x && k.x + k.width > l.x) { l.x -= k.x; l.y -= k.y; k.onClick(l); return false } } this.dragging = { x: l.x, y: l.y} }; this.mouseMove = function (l) { if (!this.visible) { return } if (!this.dragging) { for (var h = 0; h < this.controls.length; h++) { var k = this.controls[h]; if (k.visible && k.y <= l.y && k.y + k.height > l.y && k.x <= l.x && k.x + k.width > l.x) { l.x -= k.x; l.y -= k.y; k.onMouseOver(l) } } return } this.x += l.x - this.dragging.x; this.y += l.y - this.dragging.y }; this.mouseUp = function (l) { if (!this.visible) { return } for (var h = 0; h < this.controls.length; h++) { var k = this.controls[h]; k.onMouseUp({ x: l.x - k.x, y: l.y - k.y }) } this.dragging = false }; this.scroll = function (l) { if (!this.visible) { return } for (var h = 0; h < this.controls.length; h++) { var k = this.controls[h]; if (k.visible && k.y <= l.y && k.y + k.height > l.y && k.x <= l.x && k.x + k.width > l.x) { if (k.onScroll) { l.x -= k.x; l.y -= k.y; k.onScroll(l); return false } } } }; this.cachedDrawing = null; this.draw = function (q) { if (!this.visible) { return } var p; var n; var m; if (!this.cachedDrawing) { var o = document.createElement("canvas"); o.width = this.width + 20; o.height = this.height + 20; var k = o.getContext("2d"); k.fillStyle = "rgba(133,133,133,0.6)"; k.lineWidth = 9; k.strokeStyle = "#333"; var l = this.x; var h = this.y; this.x = 10; this.y = 10; roundRect(k, this.x, this.y, this.width, this.height, 5, true, true); for (m = 0; m < this.controls.length; m++) { n = this.controls[m]; p = n.forceDrawing(); if (p.redraw) { n.draw(k) } } this.x = l; this.y = h; this.cachedDrawing = _H.loadSprite(o.toDataURL("image/png")) } if (this.cachedDrawing.loaded) { q.drawImage(this.cachedDrawing, Math.floor(this.x), Math.floor(this.y)); for (m = 0; m < this.controls.length; m++) { n = this.controls[m]; p = n.forceDrawing(); if (!p.redraw) { n.draw(q) } if (p.clearCache) { this.cachedDrawing = null } } } else { q.fillStyle = "rgba(133,133,133,0.6)"; q.lineWidth = 9; q.strokeStyle = "#333"; roundRect(q, this.x + 10, this.y + 10, this.width, this.height, 5, true, true); for (m = 0; m < this.controls.length; m++) { n = this.controls[m]; n.draw(q) } } }; return this } function TextArea(a, e, d, c, b) { this.forceDrawing = function () { if (this.text == this.oldText) { return { redraw: true, clearCache: false} } this.oldText = this.text; return { redraw: true, clearCache: true} }; this.x = a; this.oldText = ""; this.y = e; this.visible = true; this.text = d; this.font = c; this.color = b; this.parent = null; this.onClick = function (f) { return false }; this.onMouseUp = function (f) { if (this.mouseUp) { this.mouseUp() } }; this.onMouseOver = function (f) { if (this.mouseOver) { this.mouseOver() } }; this.draw = function (m) { if (!this.visible) { return } var l = _H.isFunction(this.text) ? this.text() : this.text; if (m.font != this.font) { m.font = this.font } var f = m.measureText(l).width; var g = parseInt(m.font.split("pt")[0]); var k = 3; m.strokeStyle = this.color; m.shadowColor = "#FFF"; m.shadowBlur = 20; m.lineWidth = 1.5; m.strokeText(l, this.parent.x + this.x, this.parent.y + this.y); m.strokeText(l, this.parent.x + this.x, this.parent.y + this.y); m.strokeText(l, this.parent.x + this.x, this.parent.y + this.y); m.strokeText(l, this.parent.x + this.x, this.parent.y + this.y); m.strokeText(l, this.parent.x + this.x, this.parent.y + this.y); m.shadowBlur = 0 }; return this } function Button(g, f, a, k, h, c, d, l, e, b) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = g; this.y = f; this.visible = true; this.width = a; this.height = k; this.text = h; this.font = c; this.clicking = false; this.click = l; this.mouseUp = e; this.mouseOver = b; this.color = d; this.parent = null; this.onClick = function (m) { if (!this.visible) { return } this.clicking = true }; this.onMouseUp = function (m) { if (!this.visible) { return } if (this.clicking) { if (this.click) { this.click() } } this.clicking = false; if (this.mouseUp) { this.mouseUp() } }; this.onMouseOver = function (m) { if (!this.visible) { return } if (this.mouseOver) { this.mouseOver() } }; this.draw = function (m) { if (!this.visible) { return } m.fillStyle = this.color; m.strokeStyle = "#DAC333"; roundRect(m, this.parent.x + this.x, this.parent.y + this.y, this.width, this.height, 5, true, true); m.fillStyle = this.clicking ? "#FCA" : "#334"; if (m.font != this.font) { m.font = this.font } m.fillText(this.text, this.parent.x + this.x + ((this.width / 2) - (m.measureText(this.text).width / 2)), this.parent.y + this.y + (this.height / 3) * 2) }; return this } function TilePieceArea(a, e, c, d, b) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = a; this.y = e; this.visible = true; this.scale = c; this.width = c.x * 16; this.height = c.y * 17; this.clicking = false; this.tilePiece = d; this.parent = null; this.state = b; this.onClick = function (f) { if (!this.visible) { return } this.clicking = true; this.clickHandled = false }; this.onMouseUp = function (f) { if (!this.visible) { return } if (this.tilePiece && this.clicking && !this.clickHandled) { this.tilePiece.click(Math.floor(f.x / c.x), Math.floor(f.y / c.y), this.state) } this.clickHandled = false; this.clicking = false }; this.clickHandled = false; this.onMouseOver = function (f) { if (!this.tilePiece) { return } if (this.clicking) { this.clickHandled = true; this.tilePiece.click(Math.floor(f.x / c.x), Math.floor(f.y / c.y), this.state) } else { this.tilePiece.mouseOver(Math.floor(f.x / c.x), Math.floor(f.y / c.y)) } }; this.draw = function (f) { if (!this.visible) { return } if (!this.tilePiece) { return } this.tilePiece.tag = true; this.tilePiece.draw(f, { x: this.parent.x + this.x, y: this.parent.y + this.y }, this.scale, this.state, true); this.tilePiece.tag = false }; return this } function TileChunkArea(a, e, d, c, b) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = a; this.y = e; this.visible = true; this.scale = d; this.width = d.x * 128; this.height = d.y * 128; this.clicking = false; this.tileChunk = c; this.parent = null; this.state = b; this.setToTile = null; this.onClick = function (f) { if (!this.visible) { return } this.clicking = true }; this.onMouseUp = function (f) { if (!this.visible) { return } if (this.clicking) { if (this.setToTile != null) { this.tileChunk.tilesPieces[((Math.floor(f.x / this.scale.x / 16))) + (Math.floor(f.y / this.scale.y / 16)) * 8] = sonicManager.SonicLevel.TilePieces.indexOf(this.setToTile); this.tileChunk.sprites = [] } } this.clickHandled = false; this.clicking = false }; this.clickHandled = false; this.onMouseOver = function (f) { if (this.clicking) { } }; this.draw = function (f) { if (!this.visible) { return } if (!this.tileChunk) { return } this.tileChunk.draw(f, { x: this.parent.x + this.x, y: this.parent.y + this.y }, this.scale, true) }; return this } function ScrollBox(b, h, g, a, f, d, c) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = b; this.y = h; this.itemWidth = f; this.visible = true; var e = 14; this.width = f + e; this.visibleItems = a; this.itemHeight = g; this.backColor = d; this.height = a * g; this.parent = null; this.scrollOffset = 0; this.scrollPosition = 0; this.dragging = false; if (c) { this.controls = c } else { this.controls = [] } this.scrolling = false; this.addControl = function (k) { k.parent = this; this.controls.push(k); return k }; this.onClick = function (m) { if (!this.visible) { return } for (var k = this.scrollOffset; k < this.controls.length; k++) { var l = this.controls[k]; if (l.y <= m.y && l.y + l.height > m.y && l.x <= m.x && l.x + l.width > m.x) { m.x -= l.x; m.y -= l.y; l.onClick(m); return false } } if (m.x > this.itemWidth && m.x < this.itemWidth + e) { if (this.scrollPosition > m.y) { if (this.scrollOffset > 0) { this.scrollOffset-- } } else { if (this.scrollOffset < this.controls.length - this.visibleItems) { this.scrollOffset++ } } } this.dragging = true; return false }; this.onMouseUp = function (m) { if (!this.visible) { return } this.dragging = false; for (var k = this.scrollOffset; k < this.controls.length; k++) { var l = this.controls[k]; if (l.y <= m.y && l.y + l.height > m.y && l.x <= m.x && l.x + l.width > m.x) { m.x -= l.x; m.y -= l.y; l.onMouseUp(m); return false } } if (this.mouseUp) { this.mouseUp() } }; this.onMouseOver = function (m) { if (!this.visible) { return } for (var k = 0; k < this.controls.length; k++) { var l = this.controls[k]; if (l.y <= m.y && l.y + l.height > m.y && l.x <= m.x && l.x + l.width > m.x) { m.x -= l.x; m.y -= l.y; l.onMouseOver(m); break } } if (this.dragging && m.x > this.itemWidth && m.x < this.itemWidth + e) { if (this.scrollPosition > m.y) { if (this.scrollOffset > 0) { this.scrollOffset-- } } else { if (this.scrollOffset < this.controls.length - this.visibleItems) { this.scrollOffset++ } } } if (this.mouseOver) { this.mouseOver() } }; this.onScroll = function (m) { if (!this.visible) { return } if (m.delta > 0) { if (this.scrollOffset > 0) { this.scrollOffset-- } } else { if (this.scrollOffset < this.controls.length - this.visibleItems) { this.scrollOffset++ } } for (var k = 0; k < this.controls.length; k++) { var l = this.controls[k]; if (l.y <= m.y && l.y + l.height > m.y && l.x <= m.x && l.x + l.width > m.x) { m.x -= l.x; m.y -= l.y; if (l.onScroll) { l.onScroll(m) } return false } } if (this.scroll) { this.scroll() } }; this.draw = function (m) { if (!this.visible) { return } m.fillStyle = this.backColor; var l; m.fillStyle = this.backColor; m.lineWidth = 1; m.strokeStyle = "#333"; roundRect(m, this.parent.x + this.x, this.parent.y + this.y, this.itemWidth + e + 6, this.visibleItems * this.itemHeight, 3, true, true); m.fillStyle = "grey"; m.lineWidth = 1; m.strokeStyle = "#444"; m.fillRect(this.parent.x + this.x + this.itemWidth + 2 + 2, this.parent.y + this.y + 2, e, this.visibleItems * this.itemHeight - 2); m.fillStyle = "red"; m.lineWidth = 1; m.strokeStyle = "#444"; this.scrollPosition = (this.visibleItems * this.itemHeight - 2) * this.scrollOffset / this.controls.length; m.fillRect(this.parent.x + this.x + this.itemWidth + 2 + 2 + 2, this.parent.y + this.y + 2 + (this.scrollPosition), e - 2, 5); var k = 1; for (l = this.scrollOffset; l < Math.min(this.controls.length, this.scrollOffset + this.visibleItems); l++) { this.controls[l].parent = { x: this.parent.x + this.x, y: this.parent.y + this.y }; this.controls[l].x = 2; this.controls[l].y = k; this.controls[l].height = this.itemHeight; this.controls[l].width = this.itemWidth; k += this.itemHeight; this.controls[l].draw(m) } }; return this } function roundRect(d, c, h, e, b, a, g, f) { if (typeof f == "undefined") { f = true } if (typeof a === "undefined") { a = 5 } d.beginPath(); d.moveTo(c + a, h); d.lineTo(c + e - a, h); d.quadraticCurveTo(c + e, h, c + e, h + a); d.lineTo(c + e, h + b - a); d.quadraticCurveTo(c + e, h + b, c + e - a, h + b); d.lineTo(c + a, h + b); d.quadraticCurveTo(c, h + b, c, h + b - a); d.lineTo(c, h + a); d.quadraticCurveTo(c, h, c + a, h); d.closePath(); if (f) { d.stroke() } if (g) { d.fill() } } function UIManager(b, p, u) { this.UIAreas = []; this.messages = []; var m = this.textFont = "18pt sans-serrif "; var e = this.buttonFont = "13pt Arial bold"; p.font = m; var h = this.indexes = { tpIndex: 0, modifyIndex: 0, modifyTPIndex: 0 }; this.draw = function (y) { y.save(); var w = JSLINQ(this.UIAreas).OrderBy(function (B) { return B.depth }); for (var A = 0; A < w.items.length; A++) { var x = w.items[A]; x.draw(y) } if (DEBUGs) { for (var z = 0; z < this.messages.length; z++) { y.fillText(this.messages[z], 10, 25 + z * 30) } } y.restore() }; this.onMouseScroll = function (w) { var z = w.wheelDelta ? w.wheelDelta / 40 : w.detail ? -w.detail : 0; for (var y = 0; y < this.UIAreas.length; y++) { var x = this.UIAreas[y]; if (x.visible && x.y <= w.y && x.y + x.height > w.y && x.x <= w.x && x.x + x.width > w.x) { w = { x: w.x - x.x, y: w.y - x.y, delta: z }; return x.scroll(w) } } return false }; this.onClick = function (A) { var w = _H.getCursorPosition(A); var B = null; var x; var z; for (z = 0; z < this.UIAreas.length; z++) { x = this.UIAreas[z]; if (x.visible && x.y <= w.y && x.y + x.height > w.y && x.x <= w.x && x.x + x.width > w.x) { B = x; var y = { x: w.x - x.x, y: w.y - x.y }; x.click(y) } } if (B) { for (z = 0; z < this.UIAreas.length; z++) { x = this.UIAreas[z]; if (B == x) { x.depth = 1 } else { x.depth = 0 } } return true } return false }; this.onMouseMove = function (A) { var w = _H.getCursorPosition(A); var x = JSLINQ(this.UIAreas).OrderBy(function (B) { return -B.depth }); for (var z = 0; z < x.items.length; z++) { var y = x.items[z]; if (y.dragging || (y.visible && y.y <= w.y && y.y + y.height > w.y && y.x <= w.x && y.x + y.width > w.x)) { w = { x: w.x - y.x, y: w.y - y.y }; return y.mouseMove(w) } } return false }; this.onMouseUp = function (A) { var w = _H.getCursorPosition(A, true); for (var z = 0; z < this.UIAreas.length; z++) { var x = this.UIAreas[z]; var y = { x: w.x - x.x, y: w.y - x.y }; x.mouseUp(y) } }; var n = this.debuggerArea = new UiArea(1347, 95, 200, 240, this, true); n.visible = false; this.UIAreas.push(n); n.addControl(new TextArea(30, 25, "Debugger", m, "blue")); n.addControl(new Button(40, 60, 60, 22, "Stop", e, "rgb(50,150,50)", function () { b.windowLocation = _H.defaultWindowLocation(1); n.visible = false; l.visible = false; o.visible = true; s.visible = true; b.sonicToon = null })); n.addControl(new Button(40, 95, 90, 22, "Hit Sonic", e, "rgb(50,150,50)", function () { b.sonicToon.hit() })); n.addControl(new Button(40, 130, 160, 22, "Show Height Map", e, "rgb(50,150,50)", function () { if (this.text == "Show Height Map") { b.showHeightMap = true; this.text = "Hide Height Map" } else { b.showHeightMap = false; this.text = "Show Height Map" } })); n.addControl(new Button(40, 160, 160, 22, "Switch Height Map", e, "rgb(50,150,50)", function () { b.SonicLevel.curHeightMap = !b.SonicLevel.curHeightMap })); n.addControl(new Button(40, 190, 160, 22, "Debug Sonic", e, "rgb(50,150,50)", function () { if (this.text == "Debug Sonic") { b.sonicToon.debugging = true; this.text = "Normal Sonic" } else { b.sonicToon.debugging = false; this.text = "Debug Sonic" } })); var l = this.solidTileArea = new UiArea(40, 450, 430, 400, this, true); l.visible = false; this.UIAreas.push(l); l.addControl(new TextArea(30, 25, "Modify Solid Tile", m, "blue")); l.addControl(new Button(50, 35, 25, 22, "<<", e, "rgb(50,150,50)", function () { if (h.tpIndex > 0) { c.tilePiece = b.SonicLevel.TilePieces[--h.tpIndex] } })); l.addControl(new Button(75, 35, 25, 22, ">>", e, "rgb(50,150,50)", function () { if (h.tpIndex < b.SonicLevel.TilePieces.length) { c.tilePiece = b.SonicLevel.TilePieces[++h.tpIndex] } })); l.addControl(new Button(360, 80, 45, 22, "Full", e, "rgb(50,150,50)", function () { for (var w = 0; w < 16; w++) { c.tilePiece.heightMask.items[w] = 16 } this.sprites = [] })); l.addControl(new Button(200, 35, 180, 22, "Modify Height Map", e, "rgb(50,150,50)", function () { c.state = (c.state + 1) % 3; switch (c.state) { case 0: this.text = "Modify Height Map"; break; case 1: this.text = "Modify Tile Direction"; break; case 2: this.text = "Modify Tile Colors"; break } })); var c = this.modifyTilePieceArea = new TilePieceArea(30, 70, { x: 4 * 5, y: 4 * 5 }, null, 0); l.addControl(c); var o = this.levelInformation = new UiArea(500, 440, 420, 360, this); o.visible = true; this.UIAreas.push(o); o.addControl(new TextArea(30, 25, "Level Selector", m, "blue")); o.addControl(new TextArea(30, 52, function () { return !f ? "Level Not Saved" : ("Current Level: " + f) }, m, "black")); o.addControl(new Button(190, 70, 100, 22, "Save Level", e, "rgb(50,150,50)", function () { if (f) { OurSonic.SonicLevels.SaveLevelInformation(f, Base64.encode(_H.stringify(b.SonicLevel)), function (w) { }, function (w) { alert("Failure: " + _H.stringify(w)) }) } else { OurSonic.SonicLevels.saveLevel(Base64.encode(_H.stringify(b.SonicLevel)), function (w) { r(f) }) } })); o.addControl(new Button(190, 105, 160, 22, "Load Empty Level", e, "rgb(50,150,50)", function () { s.visible = true; k.visible = true; var w = 0; var x = function () { var y = 188; if (w == y) { setTimeout(function () { alert(_H.stringify(b.SonicLevel)); a(_H.stringify(b.SonicLevel), p); k.visible = false }, 500); return } setTimeout(x, 100); _H.loadSprite("assets/TileChunks/Tile" + w++ + ".png", function (z) { k.text = "Loading " + w + "/" + y; b.importChunkFromImage(z); if (w == y) { b.inds = { done: true} } }) }; setTimeout(x, 100) })); var g; o.addControl(g = new ScrollBox(30, 70, 25, 11, 130, "rgb(50,60,127)")); var f; OurSonic.SonicLevels.getLevels(function (y) { for (var x = 0; x < y.length; x++) { var w = y[x]; r(w) } }); function r(w) { var x; g.addControl(x = new Button(0, 0, 0, 0, w, "10pt Arial", "rgb(50,190,90)", function () { f = "Downloading"; OurSonic.SonicLevels.getLevel(w, function (y) { f = "loading"; f = w; a(y, p) }) })) } var s = this.levelManagerArea = new UiArea(500, 25, 400, 400, this); s.visible = false; this.UIAreas.push(s); s.addControl(new TextArea(30, 25, "Level Manager", m, "blue")); var k; s.addControl(k = new TextArea(270, 25, "Loading", m, "green")); k.visible = false; s.addControl(new Button(35, 100, 160, 22, "Show Height Map", e, "rgb(50,150,50)", function () { if (this.text == "Show Height Map") { b.showHeightMap = true; this.text = "Hide Height Map" } else { b.showHeightMap = false; this.text = "Show Height Map" } })); s.addControl(new Button(200, 150, 160, 22, "Place Chunks", e, "rgb(50,150,50)", function () { b.clickState = (b.clickState + 1) % 2; switch (b.clickState) { case ClickState.PlaceChunk: this.text = "Place Chunks"; break; case ClickState.PlaceRing: this.text = "Place Rings"; break } })); s.addControl(new Button(200, 180, 160, 22, "Switch Height Map", e, "rgb(50,150,50)", function () { b.SonicLevel.curHeightMap = !b.SonicLevel.curHeightMap })); s.addControl(new Button(35, 150, 160, 22, "Modify Chunks", e, "rgb(50,150,50)", function () { t.visible = true })); s.addControl(new Button(35, 150, 160, 22, "Modify Chunks", e, "rgb(50,150,50)", function () { t.visible = true })); s.addControl(new Button(35, 175, 160, 22, "Modify Tile Pieces", e, "rgb(50,150,50)", function () { l.visible = true })); s.addControl(new Button(35, 200, 160, 22, "Modify Tiles", e, "rgb(50,150,50)", function () { v.visible = true })); s.addControl(new Button(200, 35, 60, 22, "Run", e, "rgb(50,150,50)", function () { s.visible = false; l.visible = false; o.visible = false; v.visible = false; t.visible = false; l.visible = false; n.visible = true; b.windowLocation = _H.defaultWindowLocation(0); b.sonicToon = new Sonic(b.SonicLevel, b.scale) })); var t = this.modifyTileChunkArea = new UiArea(900, 450, 400, 400, this, true); t.visible = false; this.UIAreas.push(t); t.addControl(new TextArea(30, 25, "Modify Tile Chunk", m, "blue")); var d = this.modifyTC = new TileChunkArea(30, 70, { x: 2, y: 2 }, null, 1); t.addControl(d); t.addControl(new Button(50, 35, 25, 22, "<<", e, "rgb(50,150,50)", function () { if (h.modifyIndex > 0) { d.tileChunk = b.SonicLevel.TileChunks[--h.modifyIndex] } })); t.addControl(new Button(80, 35, 25, 22, ">>", e, "rgb(50,150,50)", function () { if (h.modifyIndex < b.SonicLevel.TileChunks.length) { d.tileChunk = b.SonicLevel.TileChunks[++h.modifyIndex] } })); var q = this.modifyTP = new TilePieceArea(300, 160, { x: 2 * 3, y: 2 * 3 }, null, 3); t.addControl(q); t.addControl(new Button(300, 100, 25, 22, "<<", e, "rgb(50,150,50)", function () { if (h.modifyTPIndex > 0) { q.tilePiece = d.setToTile = b.SonicLevel.TilePieces[--h.modifyTPIndex] } })); t.addControl(new Button(330, 100, 25, 22, ">>", e, "rgb(50,150,50)", function () { if (h.modifyTPIndex < b.SonicLevel.TilePieces.length) { q.tilePiece = d.setToTile = b.SonicLevel.TilePieces[++h.modifyTPIndex] } })); var v = this.modifyTileArea = new UiArea(900, 25, 400, 400, this, true); v.visible = false; this.UIAreas.push(v); v.addControl(new TextArea(30, 25, "Modify Tile", m, "blue")); function a(G, F) { s.visible = true; b.loading = true; b.SonicLevel = jQuery.parseJSON(G); var y; var C; if (!b.SonicLevel.TileChunks) { b.SonicLevel.TileChunks = [] } if (!b.SonicLevel.TilePieces) { b.SonicLevel.TilePieces = [] } if (!b.SonicLevel.TileData) { b.SonicLevel.TileData = [] } if (!b.SonicLevel.Rings) { b.SonicLevel.Rings = {} } b.SonicLevel.curHeightMap = true; var x; var H; for (var D = 0; D < b.SonicLevel.heightIndexes.length; D++) { var z = []; if (b.SonicLevel.heightIndexes[D] == "0000000000000000") { b.SonicLevel.heightIndexes[D] = 0; continue } if (b.SonicLevel.heightIndexes[D] == "gggggggggggggggg") { b.SonicLevel.heightIndexes[D] = 1; continue } for (var B = 1; B < 17; B++) { z[B - 1] = _H.parseNumber(b.SonicLevel.heightIndexes[D][B]) } var w = parseInt(b.SonicLevel.heightIndexes[D][0]); switch (w) { case 0: w = RotationMode.Floor; break; case 1: w = RotationMode.RightWall; break; case 2: w = RotationMode.Ceiling; break; case 3: w = RotationMode.LeftWall; break; default: } b.SonicLevel.heightIndexes[D] = new HeightMask(w, 0, z) } for (C = 0; C < b.SonicLevel.TileChunks.length; C++) { y = b.SonicLevel.TileChunks[C]; y.__proto__ = TileChunk.prototype; y.index = C; for (H = 0; H < y.heightMap1.length; H++) { x = y.heightMap1[H]; y.heightMap1[H] = b.SonicLevel.heightIndexes[x] } for (H = 0; H < y.heightMap2.length; H++) { x = y.heightMap2[H]; y.heightMap2[H] = b.SonicLevel.heightIndexes[x] } } for (C = 0; C < b.SonicLevel.TilePieces.length; C++) { y = b.SonicLevel.TilePieces[C]; y.__proto__ = TilePiece.prototype; y.index = C } for (C = 0; C < b.SonicLevel.TileData.length; C++) { y = b.SonicLevel.TileData[C]; y.__proto__ = Tile.prototype; y.index = C } var A = function () { E.done = true; b.loading = false; d.tileChunk = b.SonicLevel.TileChunks[0]; c.tilePiece = q.tilePiece = b.SonicLevel.TilePieces[0] }; var E = b.inds = { r: 0, t: 0, tp: 0, tc: 0, total: (b.SonicLevel.TileChunks.length * 2 + b.SonicLevel.TilePieces.length * 5 + b.SonicLevel.TileData.length), done: false }; f = "preloading sprites"; b.preLoadSprites(u, function () { E.r = 1; A(); f = "level loaded" }, function (I) { f = I }) } };