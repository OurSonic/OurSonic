function Color(d, c, a) { this.r = d; this.g = c; this.b = a; if (d != undefined) { this._style = "#" + (d.toString(16).length == 1 ? "0" + d.toString(16) : d.toString(16)) + (c.toString(16).length == 1 ? "0" + c.toString(16) : c.toString(16)) + (a.toString(16).length == 1 ? "0" + a.toString(16) : a.toString(16)) } Color.prototype.style = function () { return this._style }; Color.prototype.setData = function (e, b) { e[b] = this.r; e[b + 1] = this.g; e[b + 2] = this.b; e[b + 3] = 255 }; Color.prototype.equals = function (b) { return b.r == this.r && b.g == this.g && b.b == this.b } } function HeightMask(c, d, a) { this.width = 16; this.height = 16; this.angle = d; this.items = a ? a : []; this.rotationMode = c; for (var b = 0; b < 16; b++) { this.items[b] = 0 } HeightMask.prototype.setItem = function (e, h) { var g = 0, f = 0; switch (this.rotationMode) { case RotationMode.Ground: g = e; f = h; break; case RotationMode.Right: g = h; f = e; break; case RotationMode.Ceiling: g = e; f = 15 - h; break; case RotationMode.Left: g = h; f = 15 - e; break; default: } this.items[g] = 16 - f }; HeightMask.prototype.draw = function (f, j, g, e) { if (e == 3) { return } for (var l = 0; l < 16; l++) { for (var k = 0; k < 16; k++) { var n = 0, m = 0; switch (this.rotationMode) { case RotationMode.Ground: n = l; m = k; break; case RotationMode.Right: n = k; m = l; break; case RotationMode.Ceiling: n = l; m = 15 - k; break; case RotationMode.Left: n = 15 - k; m = l; break; default: } var i = j.x + (n * g.x); var h = j.y + (m * g.y); f.lineWidth = 1; if (e <= 0 && this.items[l] >= 16 - k) { f.fillStyle = "rgba(24,98,235,0.6)"; f.fillRect(i, h, g.x, g.y) } else { if (e != -1) { f.strokeStyle = "#0C3146"; f.strokeRect(i, h, g.x, g.y) } } } } } } window._H = { loadSprite: function (b, a) { var c = new Image(); c.onload = function () { c.loaded = true; if (a) { a(c) } }; c.src = b; return c }, defaultCanvas: function () { var b = document.createElement("canvas"); var a = b.getContext("2d"); return { canvas: b, context: a} }, intersectRect: function (b, a) { return !(a.left > b.right || a.right < b.left || a.top > b.bottom || a.bottom < b.top) }, remove: function (a, c) { var b = -1; while ((b = a.indexOf(c)) > -1) { a.splice(b, 1) } }, scaleSprite: function (c, i, b) { var g = _H.getImageData(c); var a = []; for (var e = 0; e < g.length; e += 4) { a.push(new Color(g[e], g[e + 1], g[e + 2])) } var h = this.defaultCanvas().context.createImageData(c.width * i.x, c.height * i.y); _H.setDataFromColors(h.data, a, i, c.width, new Color(0, 0, 0)); return _H.loadSprite(_H.getBase64Image(h), b) }, getCursorPosition: function (b, a) { if (b.targetTouches && b.targetTouches.length > 0) { b = b.targetTouches[0] } if (b.pageX != null && b.pageY != null) { return { x: b.pageX, y: b.pageY} } if (b.x != null && b.y != null) { return { x: b.x, y: b.y} } return { x: b.clientX, y: b.clientY} }, setDataFromColors: function (l, a, f, d, q) { for (var m = 0; m < a.length; m++) { var e = (m % d); var b = Math.floor(m / d); for (var h = 0; h < f.x; h++) { for (var g = 0; g < f.y; g++) { var p = (e * f.x + h); var o = (b * f.y + g); var n = (p + o * (f.x * d)) * 4; a[m].setData(l, n); if (q) { if (a[m].equals(q)) { l[n + 3] = 0 } } } } } }, getImageData: function (b) { var c = document.createElement("canvas"); c.width = b.width; c.height = b.height; var a = c.getContext("2d"); a.drawImage(b, 0, 0); var d = a.getImageData(0, 0, b.width, b.height); return d.data }, getBase64Image: function (c) { var b = document.createElement("canvas"); b.width = c.width; b.height = c.height; var a = b.getContext("2d"); a.putImageData(c, 0, 0); var d = b.toDataURL("image/png"); return d }, isFunction: function (a) { var b = {}; return a && b.toString.call(a) == "[object Function]" }, detect: function (c, a) { for (var b in c) { if (typeof (c[b]) == "object") { if (a[c[b]]) { alert("circ") } a[c[b]] = true; this.detect(c[b], a) } } }, stringify: function (e, g) { return JSON.stringify(e, function (h, i) { if (h == "imageData") { return undefined } if (h == "oldScale") { return undefined } if (h == "sprite") { return undefined } if (h == "sprites") { return undefined } else { return i } }); if (g > 0) { return "" } if (!g) { g = 0 } var d = typeof (e); if (d != "object" || e === null) { if (d == "string") { e = '"' + e + '"' } return String(e) } else { var f, b, c = [], a = (e && e.constructor == Array); for (f in e) { b = e[f]; d = typeof (b); if (d == "string") { b = '"' + b + '"' } else { if (d == "object" && b !== null) { b = stringify(b, g + 1) } } c.push((a ? "" : '"' + f + '":') + String(b)) } return (a ? "[" : "{") + String(c) + (a ? "]" : "}") } }, compareTiles: function (c, a, b) { var d; for (d = 0; d < c.length; d++) { if (c[d].equals(b)) { return d } } for (d = 0; d < a.length; d++) { if (a[d].equals(b)) { return c.length + d } } return -1 }, compareTilePieces: function (c, b, d) { var a; for (a = 0; a < c.length; a++) { if (c[a].equals(d)) { return a } } for (a = 0; a < b.length; a++) { if (b[a].equals(d)) { return c.length + a } } return -1 } }; window.Base64 = { _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", encode: function (c) { var a = ""; var k, h, f, j, g, e, d; var b = 0; c = Base64._utf8_encode(c); while (b < c.length) { k = c.charCodeAt(b++); h = c.charCodeAt(b++); f = c.charCodeAt(b++); j = k >> 2; g = ((k & 3) << 4) | (h >> 4); e = ((h & 15) << 2) | (f >> 6); d = f & 63; if (isNaN(h)) { e = d = 64 } else { if (isNaN(f)) { d = 64 } } a = a + this._keyStr.charAt(j) + this._keyStr.charAt(g) + this._keyStr.charAt(e) + this._keyStr.charAt(d) } return a }, decode: function (c) { var a = ""; var k, h, f; var j, g, e, d; var b = 0; c = c.replace(/[^A-Za-z0-9\+\/\=]/g, ""); while (b < c.length) { j = this._keyStr.indexOf(c.charAt(b++)); g = this._keyStr.indexOf(c.charAt(b++)); e = this._keyStr.indexOf(c.charAt(b++)); d = this._keyStr.indexOf(c.charAt(b++)); k = (j << 2) | (g >> 4); h = ((g & 15) << 4) | (e >> 2); f = ((e & 3) << 6) | d; a = a + String.fromCharCode(k); if (e != 64) { a = a + String.fromCharCode(h) } if (d != 64) { a = a + String.fromCharCode(f) } } a = Base64._utf8_decode(a); return a }, _utf8_encode: function (b) { b = b.replace(/\r\n/g, "\n"); var a = ""; for (var e = 0; e < b.length; e++) { var d = b.charCodeAt(e); if (d < 128) { a += String.fromCharCode(d) } else { if ((d > 127) && (d < 2048)) { a += String.fromCharCode((d >> 6) | 192); a += String.fromCharCode((d & 63) | 128) } else { a += String.fromCharCode((d >> 12) | 224); a += String.fromCharCode(((d >> 6) & 63) | 128); a += String.fromCharCode((d & 63) | 128) } } } return a }, _utf8_decode: function (a) { var b = ""; var d = 0; var e = c1 = c2 = 0; while (d < a.length) { e = a.charCodeAt(d); if (e < 128) { b += String.fromCharCode(e); d++ } else { if ((e > 191) && (e < 224)) { c2 = a.charCodeAt(d + 1); b += String.fromCharCode(((e & 31) << 6) | (c2 & 63)); d += 2 } else { c2 = a.charCodeAt(d + 1); c3 = a.charCodeAt(d + 2); b += String.fromCharCode(((e & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)); d += 3 } } } return b } }; (function () { JSLINQ = window.JSLINQ = function (a) { return new JSLINQ.fn.init(a) }; JSLINQ.fn = JSLINQ.prototype = { init: function (a) { this.items = a }, jslinq: "2.10", ToArray: function () { return this.items }, Where: function (d) { var c; var a = new Array(); for (var b = 0; b < this.items.length; b++) { if (d(this.items[b], b)) { a[a.length] = this.items[b] } } return new JSLINQ(a) }, Select: function (d) { var c; var a = new Array(); for (var b = 0; b < this.items.length; b++) { if (d(this.items[b])) { a[a.length] = d(this.items[b]) } } return new JSLINQ(a) }, OrderBy: function (c) { var b = new Array(); for (var a = 0; a < this.items.length; a++) { b[b.length] = this.items[a] } return new JSLINQ(b.sort(function (f, e) { var d = c(f); var g = c(e); return ((d < g) ? -1 : ((d > g) ? 1 : 0)) })) }, OrderByDescending: function (c) { var b = new Array(); for (var a = 0; a < this.items.length; a++) { b[b.length] = this.items[a] } return new JSLINQ(b.sort(function (f, e) { var d = c(e); var g = c(f); return ((d < g) ? -1 : ((d > g) ? 1 : 0)) })) }, SelectMany: function (c) { var b = new Array(); for (var a = 0; a < this.items.length; a++) { b = b.concat(c(this.items[a])) } return new JSLINQ(b) }, Count: function (a) { if (a == null) { return this.items.length } else { return this.Where(a).items.length } }, Distinct: function (d) { var b; var e = new Object(); var c = new Array(); for (var a = 0; a < this.items.length; a++) { b = d(this.items[a]); if (e[b] == null) { e[b] = true; c[c.length] = b } } e = null; return new JSLINQ(c) }, Any: function (b) { for (var a = 0; a < this.items.length; a++) { if (b(this.items[a], a)) { return true } } return false }, All: function (b) { for (var a = 0; a < this.items.length; a++) { if (!b(this.items[a], a)) { return false } } return true }, Reverse: function () { var b = new Array(); for (var a = this.items.length - 1; a > -1; a--) { b[b.length] = this.items[a] } return new JSLINQ(b) }, First: function (a) { if (a != null) { return this.Where(a).First() } else { if (this.items.length > 0) { return this.items[0] } else { return null } } }, Last: function (a) { if (a != null) { return this.Where(a).Last() } else { if (this.items.length > 0) { return this.items[this.items.length - 1] } else { return null } } }, ElementAt: function (a) { return this.items[a] }, Concat: function (b) { var a = b.items || b; return new JSLINQ(this.items.concat(a)) }, Intersect: function (g, i) { var h; if (i != undefined) { h = i } else { h = function (j, b, a, k) { return j == a } } var e = g.items || g; var d = new Array(); for (var f = 0; f < this.items.length; f++) { for (var c = 0; c < e.length; c++) { if (h(this.items[f], f, e[c], c)) { d[d.length] = this.items[f] } } } return new JSLINQ(d) }, DefaultIfEmpty: function (a) { if (this.items.length == 0) { return a } return this }, ElementAtOrDefault: function (b, a) { if (b >= 0 && b < this.items.length) { return this.items[b] } return a }, FirstOrDefault: function (a) { return this.First() || a }, LastOrDefault: function (a) { return this.Last() || a } }; JSLINQ.fn.init.prototype = JSLINQ.fn })(); jQuery.fn.rotate = function (h, c) { var g = this.get(0); if (!c) { g.angle = ((g.angle == undefined ? 0 : g.angle) + h) % 360 } else { g.angle = h } var e; if (g.angle >= 0) { e = Math.PI * g.angle / 180 } else { e = Math.PI * (360 + g.angle) / 180 } var a = Math.cos(e); var f = Math.sin(e); if (document.all && !window.opera) { var b = document.createElement("img"); b.src = g.src; b.height = g.height; b.width = g.width; b.style.filter = "progid:DXImageTransform.Microsoft.Matrix(M11=" + a + ",M12=" + (-f) + ",M21=" + f + ",M22=" + a + ",SizingMethod='auto expand')" } else { var b = document.createElement("canvas"); if (!g.oImage) { b.oImage = new Image(); b.oImage.src = g.src } else { b.oImage = g.oImage } b.style.width = b.width = Math.abs(a * b.oImage.width) + Math.abs(f * b.oImage.height); b.style.height = b.height = Math.abs(a * b.oImage.height) + Math.abs(f * b.oImage.width); var d = b.getContext("2d"); d.save(); if (e <= Math.PI / 2) { d.translate(f * b.oImage.height, 0) } else { if (e <= Math.PI) { d.translate(b.width, -a * b.oImage.height) } else { if (e <= 1.5 * Math.PI) { d.translate(-a * b.oImage.width, b.height) } else { d.translate(0, -f * b.oImage.width) } } } d.rotate(e); d.drawImage(b.oImage, 0, 0, b.oImage.width, b.oImage.height); d.restore() } b.id = g.id; b.angle = g.angle; g.parentNode.replaceChild(b, g) }; jQuery.fn.rotateRight = function (a) { this.rotate(a == undefined ? 90 : a) }; jQuery.fn.rotateLeft = function (a) { this.rotate(a == undefined ? -90 : -a) }; function Ring(a) { this.active = a; this.animationIndex = 0; this.x = 0; this.y = 0; this.xsp = 0; this.ysp = 0; this.tickCount = 0; this.draw = function (c, f, e) { if (a) { this.ysp += 0.09375; this.x += this.xsp; this.y += this.ysp; if (this.x < sonicManager.windowLocation.x || this.y < sonicManager.windowLocation.y || this.x > sonicManager.windowLocation.x + sonicManager.windowLocation.width || this.y > sonicManager.windowLocation.y + sonicManager.windowLocation.height) { this.tickCount = 4294967295; return false } if (sonicManager.sonicToon.checkCollisionLine(Math.floor(this.x) + 8, Math.floor(this.y) + 8, 16, 1) != -1) { this.ysp *= -0.75 } if (sonicManager.sonicToon.checkCollisionLine(Math.floor(this.x) - 8, Math.floor(this.y) + 8, 26, 0) != -1) { this.xsp *= -0.75 } if (sonicManager.drawTickCount > sonicManager.sonicToon.sonicLastHitTick + 64 && _H.intersectRect(sonicManager.sonicToon.myRec, { left: this.x - 8 * e.x, right: this.x + 8 * e.x, top: this.y - 8 * e.y, bottom: this.y + 8 * e.y })) { this.tickCount = 4294967295; sonicManager.sonicToon.rings++; return false } this.tickCount++ } if (sonicManager.sonicToon) { this.animationIndex = Math.floor((sonicManager.drawTickCount % ((a ? 4 : 8) * 4)) / (a ? 4 : 8)) } else { this.animationIndex = 0 } var d; if (sonicManager.SpriteCache.rings) { d = sonicManager.SpriteCache.rings } else { alert("sprite fial"); return } var b = d[this.animationIndex * 200 + e.y * 100 + e.x]; if (!b) { alert("sprite fail"); return } if (b.loaded) { c.drawImage(b, Math.floor(f.x * e.x), Math.floor(f.y * e.y)) } else { return false } } } function Sonic(d, f) { this.x = 20; this.y = 0; this.obtainedRing = []; this.rings = 0; this.jumping = false; this.crouching = false; this.holdingLeft = false; this.holdingRight = false; this.levelWidth = 0; this.xsp = 0; this.ysp = 0; this.sonicLastHitTick = 0; this.sonicJustHitTick = 0; this.acc = 0.046875; this.dec = 0.5; this.frc = 0.046875; this.rdec = 0.125; this.rfrc = 0.0234375; this.runningTick = 0; this.jmp = -6.5; this.grv = 0.21875; this.air = 0.09375; this.runningDir = 1; this.standStill = true; this.sonicLevel = d; this.state = SonicState.Ground; this.facing = true; this.ticking = false; this.breaking = 0; this.wasJumping = false; this.ducking = false; this.spinDash = false; this.myRec = {}; this.spinDashSpeed = 0; this.tick = function () { this.ticking = true; this.myRec = { left: this.x - 5, right: this.x + 5, top: this.y - 20, bottom: this.y + 20 }; switch (this.state) { case SonicState.Ground: if (this.justHit) { this.justHit = false; this.sonicJustHitTick = sonicManager.drawTickCount; this.xsp = 0 } if (this.spinDash) { this.spinDashSpeed -= (Math.floor(this.spinDashSpeed / 125)) / 256 } if (this.wasJumping && !this.jumping) { this.wasJumping = false } if (Math.abs(this.xsp) < 0.5) { this.rolling = false; this.currentlyBall = false } if (this.wasJumping && this.jumping) { } else { if (this.jumping) { this.wasJumping = true; if (this.ducking) { this.spinDash = true; this.spinDashSpeed += 2; if (this.spinDashSpeed > 8) { this.spinDashSpeed = 8 } this.spriteState = "spindash0" } else { this.state = SonicState.Air; this.currentlyBall = true; this.ysp = this.jmp } } } if (this.holdingLeft && this.standStill) { this.facing = false; this.standStill = false; this.xsp -= this.acc; this.runningDir = -1; break } if (this.holdingRight && this.standStill) { this.facing = true; this.standStill = false; this.xsp += this.acc; this.runningDir = 1; break } if (this.holdingRight) { this.facing = true; if (this.runningDir == 1) { if (this.rolling) { } else { } } else { if (Math.abs(this.xsp) > 4.5) { this.facing = false; this.breaking = 1; this.runningTick = 0 } this.runningDir = 1 } } else { if (this.holdingLeft) { this.facing = false; if (this.runningDir == -1) { } else { if (Math.abs(this.xsp) > 4.5) { this.facing = true; this.breaking = -1; this.runningTick = 0 } this.runningDir = -1 } } else { this.ducking = false; if (this.crouching) { if (Math.abs(this.xsp) > 1.03125) { this.rolling = true; this.currentlyBall = true } else { this.ducking = true } } else { if (this.spinDash) { this.xsp = (8 + Math.floor(this.spinDashSpeed) / 2) * (this.facing ? 1 : -1); this.spinDash = false; this.rolling = true; this.currentlyBall = true } } if (!this.rolling) { this.xsp -= Math.min(Math.abs(this.xsp), this.frc) * (this.xsp > 0 ? 1 : -1) } } } if (this.rolling) { this.xsp -= Math.min(Math.abs(this.xsp), this.rfrc) * (this.xsp > 0 ? 1 : -1) } break; case SonicState.Air: if (this.wasJumping) { if (this.jumping) { } else { if (this.ysp < 0) { if (this.ysp < -4) { this.ysp = -4 } } } } this.ysp += this.justHit ? 0.1875 : this.grv; if (this.ysp < 0 && this.ysp > -4) { if (Math.abs(this.xsp) > 0.125) { this.xsp *= 0.96875 } } if (this.ysp > 16) { this.ysp = 16 } break } var g = 6; if (this.holdingLeft) { if (this.xsp > 0) { if (this.rolling) { this.xsp -= this.rdec } else { this.xsp -= this.dec } } else { if (this.xsp > -g) { if (!this.rolling) { this.xsp -= this.acc; if (this.xsp < -g) { this.xsp = -g } } } } } else { if (this.holdingRight) { if (this.xsp < 0) { if (this.rolling) { this.xsp += this.rdec } else { this.xsp += this.dec } } else { if (this.xsp < g) { if (!this.rolling) { this.xsp += this.acc; if (this.xsp > g) { this.xsp = g } } } } } } var k = Math.abs(this.xsp); b = parseInt(this.spriteState.substring(this.spriteState.length - 1, this.spriteState.length)); if (this.breaking > 0) { if (this.xsp > 0 || this.xsp == 0 || this.spriteState == "breaking3") { this.facing = false; this.breaking = 0 } } else { if (this.breaking < 0) { if (this.xsp < 0 || this.xsp == 0 || this.spriteState == "breaking3") { this.breaking = 0; this.facing = true } } } if (this.justHit) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "hit") { this.spriteState = "hit0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(8 - k)) == 0) { this.spriteState = "hit1" } } } else { if (k == 0 && this.state == SonicState.Ground) { this.runningDir = 0; if (this.ducking) { if (this.spinDash) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "spindash") { this.spriteState = "spindash0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(2 - k)) == 0) { this.spriteState = "spindash" + ((b + 1) % 6) } } } else { if (this.spriteState.substring(0, this.spriteState.length - 1) != "duck") { this.spriteState = "duck0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(4 - k)) == 0) { this.spriteState = "duck1" } } } } else { this.spriteState = "normal"; this.standStill = true; this.currentlyBall = false; this.rolling = false; this.runningTick = 0 } } else { if (this.breaking != 0) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "breaking") { this.spriteState = "breaking0"; this.runningTick = 1 } else { if ((this.runningTick++) % (7) == 0) { this.spriteState = "breaking" + ((b + 1) % 4) } } } else { if (this.currentlyBall) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "balls") { this.spriteState = "balls0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(8 - k)) == 0) { this.spriteState = "balls" + ((b + 1) % 5) } } } else { if (k < 6) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "running") { this.spriteState = "running0"; this.runningTick = 1 } else { if ((this.runningTick++) % (Math.floor(8 - k)) == 0 || (Math.floor(8 - k) == 0)) { this.spriteState = "running" + ((b + 1) % 8) } } } else { if (k >= 6) { if (this.spriteState.substring(0, this.spriteState.length - 1) != "fastrunning") { this.spriteState = "fastrunning0"; this.runningTick = 1 } else { if (((this.runningTick++) % (Math.ceil(8 - k)) == 0) || (Math.floor(8 - k) == 0)) { this.spriteState = "fastrunning" + ((b + 1) % 4) } } } } } } } } this.x += this.xsp; this.y += this.ysp; var l = Math.floor(this.x); var j = Math.floor(this.y); var i, h; if ((i = this.checkCollisionLine(l - 9, j + 4, 20, 0)) != -1) { if (i < l) { this.x = l = i + 11; this.xsp = 0 } else { this.x = l = i - 11; this.xsp = 0 } } if (sonicManager.tickCount % 4 == 0) { this.checkCollisionWithRing() } switch (this.state) { case SonicState.Ground: if ((i = this.checkCollisionLine(l - 9, j, 20, 1)) == -1 && (h = this.checkCollisionLine(l + 9, j, 20, 1)) == -1) { this.state = SonicState.Air } else { if (i > -1) { this.y = j = i - 19 } else { if (h > -1) { this.y = j = h - 19 } } } break; case SonicState.Air: if ((i = this.checkCollisionLine(l - 9, j, 20, 1)) == -1 && (h = this.checkCollisionLine(l + 9, j, 20, 1)) == -1) { this.state = SonicState.Air } else { if (i > -1) { if (this.y + (20) >= i) { this.y = j = i - 19; this.rolling = this.currentlyBall = false; this.state = SonicState.Ground; this.ysp = 0 } } else { if (h > -1) { if (this.y + (20) >= h) { this.y = j = h - 19; this.rolling = this.currentlyBall = false; this.state = SonicState.Ground; this.ysp = 0 } } } } break } }; this.hit = function () { if (sonicManager.drawTickCount - this.sonicJustHitTick < 120) { return } this.justHit = true; this.ysp = -4; this.xsp = 2 * (-1); this.sonicLastHitTick = sonicManager.drawTickCount; var h = 0; var j = 101.25; var k = false; var i = 4; while (h < this.rings) { var g = new Ring(true); sonicManager.activeRings.push(g); g.x = this.x; g.y = this.y - 10; g.ysp = -Math.sin(j) * i; g.xsp = Math.cos(j) * i; if (k) { g.ysp *= -1; j += 22.5 } k = !k; h++; if (h == 16) { i = 2; j = 101.25 } } this.rings = 0 }; this.checkCollisionWithRing = function () { var j = this.myRec; for (var i in sonicManager.SonicLevel.Rings) { var k = sonicManager.SonicLevel.Rings[i]; if (this.obtainedRing[i]) { continue } var h = k.x * 8 * f.x; var g = k.y * 8 * f.y; if (_H.intersectRect(j, { left: h - 8 * f.x, right: h + 8 * f.x, top: g - 8 * f.y, bottom: g + 8 * f.y })) { this.rings++; this.obtainedRing[i] = true } } }; this.sensorA = 0; this.checkCollisionLine = function (h, p, k, n) { var o = p * this.levelWidth + h; var l = this.levelWidth; var j; var g; switch (n) { case 0: for (j = 0; j < k; j++) { if (h + j < 0 || this.heightInformation[p * this.levelWidth + (h + j)]) { return h + j } } break; case 1: for (j = 0, g = k * l; j < g; j += l) { if (this.heightInformation[o + j]) { return p + (j / l) } } break; case 2: for (j = 0; j < k; j++) { if (h - j < 0 || this.heightInformation[this.heightInformation[p * this.levelWidth + (h - j)]]) { return h - j } } break; case 3: for (j = 0, g = k * l; j < g; j += l) { if (this.heightInformation[o - j]) { return p - (j / l) } } break } return -1 }; this.cachedImages = []; this.spriteState = "normal"; this.spriteLocations = []; this.imageLength = 0; this.spriteLocations.normal = "assets/Sprites/sonic.png"; this.imageLength++; var b; for (b = 0; b < 4; b++) { this.spriteLocations["fastrunning" + b] = "assets/Sprites/fastrunning" + b + ".png"; this.imageLength++ } for (b = 0; b < 8; b++) { this.spriteLocations["running" + b] = "assets/Sprites/running" + b + ".png"; this.imageLength++ } for (b = 0; b < 4; b++) { this.spriteLocations["breaking" + b] = "assets/Sprites/breaking" + b + ".png"; this.imageLength++ } for (b = 0; b < 5; b++) { this.spriteLocations["balls" + b] = "assets/Sprites/balls" + b + ".png"; this.imageLength++ } for (b = 0; b < 2; b++) { this.spriteLocations["duck" + b] = "assets/Sprites/duck" + b + ".png"; this.imageLength++ } for (b = 0; b < 2; b++) { this.spriteLocations["hit" + b] = "assets/Sprites/hit" + b + ".png"; this.imageLength++ } for (b = 0; b < 6; b++) { this.spriteLocations["spindash" + b] = "assets/Sprites/spindash" + b + ".png"; this.imageLength++ } var c = this.cachedImages; var a = this.imageLoaded = [0]; for (var e in this.spriteLocations) { c[e] = _H.loadSprite(this.spriteLocations[e], function (g) { c[g.tag + f.x + f.y] = _H.scaleSprite(g, f, function (h) { a[0]++ }) }); c[e].tag = e } this.isLoading = function () { return this.imageLoaded[0] < this.imageLength }; this.drawUI = function (g, i, h) { g.font = "13pt Arial bold"; g.fillStyle = "Blue"; g.fillText("Rings: " + this.rings, i.x + 30, i.y + 45) }; this.draw = function (g, m) { var i = Math.floor(this.x); var h = Math.floor(this.y); var l; var j = sonicManager.drawTickCount - this.sonicJustHitTick; if (j < 120) { if (j % 8 < 4) { return } } if (l = this.cachedImages[this.spriteState + m.x + m.y]) { if (l.loaded) { g.save(); var k = 40 - (l.height / m.y); if (!this.facing) { g.translate(((i - 15 - sonicManager.windowLocation.x) * m.x) + l.width, ((h - 20 - sonicManager.windowLocation.y + k) * m.y)); g.scale(-1, 1); g.drawImage(l, 0, 0, l.width, l.height) } else { g.drawImage(l, ((i - 15 - sonicManager.windowLocation.x) * m.x), ((h - 20 - sonicManager.windowLocation.y + k) * m.y), l.width, l.height) } g.restore() } } else { if (l = this.cachedImages[this.spriteState]) { if (l.loaded) { this.cachedImages[this.spriteState + m.x + m.y] = _H.scaleSprite(l, m) } } else { this.cachedImages[this.spriteState] = _H.loadSprite(this.spriteLocations[this.spriteState]) } } }; this.runningDir = 0; this.kill = function () { }; this.pressJump = function () { if (!this.justHit) { this.jumping = true } }; this.pressCrouch = function () { if (!this.justHit) { this.crouching = true } }; this.pressLeft = function () { if (!this.justHit) { this.holdingLeft = true } }; this.pressRight = function () { if (!this.justHit) { this.holdingRight = true } }; this.releaseJump = function () { this.jumping = false }; this.releaseCrouch = function () { this.crouching = false }; this.releaseLeft = function () { this.holdingLeft = false }; this.releaseRight = function () { this.holdingRight = false }; this.buildHeightInfo = function () { var o = []; o.length = d.ChunkMap.length * 128 * 128; var p = Math.sqrt(d.ChunkMap.length); this.levelWidth = p * 128; for (var j = 0; j < p; j++) { for (var n = 0; n < p; n++) { var m = d.TileChunks[d.ChunkMap[j * p + n]]; for (var i = 0; i < 8; i++) { for (var k = 0; k < 8; k++) { var l = d.TilePieces[m.tilesPieces[i * 8 + k]]; for (var g = 0; g < 16; g++) { for (var h = 0; h < 16; h++) { o[(n * 128 + k * 16 + h) + (j * 128 + i * 16 + g) * (this.levelWidth)] = (l.heightMask.items[h]) > 16 - g } } } } } } return o }; this.heightInformation = this.buildHeightInfo(d) } SonicState = { Air: 0, Ground: 1 }; DEBUGs = true; window.requestAnimFrame = (function (a) { if (window.requestAnimationFrame) { return window.requestAnimationFrame(a) } if (window.webkitRequestAnimationFrame) { return window.webkitRequestAnimationFrame(a) } if (window.mozRequestAnimationFrame) { return window.mozRequestAnimationFrame(a) } if (window.oRequestAnimationFrame) { return window.oRequestAnimationFrame(a) } if (window.msRequestAnimationFrame) { return window.msRequestAnimationFrame(a) } window.setTimeout(a, 1000 / 60) }); function SonicEngine(a) { var g = this; this.canvas = $("#" + a); this.canvasItem = document.getElementById(a).getContext("2d"); var h = window.sonicManager = new SonicManager(this.canvasItem); this.canvasWidth = 0; this.canvasHeight = 0; document.getElementById(a).addEventListener("DOMMouseScroll", f, false); document.getElementById(a).addEventListener("mousewheel", f, false); document.getElementById(a).addEventListener("touchmove", d); document.getElementById(a).addEventListener("touchstart", b); document.getElementById(a).addEventListener("touchend", j); document.getElementById(a).addEventListener("mousedown", b); document.getElementById(a).addEventListener("mouseup", j); document.getElementById(a).addEventListener("mousemove", d); $(document).keydown(i); $(document).keyup(c); function b(k) { k.preventDefault(); if (h.uiManager.onClick(k)) { return false } if (h.onClick(k)) { return false } return false } function d(k) { k.preventDefault(); if (h.uiManager.onMouseMove(k)) { return false } return false } function j(k) { k.preventDefault(); h.uiManager.onMouseUp(k) } function f(k) { k.preventDefault(); if (h.uiManager.onMouseScroll(k)) { return false } return k.preventDefault() && false } function i(k) { switch (k.keyCode) { case 66: if (h.sonicToon) { h.sonicToon.hit() } break; case 38: case 87: if (h.sonicToon) { h.sonicToon.pressJump() } break; case 40: case 83: if (h.sonicToon) { h.sonicToon.pressCrouch() } break; case 37: case 65: if (h.sonicToon) { h.sonicToon.pressLeft() } break; case 39: case 68: if (h.sonicToon) { h.sonicToon.pressRight() } break } } function c(k) { switch (k.keyCode) { case 38: case 87: if (h.sonicToon) { h.sonicToon.releaseJump() } break; case 40: case 83: if (h.sonicToon) { h.sonicToon.releaseCrouch() } break; case 37: case 65: if (h.sonicToon) { h.sonicToon.releaseLeft() } break; case 39: case 68: if (h.sonicToon) { h.sonicToon.releaseRight() } break } } g.resizeCanvas = function () { g.canvasWidth = $(window).width(); g.canvasHeight = $(window).height(); g.canvas.attr("width", g.canvasWidth); g.canvas.attr("height", g.canvasHeight) }; function e(k) { k.clearRect(0, 0, g.canvasWidth, g.canvasHeight) } g.draw = function () { requestAnimFrame(g.draw); e(g.canvasItem); h.draw(g.canvasItem); h.uiManager.draw(g.canvasItem) }; $(window).resize(this.resizeCanvas); this.resizeCanvas(); requestAnimFrame(g.draw); window.setInterval(h.tick, 1000 / 60, h) } function SonicManager(d) { this.windowLocation = { x: 0, y: 0, width: 320, height: 240 }; var e = this.scale = { x: 2, y: 2 }; this.loading = true; this.showHeightMap = false; this.goodRing = new Ring(false); this.activeRings = []; this.uiManager = new UIManager(this, d, this.scale); this.SonicLevel = { Tiles: [], TilePieces: [], TileChunks: [], ChunkMap: [], Rings: {} }; var c = new TileChunk() + new TilePiece() + new Tile() + new HeightMask() + new Color(); for (var a = 0; a < 10; a++) { for (var b = 0; b < 10; b++) { this.SonicLevel.ChunkMap[b * 10 + a] = 0 } } this.clickState = ClickState.PlaceChunk; this.onClick = function (j) { if (j.shiftKey) { var h = this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[Math.floor(j.x / (128 * e.x)) + Math.floor(j.y / (128 * e.y)) * 10]]; var l = h.getTilePiece((j.x - Math.floor(j.x / (128 * e.x)) * (128 * e.x)), (j.y - Math.floor(j.y / (128 * e.y)) * (128 * e.y)), e); if (l) { this.uiManager.indexes.tpIndex = this.SonicLevel.TilePieces.indexOf(l); this.uiManager.modifyTilePieceArea.tilePiece = l; this.uiManager.solidTileArea.visible = true } } else { if (!j.button || j.button == 0) { switch (this.clickState) { case ClickState.PlaceChunk: this.SonicLevel.ChunkMap[Math.floor(j.x / (128 * e.x)) + Math.floor(j.y / (128 * e.y)) * 10] = this.uiManager.indexes.modifyIndex; break; case ClickState.PlaceRing: var g = Math.floor((j.x - Math.floor(j.x / (128 * e.x)) * (128 * e.x)) / (e.x)); var f = Math.floor((j.y - Math.floor(j.y / (128 * e.y)) * (128 * e.y)) / (e.y)); var k = (Math.floor(g / 16)) + (Math.floor(j.x / (128 * e.x))) * 8; var i = (Math.floor(f / 16)) + (Math.floor(j.y / (128 * e.y))) * 8; if (this.SonicLevel.Rings[i * 8 * 10 + k]) { delete this.SonicLevel.Rings[i * 8 * 10 + k] } else { this.SonicLevel.Rings[i * 8 * 10 + k] = { x: k, y: i} } break; default: } } } }; this.tickCount = 0; this.drawTickCount = 0; this.tick = function (f) { if (f.sonicToon) { f.tickCount++; if (f.loading) { if (!f.sonicToon.isLoading()) { f.loading = false } } else { f.sonicToon.tick(f.SonicLevel, e); if (f.sonicToon.y > 128 * 10) { f.sonicToon.y = 0 } if (f.sonicToon.x > 128 * 10) { f.sonicToon.x = 0 } } } }; this.draw = function (h) { h.save(); this.drawTickCount++; if (!this.inds || !this.inds.done) { if (!this.inds) { return } h.fillStyle = "white"; h.fillText("Loading...   " + (this.inds.tc + this.inds.tp + this.inds.t) + " / " + (this.inds.total), 95, 95); h.restore(); return } if (this.sonicToon) { if (this.loading) { h.fillStyle = "white"; h.fillText("Loading...", 60, 60); h.restore(); return } h.beginPath(); h.rect(0, 0, this.windowLocation.width * e.x, this.windowLocation.height * e.x); h.clip(); this.windowLocation.x = Math.floor(this.sonicToon.x - 160); this.windowLocation.y = Math.floor(this.sonicToon.y - 180); if (this.windowLocation.x < 0) { this.windowLocation.x = 0 } if (this.windowLocation.y < 0) { this.windowLocation.y = 0 } if (this.windowLocation.x > 128 * 10 - this.windowLocation.width) { this.windowLocation.x = 128 * 10 - this.windowLocation.width } if (this.windowLocation.y > 128 * 10 - this.windowLocation.height) { this.windowLocation.y = 128 * 10 - this.windowLocation.height } } for (var m = 0; m < this.SonicLevel.ChunkMap.length; m++) { if (!this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[m]]) { continue } var p = (m % 10); var o = Math.floor(m / 10); var q = { x: p * 128 * e.x, y: o * 128 * e.y }; if (!this.sonicToon || (q.x >= (this.windowLocation.x - 128) * e.x && q.y >= (this.windowLocation.y - 128) * e.y && q.x <= (this.windowLocation.x + 128) * e.x + this.windowLocation.width * e.x && q.y <= (this.windowLocation.y + 128) * e.y + this.windowLocation.height * e.y)) { var k = { x: q.x - this.windowLocation.x * e.x, y: q.y - this.windowLocation.y * e.x }; var g = this.showHeightMap ? 2 : this.sonicToon ? 0 : 1; this.SonicLevel.TileChunks[this.SonicLevel.ChunkMap[m]].draw(h, k, e, g); if (!this.sonicToon) { h.strokeStyle = "#DD0033"; h.lineWidth = 3; h.strokeRect(k.x, k.y, 128 * e.x, 128 * e.y) } } } for (var l in this.SonicLevel.Rings) { var f = this.SonicLevel.Rings[l]; if (this.sonicToon) { if (!this.sonicToon.obtainedRing[l]) { this.goodRing.draw(h, { x: (f.x) * 16 - this.windowLocation.x, y: (f.y) * 16 - this.windowLocation.y }, e, true) } } else { this.goodRing.draw(h, { x: (f.x) * 16 - this.windowLocation.x, y: (f.y) * 16 - this.windowLocation.y }, e, false) } } for (var n = this.activeRings.length - 1; n >= 0; n--) { var s = this.activeRings[n]; s.draw(h, { x: s.x - this.windowLocation.x, y: s.y - this.windowLocation.y }, e); if (s.tickCount > 256) { _H.remove(this.activeRings, s) } } if (this.sonicToon) { this.sonicToon.draw(h, e); if (this.windowLocation.x < 0) { this.windowLocation.x = 0 } if (this.windowLocation.y < 0) { this.windowLocation.y = 0 } if (this.windowLocation.x > 128 * 10 - this.windowLocation.width) { this.windowLocation.x = 128 * 10 - this.windowLocation.width } if (this.windowLocation.y > 128 * 10 - this.windowLocation.height) { this.windowLocation.y = 128 * 10 - this.windowLocation.height } } h.restore(); if (this.sonicToon) { this.sonicToon.drawUI(h, { x: 0, y: 0 }, e) } }; this.importChunkFromImage = function (s) { var A = _H.getImageData(s); if (A.length != 128 * 128 * 4) { alert("Chunk size incorrect") } var j = this.SonicLevel.Tiles.length; var z = []; var p; var n; var l = []; var q = []; var m; for (var r = 0; r < 16; r++) { for (var t = 0; t < 16; t++) { var o = []; for (n = 0; n < 8; n++) { for (p = 0; p < 8; p++) { var w = ((r * 8 + n) * 128) * 4 + (t * 8 + p) * 4; o.push(new Color(A[w], A[w + 1], A[w + 2])) } } m = _H.compareTiles(this.SonicLevel.Tiles, z, o); if (m == -1) { l.push(j + z.length); z.push(new Tile(o)) } else { l.push(m) } } } var v; for (v = 0; v < z.length; v++) { this.SonicLevel.Tiles.push(z[v]) } var g = []; var u = this.SonicLevel.TilePieces.length; for (n = 0; n < 8; n++) { for (p = 0; p < 8; p++) { var h = [l[((n * 2) * 16 + (p * 2))], l[((n * 2) * 16 + (p * 2 + 1))], l[((n * 2 + 1) * 16 + (p * 2))], l[((n * 2 + 1) * 16 + (p * 2 + 1))]]; m = _H.compareTilePieces(this.SonicLevel.TilePieces, g, h); if (m == -1) { q.push(u + g.length); g.push(new TilePiece(new HeightMask(RotationMode.Ground, 45), h)) } else { q.push(m) } } } for (v = 0; v < g.length; v++) { this.SonicLevel.TilePieces.push(g[v]) } var k = []; for (n = 0; n < 8; n++) { for (p = 0; p < 8; p++) { k.push(q[n * 8 + p]) } } this.SonicLevel.TileChunks.push(new TileChunk(k)) }; this.SpriteCache = { rings: [] }; this.preLoadSprites = function (o, m) { var l = this.SpriteCache.rings; var f = 0; var h = []; for (var g = 0; g < 4; g++) { h[g] = "assets/Sprites/ring" + g + ".png"; this.imageLength++ } for (var k = 0; k < h.length; k++) { var n = k * 200; l[n] = _H.loadSprite(h[k], function (i) { l[i.tag * 200 + o.x * 100 + o.y] = _H.scaleSprite(i, o, function (j) { f = f + 1; if (f == 4) { if (m) { m() } } }) }); l[n].tag = k } } } ClickState = { PlaceChunk: 0, PlaceRing: 1 }; var Stats = function () { var I, P, y = 0, x = 0, H = Date.now(), v = H, w = H, E = 0, C = 1000, B = 0, L, G, K, O = [[16, 16, 48], [0, 255, 255]], D = 0, A = 1000, z = 0, M, F, J, N = [[16, 48, 16], [0, 255, 0]]; I = document.createElement("div"); I.style.cursor = "pointer"; I.style.width = "80px"; I.style.opacity = "0.9"; I.style.zIndex = "10001"; I.addEventListener("mousedown", function (b) { b.preventDefault(); y = (y + 1) % 2; 0 == y ? (L.style.display = "block", M.style.display = "none") : (L.style.display = "none", M.style.display = "block") }, !1); L = document.createElement("div"); L.style.textAlign = "left"; L.style.lineHeight = "1.2em"; L.style.backgroundColor = "rgb(" + Math.floor(O[0][0] / 2) + "," + Math.floor(O[0][1] / 2) + "," + Math.floor(O[0][2] / 2) + ")"; L.style.padding = "0 0 3px 3px"; I.appendChild(L); G = document.createElement("div"); G.style.fontFamily = "Helvetica, Arial, sans-serif"; G.style.fontSize = "9px"; G.style.color = "rgb(" + O[1][0] + "," + O[1][1] + "," + O[1][2] + ")"; G.style.fontWeight = "bold"; G.innerHTML = "FPS"; L.appendChild(G); K = document.createElement("div"); K.style.position = "relative"; K.style.width = "74px"; K.style.height = "30px"; K.style.backgroundColor = "rgb(" + O[1][0] + "," + O[1][1] + "," + O[1][2] + ")"; for (L.appendChild(K); 74 > K.children.length; ) { P = document.createElement("span"), P.style.width = "1px", P.style.height = "30px", P.style.cssFloat = "left", P.style.backgroundColor = "rgb(" + O[0][0] + "," + O[0][1] + "," + O[0][2] + ")", K.appendChild(P) } M = document.createElement("div"); M.style.textAlign = "left"; M.style.lineHeight = "1.2em"; M.style.backgroundColor = "rgb(" + Math.floor(N[0][0] / 2) + "," + Math.floor(N[0][1] / 2) + "," + Math.floor(N[0][2] / 2) + ")"; M.style.padding = "0 0 3px 3px"; M.style.display = "none"; I.appendChild(M); F = document.createElement("div"); F.style.fontFamily = "Helvetica, Arial, sans-serif"; F.style.fontSize = "9px"; F.style.color = "rgb(" + N[1][0] + "," + N[1][1] + "," + N[1][2] + ")"; F.style.fontWeight = "bold"; F.innerHTML = "MS"; M.appendChild(F); J = document.createElement("div"); J.style.position = "relative"; J.style.width = "74px"; J.style.height = "30px"; J.style.backgroundColor = "rgb(" + N[1][0] + "," + N[1][1] + "," + N[1][2] + ")"; for (M.appendChild(J); 74 > J.children.length; ) { P = document.createElement("span"), P.style.width = "1px", P.style.height = 30 * Math.random() + "px", P.style.cssFloat = "left", P.style.backgroundColor = "rgb(" + N[0][0] + "," + N[0][1] + "," + N[0][2] + ")", J.appendChild(P) } return { getDomElement: function () { return I }, getFps: function () { return E }, getFpsMin: function () { return C }, getFpsMax: function () { return B }, getMs: function () { return D }, getMsMin: function () { return A }, getMsMax: function () { return z }, update: function () { H = Date.now(); D = H - v; A = Math.min(A, D); z = Math.max(z, D); F.textContent = D + " MS (" + A + "-" + z + ")"; var b = Math.min(30, 30 - 30 * (D / 200)); J.appendChild(J.firstChild).style.height = b + "px"; v = H; x++; if (H > w + 1000) { E = Math.round(1000 * x / (H - w)), C = Math.min(C, E), B = Math.max(B, E), G.textContent = E + " FPS (" + C + "-" + B + ")", b = Math.min(30, 30 - 30 * (E / 100)), K.appendChild(K.firstChild).style.height = b + "px", w = H, x = 0 } } } }; function Tile(a) { this.colors = a; this.sprites = []; Tile.prototype.changeColor = function (b, d, c) { this.colors[d * 8 + b] = c; this.sprites = [] }; Tile.prototype.cacheImage = function (c, g, e) { if (!this.sprites) { this.sprites = [] } var b = this.sprites[g.y * 100 + g.x]; if (!b) { var f = c.createImageData(8 * g.x, 8 * g.y); _H.setDataFromColors(f.data, this.colors, g, 8); this.sprites[g.y * 100 + g.x] = _H.loadSprite(_H.getBase64Image(f), e) } }; Tile.prototype.draw = function (c, g, f, e) { if (!this.sprites) { this.sprites = [] } var b = this.sprites[f.y * 100 + f.x]; if (!b) { this.cacheImage(c, f); b = this.sprites[f.y * 100 + f.x] } if (b.loaded) { c.drawImage(b, Math.floor(g.x), Math.floor(g.y)); if (e) { c.strokeStyle = "#DD0033"; c.lineWidth = 3; c.strokeRect(g.x, g.y, 8 * f.x, 8 * f.y) } } else { for (var d = 0; d < this.colors.length; d++) { c.fillStyle = this.colors[d].style(); c.fillRect(g.x + (d % 8) * f.x, g.y + Math.floor(d / 8) * f.y, f.x, f.x) } if (e) { c.strokeStyle = "#DD0033"; c.lineWidth = 3; c.strokeRect(g.x, g.y, 8 * f.x, 8 * f.y) } return false } return true }; Tile.prototype.equals = function (c) { for (var b = 0; b < this.colors.length; b++) { if (c[b]._style != this.colors[b]._style) { return false } } return true } } function TileChunk(a) { this.tilesPieces = a; this.sprites = []; TileChunk.prototype.getTilePiece = function (b, d, c) { return sonicManager.SonicLevel.TilePieces[this.tilesPieces[Math.floor((b / c.x / 16)) + Math.floor((d / c.y / 16)) * 8]] }; TileChunk.prototype.cacheImage = function (c, j, g, e) { if (!this.sprites) { this.sprites = [] } var d; var h = g * 200 + j.y * 50 + j.x; if (!this.sprites[h]) { var f = document.createElement("canvas"); f.width = 128 * j.x; f.height = 128 * j.y; var b = f.getContext("2d"); for (d = 0; d < this.tilesPieces.length; d++) { if (!sonicManager.SonicLevel.TilePieces[this.tilesPieces[d]].draw(b, { x: (d % 8) * 16 * j.x, y: Math.floor(d / 8) * 16 * j.y }, j, g == 2 ? 4 : 3, null, false)) { return false } if (g == 1 || g == 2) { b.lineWidth = 1; b.strokeStyle = "#FFFFFF"; b.strokeRect((d % 8) * 16 * j.x, Math.floor(d / 8) * 16 * j.y, 16 * j.x, 16 * j.y) } } this.sprites[h] = _H.loadSprite(f.toDataURL("image/png"), e) } return true }; TileChunk.prototype.draw = function (d, k, e, b) { if (!this.sprites) { this.sprites = [] } var h; for (h = 0; h < this.tilesPieces.length; h++) { var f = sonicManager.SonicLevel.TilePieces[this.tilesPieces[h]].sprites; if (!f || f.length == 0) { this.sprites = []; break } } var l = b * 200 + e.y * 50 + e.x; if (!this.sprites[l]) { var c = document.createElement("canvas"); c.width = 128 * e.x; c.height = 128 * e.y; var g = c.getContext("2d"); for (h = 0; h < this.tilesPieces.length; h++) { if (!sonicManager.SonicLevel.TilePieces[this.tilesPieces[h]].draw(g, { x: (h % 8) * 16 * e.x, y: Math.floor(h / 8) * 16 * e.y }, e, b == 2 ? 4 : 3)) { return false } if (b == 1 || b == 2) { g.lineWidth = 1; g.strokeStyle = "#FFFFFF"; g.strokeRect((h % 8) * 16 * e.x, Math.floor(h / 8) * 16 * e.y, 16 * e.x, 16 * e.y) } } this.sprites[l] = _H.loadSprite(c.toDataURL("image/png")) } if (this.sprites[l].loaded) { d.drawImage(this.sprites[l], Math.floor(k.x), Math.floor(k.y)) } return true } } function TilePiece(a, b) { this.heightMask = a; this.tiles = b; this.sprites = []; TilePiece.prototype.click = function (c, e, d) { switch (d) { case 0: this.heightMask.setItem(c, e); this.sprites = []; break; case 1: break; case 2: sonicManager.SonicLevel.Tiles[this.tiles[Math.floor(c / 8) + Math.floor(e / 8) * 2]].changeColor(c % 8, e % 8, new Color(0, 0, 0)); break } }; TilePiece.prototype.mouseOver = function (c, d) { }; TilePiece.prototype.cacheImage = function (d, k, h, f) { if (!this.sprites) { this.sprites = [] } var e; var j = h * 200 + k.y * 50 + k.x; if (!this.sprites[j]) { var g = document.createElement("canvas"); g.width = 2 * 8 * k.x; g.height = 2 * 8 * k.y; var c = g.getContext("2d"); for (e = 0; e < this.tiles.length; e++) { if (!sonicManager.SonicLevel.Tiles[this.tiles[e]].draw(c, { x: (e % 2) * 8 * k.x, y: Math.floor(e / 2) * 8 * k.y }, k, h < 3)) { return false } } if (h == 4) { this.heightMask.draw(c, { x: 0, y: 0 }, k, -1) } this.sprites[j] = _H.loadSprite(g.toDataURL("image/png"), f) } return true }; TilePiece.prototype.draw = function (e, l, f, d, m) { if (!this.sprites) { this.sprites = [] } var k; for (k = 0; k < this.tiles.length; k++) { var g = sonicManager.SonicLevel.Tiles[this.tiles[k]].sprites; if (!g || g.length == 0) { this.sprites = []; break } } if (d < 3) { for (k = 0; k < this.tiles.length; k++) { if (!sonicManager.SonicLevel.Tiles[this.tiles[k]].draw(e, { x: Math.floor(l.x) + (k % 2) * 8 * f.x, y: Math.floor(l.y) + Math.floor(k / 2) * 8 * f.y }, f, d != 3) && !m) { return false } } this.heightMask.draw(e, l, f, d); return true } var n = d * 200 + f.y * 50 + f.x; if (!this.sprites[n]) { var c = document.createElement("canvas"); c.width = 2 * 8 * f.x; c.height = 2 * 8 * f.y; var h = c.getContext("2d"); for (k = 0; k < this.tiles.length; k++) { if (!sonicManager.SonicLevel.Tiles[this.tiles[k]].draw(h, { x: (k % 2) * 8 * f.x, y: Math.floor(k / 2) * 8 * f.y }, f, d < 3)) { if (m) { for (k = k; k < this.tiles.length; k++) { sonicManager.SonicLevel.Tiles[this.tiles[k]].draw(h, { x: (k % 2) * 8 * f.x, y: Math.floor(k / 2) * 8 * f.y }, f, d < 3) } if (d == 4) { this.heightMask.draw(h, { x: 0, y: 0 }, f, -1) } return false } return false } } if (d == 4) { this.heightMask.draw(h, { x: 0, y: 0 }, f, -1) } this.sprites[n] = _H.loadSprite(c.toDataURL("image/png")) } if (this.sprites[n].loaded) { e.drawImage(this.sprites[n], Math.floor(l.x), Math.floor(l.y)) } else { return false } return true }; TilePiece.prototype.equals = function (d) { for (var c = 0; c < this.tiles.length; c++) { if (d[c] != this.tiles[c]) { return false } } return true } } RotationMode = { Ground: 134, Right: 224, Ceiling: 314, Left: 44 }; function UiArea(a, g, b, e, c, d) { this.x = a; this.y = g; this.manager = c; this.closable = d; this.width = b; this.height = e; this.depth = 0; this.visible = true; this.dragging = false; this.controls = []; this.addControl = function (h) { h.parent = this; this.controls.push(h); return h }; var f = this; if (d) { this.addControl(new Button(this.width - 30, 4, 26, 26, "X", this.manager.buttonFont, "Green", function () { f.visible = false })) } this.click = function (j) { if (!this.visible) { return } for (var h = 0; h < this.controls.length; h++) { var i = this.controls[h]; if (i.visible && i.y <= j.y && i.y + i.height > j.y && i.x <= j.x && i.x + i.width > j.x) { j.x -= i.x; j.y -= i.y; i.onClick(j); return false } } this.dragging = { x: j.x, y: j.y} }; this.mouseMove = function (j) { if (!this.visible) { return } if (!this.dragging) { for (var h = 0; h < this.controls.length; h++) { var i = this.controls[h]; if (i.visible && i.y <= j.y && i.y + i.height > j.y && i.x <= j.x && i.x + i.width > j.x) { j.x -= i.x; j.y -= i.y; i.onMouseOver(j) } } return } this.x += j.x - this.dragging.x; this.y += j.y - this.dragging.y }; this.mouseUp = function (j) { if (!this.visible) { return } for (var h = 0; h < this.controls.length; h++) { var i = this.controls[h]; i.onMouseUp({ x: j.x - i.x, y: j.y - i.y }) } this.dragging = false }; this.scroll = function (j) { if (!this.visible) { return } for (var h = 0; h < this.controls.length; h++) { var i = this.controls[h]; if (i.visible && i.y <= j.y && i.y + i.height > j.y && i.x <= j.x && i.x + i.width > j.x) { if (i.onScroll) { j.x -= i.x; j.y -= i.y; i.onScroll(j); return false } } } }; this.cachedDrawing = null; this.draw = function (p) { if (!this.visible) { return } var o; var m; var l; if (!this.cachedDrawing) { var n = document.createElement("canvas"); n.width = this.width + 20; n.height = this.height + 20; var i = n.getContext("2d"); i.fillStyle = "rgba(133,133,133,0.6)"; i.lineWidth = 9; i.strokeStyle = "#333"; var k = this.x; var h = this.y; this.x = 10; this.y = 10; roundRect(i, this.x, this.y, this.width, this.height, 5, true, true); for (l = 0; l < this.controls.length; l++) { m = this.controls[l]; o = m.forceDrawing(); if (o.redraw) { m.draw(i) } } this.x = k; this.y = h; this.cachedDrawing = _H.loadSprite(n.toDataURL("image/png")) } if (this.cachedDrawing.loaded) { p.drawImage(this.cachedDrawing, Math.floor(this.x), Math.floor(this.y)); for (l = 0; l < this.controls.length; l++) { m = this.controls[l]; o = m.forceDrawing(); if (!o.redraw) { m.draw(p) } if (o.clearCache) { this.cachedDrawing = null } } } else { p.fillStyle = "rgba(133,133,133,0.6)"; p.lineWidth = 9; p.strokeStyle = "#333"; roundRect(p, this.x + 10, this.y + 10, this.width, this.height, 5, true, true); for (l = 0; l < this.controls.length; l++) { m = this.controls[l]; m.draw(p) } } }; return this } function TextArea(a, e, d, c, b) { this.forceDrawing = function () { if (this.text == this.oldText) { return { redraw: false, clearCache: false} } this.oldText = this.text; return { redraw: false, clearCache: true} }; this.x = a; this.oldText = d; this.y = e; this.visible = true; this.text = d; this.font = c; this.color = b; this.parent = null; this.onClick = function (f) { return false }; this.onMouseUp = function (f) { if (this.mouseUp) { this.mouseUp() } }; this.onMouseOver = function (f) { if (this.mouseOver) { this.mouseOver() } }; this.draw = function (k) { if (!this.visible) { return } var j = _H.isFunction(this.text) ? this.text() : this.text; if (k.font != this.font) { k.font = this.font } var f = k.measureText(j).width; var g = parseInt(k.font.split("pt")[0]); var i = 3; k.strokeStyle = this.color; k.shadowColor = "#FFF"; k.shadowBlur = 20; k.lineWidth = 1.5; k.strokeText(j, this.parent.x + this.x, this.parent.y + this.y); k.strokeText(j, this.parent.x + this.x, this.parent.y + this.y); k.strokeText(j, this.parent.x + this.x, this.parent.y + this.y); k.strokeText(j, this.parent.x + this.x, this.parent.y + this.y); k.strokeText(j, this.parent.x + this.x, this.parent.y + this.y); k.shadowBlur = 0 }; return this } function Button(g, f, a, i, h, c, d, j, e, b) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = g; this.y = f; this.visible = true; this.width = a; this.height = i; this.text = h; this.font = c; this.clicking = false; this.click = j; this.mouseUp = e; this.mouseOver = b; this.color = d; this.parent = null; this.onClick = function (k) { if (!this.visible) { return } this.clicking = true }; this.onMouseUp = function (k) { if (!this.visible) { return } if (this.clicking) { if (this.click) { this.click() } } this.clicking = false; if (this.mouseUp) { this.mouseUp() } }; this.onMouseOver = function (k) { if (!this.visible) { return } if (this.mouseOver) { this.mouseOver() } }; this.draw = function (k) { if (!this.visible) { return } k.fillStyle = this.color; k.strokeStyle = "#DAC333"; roundRect(k, this.parent.x + this.x, this.parent.y + this.y, this.width, this.height, 5, true, true); k.fillStyle = this.clicking ? "#FCA" : "#334"; if (k.font != this.font) { k.font = this.font } k.fillText(this.text, this.parent.x + this.x + ((this.width / 2) - (k.measureText(this.text).width / 2)), this.parent.y + this.y + (this.height / 3) * 2) }; return this } function TilePieceArea(a, e, c, d, b) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = a; this.y = e; this.visible = true; this.scale = c; this.width = c.x * 16; this.height = c.y * 17; this.clicking = false; this.tilePiece = d; this.parent = null; this.state = b; this.onClick = function (f) { if (!this.visible) { return } this.clicking = true; this.clickHandled = false }; this.onMouseUp = function (f) { if (!this.visible) { return } if (this.tilePiece && this.clicking && !this.clickHandled) { this.tilePiece.click(Math.floor(f.x / c.x), Math.floor(f.y / c.y), this.state) } this.clickHandled = false; this.clicking = false }; this.clickHandled = false; this.onMouseOver = function (f) { if (!this.tilePiece) { return } if (this.clicking) { this.clickHandled = true; this.tilePiece.click(Math.floor(f.x / c.x), Math.floor(f.y / c.y), this.state) } else { this.tilePiece.mouseOver(Math.floor(f.x / c.x), Math.floor(f.y / c.y)) } }; this.draw = function (f) { if (!this.visible) { return } if (!this.tilePiece) { return } this.tilePiece.tag = true; this.tilePiece.draw(f, { x: this.parent.x + this.x, y: this.parent.y + this.y }, this.scale, this.state, true); this.tilePiece.tag = false }; return this } function TileChunkArea(a, e, d, c, b) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = a; this.y = e; this.visible = true; this.scale = d; this.width = d.x * 128; this.height = d.y * 128; this.clicking = false; this.tileChunk = c; this.parent = null; this.state = b; this.setToTile = null; this.onClick = function (f) { if (!this.visible) { return } this.clicking = true }; this.onMouseUp = function (f) { if (!this.visible) { return } if (this.clicking) { if (this.setToTile != null) { this.tileChunk.tilesPieces[((Math.floor(f.x / this.scale.x / 16))) + (Math.floor(f.y / this.scale.y / 16)) * 8] = sonicManager.SonicLevel.TilePieces.indexOf(this.setToTile); this.tileChunk.sprites = [] } } this.clickHandled = false; this.clicking = false }; this.clickHandled = false; this.onMouseOver = function (f) { if (this.clicking) { } }; this.draw = function (f) { if (!this.visible) { return } if (!this.tileChunk) { return } this.tileChunk.draw(f, { x: this.parent.x + this.x, y: this.parent.y + this.y }, this.scale, true) }; return this } function ScrollBox(b, h, g, a, f, d, c) { this.forceDrawing = function () { return { redraw: false, clearCache: false} }; this.x = b; this.y = h; this.itemWidth = f; this.visible = true; var e = 14; this.width = f + e; this.visibleItems = a; this.itemHeight = g; this.backColor = d; this.height = a * g; this.parent = null; this.scrollOffset = 0; this.scrollPosition = 0; this.dragging = false; if (c) { this.controls = c } else { this.controls = [] } this.scrolling = false; this.addControl = function (i) { i.parent = this; this.controls.push(i); return i }; this.onClick = function (k) { if (!this.visible) { return } for (var i = this.scrollOffset; i < this.controls.length; i++) { var j = this.controls[i]; if (j.y <= k.y && j.y + j.height > k.y && j.x <= k.x && j.x + j.width > k.x) { k.x -= j.x; k.y -= j.y; j.onClick(k); return false } } if (k.x > this.itemWidth && k.x < this.itemWidth + e) { if (this.scrollPosition > k.y) { if (this.scrollOffset > 0) { this.scrollOffset-- } } else { if (this.scrollOffset < this.controls.length - this.visibleItems) { this.scrollOffset++ } } } this.dragging = true; return false }; this.onMouseUp = function (k) { if (!this.visible) { return } this.dragging = false; for (var i = this.scrollOffset; i < this.controls.length; i++) { var j = this.controls[i]; if (j.y <= k.y && j.y + j.height > k.y && j.x <= k.x && j.x + j.width > k.x) { k.x -= j.x; k.y -= j.y; j.onMouseUp(k); return false } } if (this.mouseUp) { this.mouseUp() } }; this.onMouseOver = function (k) { if (!this.visible) { return } for (var i = 0; i < this.controls.length; i++) { var j = this.controls[i]; if (j.y <= k.y && j.y + j.height > k.y && j.x <= k.x && j.x + j.width > k.x) { k.x -= j.x; k.y -= j.y; j.onMouseOver(k); break } } if (this.dragging && k.x > this.itemWidth && k.x < this.itemWidth + e) { if (this.scrollPosition > k.y) { if (this.scrollOffset > 0) { this.scrollOffset-- } } else { if (this.scrollOffset < this.controls.length - this.visibleItems) { this.scrollOffset++ } } } if (this.mouseOver) { this.mouseOver() } }; this.onScroll = function (k) { if (!this.visible) { return } if (k.delta > 0) { if (this.scrollOffset > 0) { this.scrollOffset-- } } else { if (this.scrollOffset < this.controls.length - this.visibleItems) { this.scrollOffset++ } } for (var i = 0; i < this.controls.length; i++) { var j = this.controls[i]; if (j.y <= k.y && j.y + j.height > k.y && j.x <= k.x && j.x + j.width > k.x) { k.x -= j.x; k.y -= j.y; if (j.onScroll) { j.onScroll(k) } return false } } if (this.scroll) { this.scroll() } }; this.draw = function (l) { if (!this.visible) { return } l.fillStyle = this.backColor; var k; l.fillStyle = this.backColor; l.lineWidth = 1; l.strokeStyle = "#333"; roundRect(l, this.parent.x + this.x, this.parent.y + this.y, this.itemWidth + e + 6, this.visibleItems * this.itemHeight, 3, true, true); l.fillStyle = "grey"; l.lineWidth = 1; l.strokeStyle = "#444"; l.fillRect(this.parent.x + this.x + this.itemWidth + 2 + 2, this.parent.y + this.y + 2, e, this.visibleItems * this.itemHeight - 2); l.fillStyle = "red"; l.lineWidth = 1; l.strokeStyle = "#444"; this.scrollPosition = (this.visibleItems * this.itemHeight - 2) * this.scrollOffset / this.controls.length; l.fillRect(this.parent.x + this.x + this.itemWidth + 2 + 2 + 2, this.parent.y + this.y + 2 + (this.scrollPosition), e - 2, 5); var j = 1; for (k = this.scrollOffset; k < Math.min(this.controls.length, this.scrollOffset + this.visibleItems); k++) { this.controls[k].parent = { x: this.parent.x + this.x, y: this.parent.y + this.y }; this.controls[k].x = 2; this.controls[k].y = j; this.controls[k].height = this.itemHeight; this.controls[k].width = this.itemWidth; j += this.itemHeight; this.controls[k].draw(l) } }; return this } function roundRect(d, c, h, e, b, a, g, f) { if (typeof f == "undefined") { f = true } if (typeof a === "undefined") { a = 5 } d.beginPath(); d.moveTo(c + a, h); d.lineTo(c + e - a, h); d.quadraticCurveTo(c + e, h, c + e, h + a); d.lineTo(c + e, h + b - a); d.quadraticCurveTo(c + e, h + b, c + e - a, h + b); d.lineTo(c + a, h + b); d.quadraticCurveTo(c, h + b, c, h + b - a); d.lineTo(c, h + a); d.quadraticCurveTo(c, h, c + a, h); d.closePath(); if (f) { d.stroke() } if (g) { d.fill() } } function UIManager(b, n, s) { this.UIAreas = []; this.messages = []; var k = this.textFont = "18pt sans-serrif "; var e = this.buttonFont = "13pt Arial bold"; n.font = k; var h = this.indexes = { tpIndex: 0, modifyIndex: 0, modifyTPIndex: 0 }; this.draw = function (w) { w.save(); var u = JSLINQ(this.UIAreas).OrderBy(function (z) { return z.depth }); for (var y = 0; y < u.items.length; y++) { var v = u.items[y]; v.draw(w) } if (DEBUGs) { for (var x = 0; x < this.messages.length; x++) { w.fillText(this.messages[x], 10, 25 + x * 30) } } w.restore() }; this.onMouseScroll = function (u) { var x = u.wheelDelta ? u.wheelDelta / 40 : u.detail ? -u.detail : 0; for (var w = 0; w < this.UIAreas.length; w++) { var v = this.UIAreas[w]; if (v.visible && v.y <= u.y && v.y + v.height > u.y && v.x <= u.x && v.x + v.width > u.x) { u = { x: u.x - v.x, y: u.y - v.y, delta: x }; return v.scroll(u) } } return false }; this.onClick = function (y) { var u = _H.getCursorPosition(y); var z = null; var v; var x; for (x = 0; x < this.UIAreas.length; x++) { v = this.UIAreas[x]; if (v.visible && v.y <= u.y && v.y + v.height > u.y && v.x <= u.x && v.x + v.width > u.x) { z = v; var w = { x: u.x - v.x, y: u.y - v.y }; v.click(w) } } if (z) { for (x = 0; x < this.UIAreas.length; x++) { v = this.UIAreas[x]; if (z == v) { v.depth = 1 } else { v.depth = 0 } } return true } return false }; this.onMouseMove = function (y) { var u = _H.getCursorPosition(y); var v = JSLINQ(this.UIAreas).OrderBy(function (z) { return -z.depth }); for (var x = 0; x < v.items.length; x++) { var w = v.items[x]; if (w.dragging || (w.visible && w.y <= u.y && w.y + w.height > u.y && w.x <= u.x && w.x + w.width > u.x)) { u = { x: u.x - w.x, y: u.y - w.y }; return w.mouseMove(u) } } return false }; this.onMouseUp = function (y) { var u = _H.getCursorPosition(y, true); for (var x = 0; x < this.UIAreas.length; x++) { var v = this.UIAreas[x]; var w = { x: u.x - v.x, y: u.y - v.y }; v.mouseUp(w) } }; var l = this.debuggerArea = new UiArea(650, 40, 200, 170, this, true); l.visible = false; this.UIAreas.push(l); l.addControl(new TextArea(30, 25, "Debugger", k, "blue")); l.addControl(new Button(40, 60, 60, 22, "Stop", e, "rgb(50,150,50)", function () { b.windowLocation.x = 0; b.windowLocation.y = 0; l.visible = false; j.visible = false; m.visible = true; q.visible = true; b.sonicToon = null })); l.addControl(new Button(40, 95, 90, 22, "Hit Sonic", e, "rgb(50,150,50)", function () { b.sonicToon.hit() })); l.addControl(new Button(40, 130, 160, 22, "Show Height Map", e, "rgb(50,150,50)", function () { if (this.text == "Show Height Map") { b.showHeightMap = true; this.text = "Hide Height Map" } else { b.showHeightMap = false; this.text = "Show Height Map" } })); var j = this.solidTileArea = new UiArea(40, 450, 430, 400, this, true); j.visible = false; this.UIAreas.push(j); j.addControl(new TextArea(30, 25, "Modify Solid Tile", k, "blue")); j.addControl(new Button(50, 35, 25, 22, "<<", e, "rgb(50,150,50)", function () { if (h.tpIndex > 0) { c.tilePiece = b.SonicLevel.TilePieces[--h.tpIndex] } })); j.addControl(new Button(75, 35, 25, 22, ">>", e, "rgb(50,150,50)", function () { if (h.tpIndex < b.SonicLevel.TilePieces.length) { c.tilePiece = b.SonicLevel.TilePieces[++h.tpIndex] } })); j.addControl(new Button(360, 80, 45, 22, "Full", e, "rgb(50,150,50)", function () { for (var u = 0; u < 16; u++) { c.tilePiece.heightMask.items[u] = 16 } this.sprites = [] })); j.addControl(new Button(200, 35, 180, 22, "Modify Height Map", e, "rgb(50,150,50)", function () { c.state = (c.state + 1) % 3; switch (c.state) { case 0: this.text = "Modify Height Map"; break; case 1: this.text = "Modify Tile Direction"; break; case 2: this.text = "Modify Tile Colors"; break } })); var c = this.modifyTilePieceArea = new TilePieceArea(30, 70, { x: 4 * 5, y: 4 * 5 }, null, 0); j.addControl(c); var m = this.levelInformation = new UiArea(500, 440, 420, 360, this); m.visible = true; this.UIAreas.push(m); m.addControl(new TextArea(30, 25, "Level Selector", k, "blue")); m.addControl(new TextArea(30, 52, function () { return !f ? "Level Not Saved" : ("Current Level: " + f) }, k, "black")); m.addControl(new Button(190, 70, 100, 22, "Save Level", e, "rgb(50,150,50)", function () { if (f) { OurSonic.SonicLevels.SaveLevelInformation(f, _H.stringify(b.SonicLevel), function (u) { }, function (u) { alert("Failure: " + _H.stringify(u)) }) } else { OurSonic.SonicLevels.saveLevel((_H.stringify(b.SonicLevel)), function (u) { p(f) }) } })); m.addControl(new Button(190, 105, 160, 22, "Load Empty Level", e, "rgb(50,150,50)", function () { q.visible = true; i.visible = true; var u = 1; var v = function () { var w = 86; if (u == w) { setTimeout(function () { a(_H.stringify(b.SonicLevel), n); i.visible = false }, 500); return } setTimeout(v, 100); _H.loadSprite("assets/TileChunks/HiPlane" + u++ + ".png", function (x) { i.text = "Loading " + u + "/" + w; b.importChunkFromImage(x); if (u == w) { b.inds = { done: true} } }) }; setTimeout(v, 100) })); var g; m.addControl(g = new ScrollBox(30, 70, 25, 11, 130, "rgb(50,60,127)")); var f; OurSonic.SonicLevels.getLevels(function (w) { for (var v = 0; v < w.length; v++) { var u = w[v]; p(u) } }); function p(u) { var v; g.addControl(v = new Button(0, 0, 0, 0, u, "10pt Arial", "rgb(50,190,90)", function () { f = "Downloading"; OurSonic.SonicLevels.openLevel(u, function (w) { f = u; a(w, n) }) })) } var q = this.levelManagerArea = new UiArea(500, 25, 400, 400, this); q.visible = false; this.UIAreas.push(q); q.addControl(new TextArea(30, 25, "Level Manager", k, "blue")); var i; q.addControl(i = new TextArea(270, 25, "Loading", k, "green")); i.visible = false; q.addControl(new Button(35, 100, 160, 22, "Show Height Map", e, "rgb(50,150,50)", function () { if (this.text == "Show Height Map") { b.showHeightMap = true; this.text = "Hide Height Map" } else { b.showHeightMap = false; this.text = "Show Height Map" } })); q.addControl(new Button(200, 150, 160, 22, "Place Chunks", e, "rgb(50,150,50)", function () { switch (++b.clickState) { case ClickState.PlaceChunk: this.text = "Place Chunks"; break; case ClickState.PlaceRing: this.text = "Place Rings"; break } })); q.addControl(new Button(35, 150, 160, 22, "Modify Chunks", e, "rgb(50,150,50)", function () { r.visible = true })); q.addControl(new Button(35, 150, 160, 22, "Modify Chunks", e, "rgb(50,150,50)", function () { r.visible = true })); q.addControl(new Button(35, 175, 160, 22, "Modify Tile Pieces", e, "rgb(50,150,50)", function () { j.visible = true })); q.addControl(new Button(35, 200, 160, 22, "Modify Tiles", e, "rgb(50,150,50)", function () { t.visible = true })); q.addControl(new Button(200, 35, 60, 22, "Run", e, "rgb(50,150,50)", function () { q.visible = false; j.visible = false; m.visible = false; t.visible = false; r.visible = false; j.visible = false; l.visible = true; b.loading = true; b.sonicToon = new Sonic(b.SonicLevel, b.scale) })); var r = this.modifyTileChunkArea = new UiArea(900, 450, 400, 400, this, true); r.visible = false; this.UIAreas.push(r); r.addControl(new TextArea(30, 25, "Modify Tile Chunk", k, "blue")); var d = this.modifyTC = new TileChunkArea(30, 70, { x: 2, y: 2 }, null, 1); r.addControl(d); r.addControl(new Button(50, 35, 25, 22, "<<", e, "rgb(50,150,50)", function () { if (h.modifyIndex > 0) { d.tileChunk = b.SonicLevel.TileChunks[--h.modifyIndex] } })); r.addControl(new Button(80, 35, 25, 22, ">>", e, "rgb(50,150,50)", function () { if (h.modifyIndex < b.SonicLevel.TileChunks.length) { d.tileChunk = b.SonicLevel.TileChunks[++h.modifyIndex] } })); var o = this.modifyTP = new TilePieceArea(300, 160, { x: 2 * 3, y: 2 * 3 }, null, 3); r.addControl(o); r.addControl(new Button(300, 100, 25, 22, "<<", e, "rgb(50,150,50)", function () { if (h.modifyTPIndex > 0) { o.tilePiece = d.setToTile = b.SonicLevel.TilePieces[--h.modifyTPIndex] } })); r.addControl(new Button(330, 100, 25, 22, ">>", e, "rgb(50,150,50)", function () { if (h.modifyTPIndex < b.SonicLevel.TilePieces.length) { o.tilePiece = d.setToTile = b.SonicLevel.TilePieces[++h.modifyTPIndex] } })); var t = this.modifyTileArea = new UiArea(900, 25, 400, 400, this, true); t.visible = false; this.UIAreas.push(t); t.addControl(new TextArea(30, 25, "Modify Tile", k, "blue")); function a(w, z) { q.visible = true; b.SonicLevel = jQuery.parseJSON((w)); var y; var v; if (!b.SonicLevel.TileChunks) { b.SonicLevel.TileChunks = [] } if (!b.SonicLevel.TilePieces) { b.SonicLevel.TilePieces = [] } if (!b.SonicLevel.Tiles) { b.SonicLevel.Tiles = [] } if (!b.SonicLevel.Rings) { b.SonicLevel.Rings = {} } for (v = 0; v < b.SonicLevel.TileChunks.length; v++) { y = b.SonicLevel.TileChunks[v]; y.__proto__ = TileChunk.prototype } for (v = 0; v < b.SonicLevel.TilePieces.length; v++) { y = b.SonicLevel.TilePieces[v]; y.__proto__ = TilePiece.prototype; y.heightMask.__proto__ = HeightMask.prototype } for (v = 0; v < b.SonicLevel.Tiles.length; v++) { y = b.SonicLevel.Tiles[v]; y.__proto__ = Tile.prototype; for (var A = 0; A < y.colors.length; A++) { y.colors[A].__proto__ = Color.prototype } } var B = function () { if (u.tc == b.SonicLevel.TileChunks.length * 2 && u.r == 1 && u.tp == b.SonicLevel.TilePieces.length * 5 && u.t == b.SonicLevel.Tiles.length) { u.done = true; d.tileChunk = b.SonicLevel.TileChunks[0]; c.tilePiece = o.tilePiece = b.SonicLevel.TilePieces[0] } }; var u = b.inds = { r: 0, t: 0, tp: 0, tc: 0, total: (b.SonicLevel.TileChunks.length * 2 + b.SonicLevel.TilePieces.length * 5 + b.SonicLevel.Tiles.length), done: false }; b.preLoadSprites(s, function () { u.r = 1; B() }); var x = s; for (v = 0; v < b.SonicLevel.Tiles.length; v++) { y = b.SonicLevel.Tiles[v]; y.cacheImage(z, x, function (D) { u.t++; var C = function (F) { u.tp++; if (u.tp == b.SonicLevel.TilePieces.length * 5) { var E = function (G) { u.tc++; B() }; for (D = 0; D < b.SonicLevel.TileChunks.length; D++) { y = b.SonicLevel.TileChunks[D]; y.cacheImage(z, x, 1, E); y.cacheImage(z, x, 2, E) } } }; if (u.t == b.SonicLevel.Tiles.length) { for (D = 0; D < b.SonicLevel.TilePieces.length; D++) { y = b.SonicLevel.TilePieces[D]; y.cacheImage(z, x, 0, C); y.cacheImage(z, x, 1, C); y.cacheImage(z, x, 2, C); y.cacheImage(z, x, 3, C); y.cacheImage(z, x, 4, C) } } }) } } };